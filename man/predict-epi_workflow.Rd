% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_workflow.R
\name{predict-epi_workflow}
\alias{predict-epi_workflow}
\alias{predict.epi_workflow}
\title{Predict from an epi_workflow}
\usage{
\method{predict}{epi_workflow}(object, new_data, type = NULL, opts = list(), ...)
}
\arguments{
\item{object}{An epi_workflow that has been fit by
\code{\link[workflows:fit-workflow]{workflows::fit.workflow()}}}

\item{new_data}{A data frame containing the new predictors to preprocess
and predict on}

\item{type}{A single character value or \code{NULL}. Possible values
are \code{"numeric"}, \code{"class"}, \code{"prob"}, \code{"conf_int"}, \code{"pred_int"},
\code{"quantile"}, \code{"time"}, \code{"hazard"}, \code{"survival"}, or \code{"raw"}. When \code{NULL},
\code{predict()} will choose an appropriate value based on the model's mode.}

\item{opts}{A list of optional arguments to the underlying
predict function that will be used when \code{type = "raw"}. The
list should not include options for the model object or the
new data being predicted.}

\item{...}{Additional \code{parsnip}-related options, depending on the
value of \code{type}. Arguments to the underlying model's prediction
function cannot be passed here (use the \code{opts} argument instead).
Possible arguments are:
\itemize{
\item \code{interval}: for \code{type} equal to \code{"survival"} or \code{"quantile"}, should
interval estimates be added, if available? Options are \code{"none"}
and \code{"confidence"}.
\item \code{level}: for \code{type} equal to \code{"conf_int"}, \code{"pred_int"}, or \code{"survival"},
this is the parameter for the tail area of the intervals
(e.g. confidence level for confidence intervals).
Default value is \code{0.95}.
\item \code{std_error}: for \code{type} equal to \code{"conf_int"} or \code{"pred_int"}, add
the standard error of fit or prediction (on the scale of the
linear predictors). Default value is \code{FALSE}.
\item \code{quantile}: for \code{type} equal to \code{quantile}, the quantiles of the
distribution. Default is \code{(1:9)/10}.
\item \code{eval_time}: for \code{type} equal to \code{"survival"} or \code{"hazard"}, the
time points at which the survival probability or hazard is estimated.
}}
}
\value{
A data frame of model predictions, with as many rows as \code{new_data} has.
If \code{new_data} is an \code{epi_df()} or a data frame with \code{time_value} or
\code{geo_value} columns, then the result will have those as well.
}
\description{
This is the \code{predict()} method for a fit epi_workflow object. The 3 steps that this implements are:
\itemize{
\item Preprocessing \code{new_data} using the preprocessing method specified when the
epi_workflow was created and fit. This is accomplished using
\code{recipes::bake()} if a recipe was supplied. Note that this is a slightly
different \code{bake} operation than the one occuring during the fit. Any \code{step}
that has \code{skip = TRUE} isn't applied during prediction; for example in
\code{step_epi_naomit()}, \code{all_outcomes()} isn't \code{NA} omitted, since doing so
would drop the exact \code{time_values} we are trying to predict.
\item Calling \code{parsnip::predict.model_fit()} for you using the underlying fit
parsnip model.
\item \code{slather()} any frosting that has been included in the \code{epi_workflow}.
}
}
\examples{
jhu <- covid_case_death_rates

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_lag(case_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_naomit()

wf <- epi_workflow(r, parsnip::linear_reg()) \%>\% fit(jhu)
latest <- jhu \%>\% dplyr::filter(time_value >= max(time_value) - 14)

preds <- predict(wf, latest)
preds
}
