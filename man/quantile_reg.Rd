% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_quantile_reg.R
\name{quantile_reg}
\alias{quantile_reg}
\title{Quantile regression}
\usage{
quantile_reg(
  mode = "regression",
  engine = "rq",
  quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),
  method = "br"
)
}
\arguments{
\item{mode}{A single character string for the type of model.
The only possible value for this model is "regression".}

\item{engine}{Character string naming the fitting function. Currently, only
"rq" and "grf" are supported.}

\item{quantile_levels}{A scalar or vector of values in (0, 1) to determine which
quantiles to estimate (default is the set 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95).}

\item{method}{A fitting method used by \code{\link[quantreg:rq]{quantreg::rq()}}. See the
documentation for a list of options.}
}
\description{
\code{quantile_reg()} generates a quantile regression model \emph{specification} for
the \href{https://www.tidymodels.org/}{tidymodels} framework. Currently, the
only supported engines are "rq", which uses \code{\link[quantreg:rq]{quantreg::rq()}}.
Quantile regression is also possible by combining \code{\link[parsnip:rand_forest]{parsnip::rand_forest()}}
with the \code{grf} engine. See \link{grf_quantiles}.
}
\examples{
library(quantreg)
tib <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100))
rq_spec <- quantile_reg(quantile_levels = c(.2, .8)) \%>\% set_engine("rq")
ff <- rq_spec \%>\% fit(y ~ ., data = tib)
predict(ff, new_data = tib)
}
\seealso{
\code{\link[=fit.model_spec]{fit.model_spec()}}, \code{\link[=set_engine]{set_engine()}}
}
