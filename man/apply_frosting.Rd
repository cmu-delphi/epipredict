% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frosting.R
\name{apply_frosting}
\alias{apply_frosting}
\alias{apply_frosting.default}
\alias{apply_frosting.epi_recipe}
\alias{apply_frosting.epi_workflow}
\title{Apply post-processing to a fitted workflow}
\usage{
apply_frosting(workflow, ...)

\method{apply_frosting}{default}(workflow, components, ...)

\method{apply_frosting}{epi_workflow}(workflow, components, new_data, type = NULL, opts = list(), ...)
}
\arguments{
\item{workflow}{An object of class workflow}

\item{...}{additional arguments passed on to methods}

\item{components}{a list of components containing model information. These
will be updated and returned by the layer. These should be
\itemize{
\item \code{mold} - the output of calling \code{hardhat::mold()} on the workflow. This
contains information about the preprocessing, including the recipe.
\item \code{forged} - the output of calling \code{hardhat::forge()} on the workflow.
This should have predictors and outcomes for the \code{new_data}. It will
have three components \code{predictors}, \code{outcomes} (if these were in the
\code{new_data}), and \code{extras} (usually has the rest of the data, including
\code{keys}).
\item \code{keys} - we put the keys (\code{time_value}, \code{geo_value}, and any others)
here for ease.
}}

\item{new_data}{a data frame containing the new predictors to preprocess
and predict on}

\item{type, opts}{forwarded (along with \code{...}) to \code{\link[=predict.model_fit]{predict.model_fit()}} and
\code{\link[=slather]{slather()}} for supported layers}
}
\description{
This function is intended for internal use. It implements post-processing
inside of the \code{predict()} method for a fitted workflow.
}
