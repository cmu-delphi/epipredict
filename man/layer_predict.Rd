% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_predict.R
\name{layer_predict}
\alias{layer_predict}
\title{Prediction layer for post-processing}
\usage{
layer_predict(
  frosting,
  type = NULL,
  opts = list(),
  ...,
  id = rand_id("predict_default")
)
}
\arguments{
\item{frosting}{a frosting object}

\item{type}{A single character value or \code{NULL}. Possible values
are \code{"numeric"}, \code{"class"}, \code{"prob"}, \code{"conf_int"}, \code{"pred_int"},
\code{"quantile"}, \code{"time"}, \code{"hazard"}, \code{"survival"}, or \code{"raw"}. When \code{NULL},
\code{predict()} will choose an appropriate value based on the model's mode.}

\item{opts}{A list of optional arguments to the underlying
predict function that will be used when \code{type = "raw"}. The
list should not include options for the model object or the
new data being predicted.}

\item{...}{Additional \code{parsnip}-related options, depending on the
value of \code{type}. Arguments to the underlying model's prediction
function cannot be passed here (use the \code{opts} argument instead).
Possible arguments are:
\itemize{
\item \code{interval}: for \code{type} equal to \code{"survival"} or \code{"quantile"}, should
interval estimates be added, if available? Options are \code{"none"}
and \code{"confidence"}.
\item \code{level}: for \code{type} equal to \code{"conf_int"}, \code{"pred_int"}, or \code{"survival"},
this is the parameter for the tail area of the intervals
(e.g. confidence level for confidence intervals).
Default value is \code{0.95}.
\item \code{std_error}: for \code{type} equal to \code{"conf_int"} or \code{"pred_int"}, add
the standard error of fit or prediction (on the scale of the
linear predictors). Default value is \code{FALSE}.
\item \code{quantile}: for \code{type} equal to \code{quantile}, the quantiles of the
distribution. Default is \code{(1:9)/10}.
\item \code{eval_time}: for \code{type} equal to \code{"survival"} or \code{"hazard"}, the
time points at which the survival probability or hazard is estimated.
}}

\item{id}{a string identifying the layer}
}
\value{
An updated \code{frosting} object
}
\description{
Implements prediction on a fitted \code{epi_workflow}. One may want different
types of prediction, and to potentially apply this after some amount of
post-processing. This would typically be the first layer in a \code{frosting}
postprocessor.
}
\examples{
jhu <- covid_case_death_rates \%>\%
  filter(time_value > "2021-11-01", geo_value \%in\% c("ak", "ca", "ny"))

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_naomit()

wf <- epi_workflow(r, linear_reg()) \%>\% fit(jhu)
latest <- jhu \%>\% filter(time_value >= max(time_value) - 14)

# Predict layer alone
f <- frosting() \%>\% layer_predict()
wf1 <- wf \%>\% add_frosting(f)

p1 <- predict(wf1, latest)
p1

# Prediction with interval
f <- frosting() \%>\% layer_predict(type = "pred_int")
wf2 <- wf \%>\% add_frosting(f)

p2 <- predict(wf2, latest)
p2
}
\seealso{
\code{parsnip::predict.model_fit()}
}
