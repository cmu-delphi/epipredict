% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flatline_forecaster.R
\name{flatline_forecaster}
\alias{flatline_forecaster}
\title{Predict the future with today's value}
\usage{
flatline_forecaster(epi_data, outcome, args_list = flatline_args_list())
}
\arguments{
\item{epi_data}{An \link[epiprocess:epi_df]{epiprocess::epi_df}}

\item{outcome}{A scalar character for the column name we wish to predict.}

\item{args_list}{A list of additional arguments as created by the
\code{\link[=flatline_args_list]{flatline_args_list()}} constructor function.}
}
\value{
A data frame of point (and optionally interval) forecasts at a single
ahead (unique horizon) for each unique combination of \code{key_vars}.
}
\description{
This is a simple forecasting model for
\link[epiprocess:epi_df]{epiprocess::epi_df} data. It uses the most recent
observation as the forecast for any future date, and produces intervals
based on the quantiles of the residuals of such a "flatline" forecast over
all available training data.

By default, the predictive intervals are computed separately for each
combination of key values (\code{geo_value} + any additional keys) in the
\code{epi_data} argument.

This forecaster is very similar to that used by the
\href{https://covid19forecasthub.org}{COVID19ForecastHub}
}
\details{
Here is (roughly) the code for the \code{flatline_forecaster()} applied to the
\code{case_rate} for \code{epidatasets::covid_case_death_rates}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{jhu <- covid_case_death_rates \%>\%
  filter(time_value > "2021-11-01", geo_value \%in\% c("ak", "ca", "ny"))
r <- epi_recipe(covid_case_death_rates) \%>\%
  step_epi_ahead(case_rate, ahead = 7, skip = TRUE) \%>\%
  recipes::update_role(case_rate, new_role = "predictor") \%>\%
  recipes::add_role(all_of(key_colnames(jhu)), new_role = "predictor")

f <- frosting() \%>\%
  layer_predict() \%>\%
  layer_residual_quantiles() \%>\%
  layer_add_forecast_date() \%>\%
  layer_add_target_date() \%>\%
  layer_threshold(starts_with(".pred"))

eng <- linear_reg() \%>\% set_engine("flatline")
wf <- epi_workflow(r, eng, f) \%>\% fit(jhu)
preds <- forecast(wf)
}\if{html}{\out{</div>}}
}
\examples{
jhu <- covid_case_death_rates \%>\%
  dplyr::filter(time_value >= as.Date("2021-12-01"))

out <- flatline_forecaster(jhu, "death_rate")
}
