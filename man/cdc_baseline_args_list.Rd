% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cdc_baseline_forecaster.R
\name{cdc_baseline_args_list}
\alias{cdc_baseline_args_list}
\title{CDC baseline forecaster argument constructor}
\usage{
cdc_baseline_args_list(
  data_frequency = "1 week",
  aheads = 1:5,
  n_training = Inf,
  forecast_date = NULL,
  quantile_levels = c(0.01, 0.025, 1:19/20, 0.975, 0.99),
  nsims = 100000L,
  symmetrize = TRUE,
  nonneg = TRUE,
  quantile_by_key = "geo_value",
  ...
)
}
\arguments{
\item{data_frequency}{Integer or string. This describes the frequency of the
input \code{epi_df}. For typical FluSight forecasts, this would be \code{"1 week"}.
Allowable arguments are integers (taken to mean numbers of days) or a
string like \code{"7 days"} or \code{"2 weeks"}. Currently, all other periods
(other than days or weeks) result in an error.}

\item{aheads}{Integer vector. Unlike \code{\link[=arx_forecaster]{arx_forecaster()}}, this doesn't have
any effect on the predicted values.
Predictions are always the most recent observation. This determines the
set of prediction horizons for \code{\link[=layer_cdc_flatline_quantiles]{layer_cdc_flatline_quantiles()}}\verb{. It interacts with the }data_frequency\verb{argument. So, for example, if the data is daily and you want forecasts for 1:4 days ahead, then you would use}1:4\verb{. However, if you want one-week predictions, you would set this as }c(7, 14, 21, 28)\verb{. But if }data_frequency\code{is}"1 week"\verb{, then you would set it as }1:4`.}

\item{n_training}{Integer. An upper limit for the number of rows per
key that are used for training
(in the time unit of the \code{epi_df}).}

\item{quantile_levels}{Vector or \code{NULL}. A vector of probabilities to produce
prediction intervals. These are created by computing the quantiles of
training residuals. A \code{NULL} value will result in point forecasts only.}

\item{nsims}{Positive integer. The number of draws from the empirical CDF.
These samples are spaced evenly on the (0, 1) scale, F_X(x) resulting
in linear interpolation on the X scale. This is achieved with
\code{\link[stats:quantile]{stats::quantile()}} Type 7 (the default for that function).}

\item{symmetrize}{Logical. The default \code{TRUE} calculates
symmetric prediction intervals. This argument only applies when
residual quantiles are used. It is not applicable with
\code{trainer = quantile_reg()}, for example.}

\item{nonneg}{Logical. Force all predictive intervals be non-negative.
Because non-negativity is forced \emph{before} propagating forward, this
has slightly different behaviour than would occur if using
\code{\link[=layer_threshold]{layer_threshold()}}.}

\item{quantile_by_key}{Character vector. Groups residuals by listed keys
before calculating residual quantiles. See the \code{by_key} argument to
\code{\link[=layer_residual_quantiles]{layer_residual_quantiles()}} for more information. The default,
\code{character(0)} performs no grouping. This argument only applies when
residual quantiles are used. It is not applicable with
\code{trainer = quantile_reg()}, for example.}

\item{...}{Space to handle future expansions (unused).}
}
\value{
A list containing updated parameter choices with class \code{cdc_flat_fcast}.
}
\description{
Constructs a list of arguments for \code{\link[=cdc_baseline_forecaster]{cdc_baseline_forecaster()}}.
}
\examples{
cdc_baseline_args_list()
cdc_baseline_args_list(symmetrize = FALSE)
cdc_baseline_args_list(quantile_levels = c(.1, .3, .7, .9), n_training = 120)
}
