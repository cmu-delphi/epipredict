% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer_yeo_johnson.R
\name{layer_epi_YeoJohnson}
\alias{layer_epi_YeoJohnson}
\title{Unormalizing transformation}
\usage{
layer_epi_YeoJohnson(
  frosting,
  ...,
  yj_params = NULL,
  by = NULL,
  id = rand_id("epi_YeoJohnson")
)
}
\arguments{
\item{frosting}{a \code{frosting} postprocessor. The layer will be added to the
sequence of operations for this frosting.}

\item{...}{One or more selector functions to scale variables
for this step. See \code{\link[recipes:selections]{recipes::selections()}} for more details.}

\item{yj_params}{A data frame of parameters to be used for inverting the
transformation. Typically set automatically. If you have done multiple
transformations such that the outcome variable name no longer contains the
column that this step transforms, then you should manually specify this to
be the parameters fit in the corresponding \code{step_epi_YeoJohnson}. For an
example where you wouldn't need to set this, if your output is
\code{ahead_7_cases} and \code{step_epi_YeoJohnson} transformed cases (possibly with
other columns), then you wouldn't need to set this. However if you have
renamed your output column to \code{diff_7}, then you will need to extract the \code{yj_params} from the step.}

\item{by}{A (possibly named) character vector of variables to join by.}

\item{id}{a random id string}
}
\value{
an updated \code{frosting} postprocessor
}
\description{
Will undo a step_epi_YeoJohnson transformation. For practical reasons, if you
are using this step on a column that will eventually become the outcome
variable, you should make sure that the original name of that column is a
subset of the outcome variable name. \code{ahead_7_cases} when \code{cases} is
transformed will work well, while \code{ahead_7} will not.
}
\examples{
library(dplyr)
jhu <- epidatasets::cases_deaths_subset \%>\%
  filter(time_value > "2021-11-01", geo_value \%in\% c("ca", "ny")) \%>\%
  select(geo_value, time_value, cases)

# Create a recipe with a Yeo-Johnson transformation.
r <- epi_recipe(jhu) \%>\%
  step_epi_YeoJohnson(cases) \%>\%
  step_epi_lag(cases, lag = 0) \%>\%
  step_epi_ahead(cases, ahead = 0, role = "outcome") \%>\%
  step_epi_naomit()

# Create a frosting layer that will undo the Yeo-Johnson transformation.
f <- frosting() \%>\%
  layer_predict() \%>\%
  layer_epi_YeoJohnson(.pred)

# Create a workflow and fit it.
wf <- epi_workflow(r, linear_reg()) \%>\%
  fit(jhu) \%>\%
  add_frosting(f)

# Forecast the workflow, which should reverse the Yeo-Johnson transformation.
forecast(wf)
# Compare to the original data.
jhu \%>\% filter(time_value == "2021-12-31")
forecast(wf)
}
