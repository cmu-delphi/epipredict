[{"path":"https://cmu-delphi.github.io/epipredict/dev/DEVELOPMENT.html","id":"setting-up-the-development-environment","dir":"","previous_headings":"","what":"Setting up the development environment","title":"NA","text":"","code":"install.packages(c('devtools', 'pkgdown', 'styler', 'lintr', 'pak')) # install dev dependencies pak::pkg_install(\".\") # install package and dependencies"},{"path":"https://cmu-delphi.github.io/epipredict/dev/DEVELOPMENT.html","id":"validating-the-package","dir":"","previous_headings":"","what":"Validating the package","title":"NA","text":"","code":"styler::style_pkg() # format code lintr::lint_package() # lint code  devtools::check() # run R CMD check, which runs everything below devtools::document() # generate package meta data and man files devtools::test() # test package devtools::build_vignettes() # build vignettes only devtools::run_examples() # run doc examples devtools::check(vignettes = FALSE) # check package without vignettes"},{"path":"https://cmu-delphi.github.io/epipredict/dev/DEVELOPMENT.html","id":"developing-the-documentation-site","dir":"","previous_headings":"","what":"Developing the documentation site","title":"NA","text":"CI builds two versions documentation: https://cmu-delphi.github.io/epipredict/ main branch https://cmu-delphi.github.io/epipredict/dev dev branch. Commands developing documentation site: work without R Studio want iterate documentation, might find script helpful.","code":"# Basic build and preview R -e 'pkgdown::clean_site()' R -e 'devtools::document()' R -e 'pkgdown::build_site()'"},{"path":"https://cmu-delphi.github.io/epipredict/dev/DEVELOPMENT.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"NA","text":"Please follow guidelines PR template document.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/DEVELOPMENT.html","id":"planned-cran-release-process","dir":"","previous_headings":"","what":"Planned CRAN release process","title":"NA","text":"Open release issue copy follow checklist issue (modified checklist generated usethis::use_release_issue(version = \"1.0.2\")): git pull dev branch. Make sure changes committed pushed. Check current CRAN check results. Aim 10/10, notes. check works well enough, merge main. Otherwise open PR fix . guidelines. git checkout main git pull may choke MIT license url, ‚Äôs ok. devtools::build_readme() devtools::check_win_devel() maintainer (‚Äúcre‚Äù description) check email problems. may choke, sensitive binary versions packages given system. Either bypass ask someone else run ‚Äôre concerned. Update cran-comments.md PR changes (go list ) dev run list . Submit CRAN: devtools::submit_cran(). Maintainer approves email. Wait CRAN‚Ä¶ accepted üéâ, move next steps. rejected, fix resubmit. Open merge PR containing updates made main back dev. usethis::use_github_release(publish = FALSE) (publish , otherwise won‚Äôt push) create draft release based commit hash CRAN-SUBMISSION push tag GitHub repo. Go repo, verify release notes, publish ready.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 epipredict authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/arx-classifier.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Auto-regressive classifier","text":"","code":"library(dplyr) library(purrr) library(ggplot2) library(epipredict)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/arx-classifier.html","id":"introducing-the-arx-classifier","dir":"Articles","previous_headings":"","what":"Introducing the ARX classifier","title":"Auto-regressive classifier","text":"arx_classifier() autoregressive classification model epi_df data used predict discrete class case consideration. direct forecaster estimates classes specific horizon ahead value. get sense arx_classifier() works, let‚Äôs consider simple example minimal inputs. , use built-covid_case_death_rates contains confirmed COVID-19 cases deaths JHU CSSE states Dec 31, 2020 Dec 31, 2021. , ‚Äôll take subset data five states June 4, 2021 December 31, 2021. objective predict whether case rates increasing considering 0, 7 14 day case rates: key takeaway predictions two prediction classes: (-Inf, 0.25] (0.25, Inf). goal classification classes must discrete. discretization real-valued outcome controlled breaks argument, defaults 0.25. breaks automatically extended cover entire real line. example, default break 0.25 silently extended breaks = c(-Inf, .25, Inf) , therefore, results two classes: [-Inf, 0.25] (0.25, Inf). two classes used discretize outcome. conversion outcome classes handled internally. discrete classes already exist outcome epi_df, recommend code classifier scratch using epi_workflow framework control. trainer parsnip model describing type estimation mode = \"classification\" enforced. two typical trainers used parsnip::logistic_reg() two classes parsnip::multinom_reg() two classes. parsnip model specification, can see trainer used logistic regression, expected binary outcome. complicated trainers like parsnip::naive_Bayes() parsnip::rand_forest() may also used (however, stick basics gentle introduction classifier). use default trainer logistic regression binary classification decide using default break 0.25, input one break two classification bins properly dichotomize outcome. example, let‚Äôs set break 0.5 instead relying default 0.25. can passing 0.5 breaks argument arx_class_args_list() follows: Indeed, can observe two .pred_class now (-Inf, 0.5] (0.5, Inf). See help(arx_class_args_list) available modifications. Additional arguments may supplied arx_class_args_list() include expected lags ahead arguments autoregressive-type model. default values 0, 7, 14 days lags predictors 7 days ahead forecast date predicting outcome. also n_training indicate upper bound number training rows per key. like practice using , remove filtering command obtain data within ‚Äú2021-06-04‚Äù ‚Äú2021-12-31‚Äù instead set n_training number days two dates, inclusive end points. end results . addition n_training, forecast_date target_date specify date forecast created intended, respectively. dwell arguments unique classifier absolutely essential understanding operates. remaining arguments discussed organically, needed serve purposes. information remaining arguments discussed , please see function documentation complete list definitions.","code":"jhu <- covid_case_death_rates %>%   filter(     time_value >= \"2021-06-04\",     time_value <= \"2021-12-31\",     geo_value %in% c(\"ca\", \"fl\", \"tx\", \"ny\", \"nj\")   )  out <- arx_classifier(jhu, outcome = \"case_rate\", predictors = \"case_rate\")  out$predictions #> # A tibble: 5 √ó 4 #>   geo_value .pred_class forecast_date target_date #>   <chr>     <fct>       <date>        <date>      #> 1 ca        (-Inf,0.25] 2021-12-31    2022-01-07  #> 2 fl        (-Inf,0.25] 2021-12-31    2022-01-07  #> 3 nj        (-Inf,0.25] 2021-12-31    2022-01-07  #> 4 ny        (-Inf,0.25] 2021-12-31    2022-01-07  #> 5 tx        (-Inf,0.25] 2021-12-31    2022-01-07 workflows::extract_spec_parsnip(out$epi_workflow) #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm out_break_0.5 <- arx_classifier(   jhu,   outcome = \"case_rate\",   predictors = \"case_rate\",   args_list = arx_class_args_list(     breaks = 0.5   ) ) #> Warning: glm.fit: algorithm did not converge #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  out_break_0.5$predictions #> # A tibble: 5 √ó 4 #>   geo_value .pred_class forecast_date target_date #>   <chr>     <fct>       <date>        <date>      #> 1 ca        (-Inf,0.5]  2021-12-31    2022-01-07  #> 2 fl        (-Inf,0.5]  2021-12-31    2022-01-07  #> 3 nj        (-Inf,0.5]  2021-12-31    2022-01-07  #> 4 ny        (-Inf,0.5]  2021-12-31    2022-01-07  #> 5 tx        (-Inf,0.5]  2021-12-31    2022-01-07"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/arx-classifier.html","id":"example-of-using-the-arx-classifier","dir":"Articles","previous_headings":"","what":"Example of using the ARX classifier","title":"Auto-regressive classifier","text":"Now, demonstrate power utility built-arx classifier, loosely adapt classification example written scratch vignette(\"preprocessing--models\"). However, keep things simple merely direct translation, consider two prediction categories leave extension three exercise reader. motivate example, major use autoregressive classification models predict upswings downswings like hotspot prediction models anticipate direction outcome (see McDonald, Bien, Green, Hu, et al. (2021) ). case, one simple question models can help answer ‚Ä¶ expect future increased case rates relative present? answer question, can create predictive model upswings downswings case rates rather raw case rates . situation, target predict whether increase case rates . Following McDonald, Bien, Green, Hu, et al.(2021), look relative change Yl,tY_{l,t} Yl,t+aY_{l, t+}, former case rate location ll time tt latter rate location time t++. Using variables, define categorical response variable two classes Zl,t={,Yl,tŒî>0.25not ,otherwise\\begin{align} Z_{l,t} = \\left\\{\\begin{matrix} \\text{,} & \\text{} Y_{l,t}^\\Delta > 0.25\\\\ \\text{,} & \\text{otherwise} \\end{matrix}\\right. \\end{align} Yl,tŒî=(Yl,t‚àíYl,t‚àí7/Yl,t‚àí7Y_{l,t}^\\Delta = (Y_{l, t} - Y_{l, t-7} / Y_{l, t-7}. Yl,tŒîY_{l,t}^\\Delta > 0.25, meaning number new cases week increased 25%, Zl,tZ_{l,t} . criteria location ll hotspot time tt. hand, Yl,tŒîY_{l,t}^\\Delta $, Zl,tZ_{l,t} categorized , meaning >25% increase new cases past week. logistic regression model use predict binary response can considered simplification multinomial regression model presented vignette(\"preprocessing--models\"): œÄup(x)=Pr(Zl,t=|x)=egup(x)1+egup(x),œÄnot (x)=Pr(Zl,t=|x)=1‚àíPr(Zl,t=|x)=11+egup(x)\\begin{align} \\pi_{\\text{}}(x) &= Pr(Z_{l, t} = \\text{}|x) = \\frac{e^{g_{\\text{}}(x)}}{1 + e^{g_{\\text{}}(x)}}, \\\\ \\pi_{\\text{}}(x)&= Pr(Z_{l, t} = \\text{}|x) = 1 - Pr(Z_{l, t} = \\text{}|x)  = \\frac{1}{1 + e^{g_{\\text{}}(x)}} \\end{align} gup(x)=log(Pr(Zl,t=|x)Pr(Zl,t=|x))=Œ≤10+Œ≤11Yl,tŒî+Œ≤12Yl,t‚àí7Œî+Œ≤13Yl,t‚àí14Œî. g_{\\text{}}(x) = \\log\\left ( \\frac{\\Pr(Z_{l, t} = \\text{} \\vert x)}{\\Pr(Z_{l, t} = \\text{} \\vert x)} \\right ) = \\beta_{10} + \\beta_{11}Y_{l,t}^\\Delta + \\beta_{12}Y_{l,t-7}^\\Delta + \\beta_{13}Y_{l,t-14}^\\Delta. Now , operate subset covid_case_death_rates used example. time, use investigate whether number newly reported cases past 7 days increased least 25% compared preceding week sample states. Notice using arx_classifier() function ‚Äôve completely eliminated need manually categorize response variable implement pre-processing steps, necessary vignette(\"preprocessing--models\"). Comparing pre-processing steps vignette, can see precisely , cover essentials transforming case_rate growth rate scale (step_growth_rate()), lagging predictors (step_epi_lag()), leading response (step_epi_ahead()), constructed growth rates, constructing binary classification response variable (step_mutate()). topic, important understand actually concerned case values . Rather concerned whether quantity cases future lot larger present. reason, outcome remain cases, rather transformed using either growth rates (predictors outcome example ) lagged differences. latter closer requirements 2022-23 CDC Flusight Hospitalization Experimental Target, conceptually easy understand simply change value horizon, default. default growth_rate. One reason choice growth rate rate scale, absolute scale, fosters comparability across locations without conscious effort (hand, using lag_difference one need take care operate rates per 100k raw counts). utilize epiprocess::growth_rate() create outcome using additional arguments. One important argument growth rate calculation method. rel_change relative change used method test data data accessible methods require access training data. optional arguments controlling growth rate calculation (can inputted additional_gr_args) can found documentation epiprocess::growth_rate() related vignette(\"growth_rate\", package = \"epiprocess\").","code":"log_res <- arx_classifier(   jhu,   outcome = \"case_rate\",   predictors = \"case_rate\",   args_list = arx_class_args_list(     breaks = 0.25 / 7 # division by 7 gives weekly not daily   ) )  log_res$epi_workflow #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: logistic_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 7 Recipe steps. #> 1. step_growth_rate() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_mutate() #> 5. step_naomit() #> 6. step_naomit() #> 7. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data) #>  #> Coefficients: #>                      (Intercept)   lag_0_gr_7_rel_change_case_rate   #>                           -1.603                            16.134   #>  lag_7_gr_7_rel_change_case_rate  lag_14_gr_7_rel_change_case_rate   #>                           25.265                            -1.893   #>  #> Degrees of Freedom: 914 Total (i.e. Null);  911 Residual #> Null Deviance:       1156  #> Residual Deviance: 813.7     AIC: 821.7 #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 3 Frosting layers. #> 1. layer_predict() #> 2. layer_add_forecast_date() #> 3. layer_add_target_date() #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/arx-classifier.html","id":"visualizing-the-results","dir":"Articles","previous_headings":"Example of using the ARX classifier","what":"Visualizing the results","title":"Auto-regressive classifier","text":"visualize prediction classes across states target date, can plot results heatmap. However, plot results one target date, like 7-day ahead predictions, pretty sad heatmap (look like bar chart heatmap)‚Ä¶ instead , let‚Äôs get predictions several aheads plot heatmap across target dates. get predictions across several ahead values, use map function way vignettes: can plot heatmap results aheads see ‚Äôs anything novel interesting take away:  bit variability near end, can clearly see upswings states starting beginning January 2022, can recall massive spike cases many states. results seem align well actually happened beginning January 2022.","code":"multi_log_res <- map(1:40, ~ arx_classifier(   jhu,   outcome = \"case_rate\",   predictors = \"case_rate\",   args_list = arx_class_args_list(     breaks = 0.25 / 7, # division by 7 gives weekly not daily     ahead = .x   ) )$predictions) %>% list_rbind() #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred ggplot(multi_log_res, aes(target_date, geo_value, fill = .pred_class)) +   geom_tile() +   ylab(\"State\") +   xlab(\"Target date\") +   scale_fill_brewer(palette = \"Set1\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/arx-classifier.html","id":"a-brief-reflection","dir":"Articles","previous_headings":"","what":"A brief reflection","title":"Auto-regressive classifier","text":"noticeable benefit using arx_classifier() function simplification reduction manual implementation classifier 30 3 lines. However, noted , trade-simplicity control precise pre-processing, post-processing, additional features embedded coding classifier. good thing epipredict provides - built-arx_classifer() means implement classifier scratch using epi_workflow framework. choose depend circumstances. advice start using built-classifier ostensibly simple projects begin implement modelling project takes complicated turn. get practice coding classifier hand, consider translating binary classification model example epi_workflow, akin vignette(\"preprocessing--models\").","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/backtesting.html","id":"accurately-backtesting-forecasters","dir":"Articles","previous_headings":"","what":"Accurately backtesting forecasters","title":"Accurately backtesting forecasters","text":"Backtesting crucial step development forecasting models. involves testing model historical data see well performs. important allows us see well model generalizes new data identify potential issues model. context epidemiological forecasting, backtesting accurately, need account fact data available time forecast different data available time backtest. new data constantly collected added dataset, can affect accuracy forecast. reason, important use version-aware forecasting, model trained data available time forecast. ensures model tested data close possible available real-time; training making predictions finalized data can lead overly optimistic sense accuracy (see, example, McDonald et al. (2021) references therein). epiprocess package, provide epix_slide(), function allows convenient way perform version-aware forecasting using data available forecast reference time. vignette(\"epi_archive\", package = \"epiprocess\"), introduced concept epi_archive demonstrated use epix_slide() forecast future using simple quantile regression model. vignette, demonstrate use epix_slide() backtest auto-regressive forecaster historical COVID-19 case data US Canada. Instead building forecaster scratch previous vignette, use arx_forecaster() function epipredict package.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/backtesting.html","id":"getting-case-data-from-us-states-into-an-epi_archive","dir":"Articles","previous_headings":"Accurately backtesting forecasters","what":"Getting case data from US states into an epi_archive","title":"Accurately backtesting forecasters","text":"First, download version history (ie. archive) percentage doctor‚Äôs visits CLI (COVID-like illness) computed medical insurance claims number new confirmed COVID-19 cases per 100,000 population (daily) 6 states COVIDcast API (used epiprocess vignette mentioned ). data can also fetched Delphi Epidata API following query:","code":"# Select the `percent_cli` column from the data archive doctor_visits <- archive_cases_dv_subset$DT %>%   select(geo_value, time_value, version, percent_cli) %>%   drop_na(percent_cli) %>%   as_epi_archive(compactify = TRUE) library(epidatr) doctor_visits <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"ca,fl,ny,tx\",   time_values = epirange(20200601, 20211201),   issues = epirange(20200601, 20211201) ) %>%   rename(version = issue, percent_cli = value) %>%   as_epi_archive(compactify = TRUE)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/backtesting.html","id":"backtesting-a-simple-autoregressive-forecaster","dir":"Articles","previous_headings":"Accurately backtesting forecasters","what":"Backtesting a simple autoregressive forecaster","title":"Accurately backtesting forecasters","text":"One common use cases epiprocess::epi_archive() object accurate model backtesting. section : develop simple autoregressive forecaster predicts next value signal based current past values signal , demonstrate slide forecaster epi_archive object produce forecasts dates date, using version-unaware -aware computations, compare two approaches. start, let‚Äôs use simple autoregressive forecaster predict percentage doctor‚Äôs hospital visits CLI (COVID-like illness) (percent_cli) future (choose target dataset‚Äôs pattern substantial revisions; forecasting doctor‚Äôs visits unusual forecasting target otherwise). AR models output single point forecasts, use quantile regression produce point prediction along 90% uncertainty band, represented predictive quantiles 5% 95% levels (lower upper endpoints uncertainty band). arx_forecaster() function wraps autoregressive forecaster need comes sensible defaults: specify predicted outcome percentage doctor‚Äôs visits CLI (percent_cli), use linear regression model engine, autoregressive features assume lags 0, 7, 14 days, forecast 7 days ahead. default settings can seen calling arx_args_list(): can modified needed, sending desired arguments arx_forecaster(args_list = arx_args_list()). now use defaults. Note: use geo-pooled approach, train model data states territories combined. data quite similar across states, pooling data can help improve accuracy forecasts, also reducing susceptibility model noise. interest computational speed, use 6 state dataset , full archive can used way performed well past. Implementation-wise, geo-pooling achieved using group_by(geo_value) prior epix_slide(). cases, grouping may preferrable, leave user decide, flag modeling decision . Let‚Äôs use epix_as_of() method generate snapshot archive last date, run forecaster. resulting epi_df now contains two new columns: .pred .pred_distn, corresponding point forecast (median) quantile distribution containing requested quantile forecasts (case, 0.05 0.95) respectively. forecasts fall within prediction interval, implementation passes simple validation. Now let‚Äôs go ahead slide forecaster version unaware way version aware way. version unaware way, need snapshot latest version data, make faux archive setting version = time_value. effect simulating data set receives final version updates every day. version aware way, simply use true epi_archive object. reduce typing, create wrapper function forecast_k_week_ahead(). , arx_forecaster() heavy lifting. creates leads target (respecting time stamps locations) along lags features (, response doctors visits), estimates forecasting model using specified engine, creates predictions, non-parametric confidence bands. see predictions compare, plot top latest case rates. Note even though ‚Äôve fitted model states, ‚Äôll just display results two states, California (CA) Florida (FL), get sense model performance keeping graphic simple.   two states interest, neither approach produces amazingly accurate forecasts. However, extent using versioned data can affect backtesting, scoring, therefore model choice production can inferred plots.","code":"arx_args_list() #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ warn_latency : TRUE #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ quantile_by_key : \"_empty_\" #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\" # Let's forecast 14 days prior to the last date in the archive, to compare. forecast_date <- doctor_visits$versions_end - 14 # The .versions argument selects only the last version in the archive and # produces a forecast only on that date. forecasts <- doctor_visits %>%   epix_slide(     ~ arx_forecaster(       .x,       outcome = \"percent_cli\",       predictors = \"percent_cli\",       args_list = arx_args_list()     )$predictions %>%       pivot_quantiles_wider(.pred_distn),     .versions = forecast_date   ) # Join the forecasts with with the latest data at the time of the forecast to # compare. Since `percent_cli` data has a few days of lag, we use `tidyr::fill` to # fill the missing values with the last observed value. forecasts %>%   inner_join(     doctor_visits %>%       epix_as_of(doctor_visits$versions_end) %>%       group_by(geo_value) %>%       fill(percent_cli),     by = c(\"geo_value\", \"target_date\" = \"time_value\")   ) %>%   select(geo_value, forecast_date, .pred, `0.05`, `0.95`, percent_cli) #> # A tibble: 4 √ó 6 #>   geo_value forecast_date .pred `0.05` `0.95` percent_cli #>   <chr>     <date>        <dbl>  <dbl>  <dbl>       <dbl> #> 1 ca        2021-11-12     7.23  4.22   10.2         4.75 #> 2 fl        2021-11-12     1.40  0       4.41        1.57 #> 3 ny        2021-11-12     3.98  0.968   6.99        3.52 #> 4 tx        2021-11-12     2.23  0       5.24        2.01 archive_cases_dv_subset_faux <- doctor_visits %>%   epix_as_of(doctor_visits$versions_end) %>%   mutate(version = time_value) %>%   as_epi_archive() # Latest snapshot of data, and forecast dates forecast_dates <- seq(from = as.Date(\"2020-08-01\"), to = as.Date(\"2021-11-01\"), by = \"1 month\") aheads <- c(7, 14, 21, 28)  # @param epi_archive The epi_archive object to forecast from # @param ahead The number of days ahead to forecast # @param outcome The outcome variable to forecast # @param predictors The predictors to use in the model # @param forecast_dates The dates to forecast on # @param process_data A function to process the data before forecasting forecast_k_week_ahead <- function(     epi_archive,     ahead = 7,     outcome = NULL, predictors = NULL, forecast_dates = NULL, process_data = identity) {   if (is.null(forecast_dates)) {     forecast_dates <- epi_archive$versions_end   }   if (is.null(outcome) || is.null(predictors)) {     stop(\"Please specify the outcome and predictors.\")   }   epi_archive %>%     epix_slide(       ~ arx_forecaster(         process_data(.x), outcome, predictors,         args_list = arx_args_list(ahead = ahead)       )$predictions %>%         pivot_quantiles_wider(.pred_distn),       .before = 120,       .versions = forecast_dates     ) } # Generate the forecasts and bind them together forecasts <- bind_rows(   map(aheads, ~ forecast_k_week_ahead(     archive_cases_dv_subset_faux,     ahead = .x,     outcome = \"percent_cli\",     predictors = \"percent_cli\",     forecast_dates = forecast_dates   ) %>% mutate(version_aware = FALSE)),   map(aheads, ~ forecast_k_week_ahead(     doctor_visits,     ahead = .x,     outcome = \"percent_cli\",     predictors = \"percent_cli\",     forecast_dates = forecast_dates   ) %>% mutate(version_aware = TRUE)) ) geo_choose <- \"ca\" forecasts_filtered <- forecasts %>%   filter(geo_value == geo_choose) %>%   mutate(time_value = version) percent_cli_data <- bind_rows(   # Snapshotted data for the version-aware forecasts   map(     forecast_dates,     ~ doctor_visits %>%       epix_as_of(.x) %>%       mutate(version = .x)   ) %>%     bind_rows() %>%     mutate(version_aware = TRUE),   # Latest data for the version-unaware forecasts   doctor_visits %>%     epix_as_of(doctor_visits$versions_end) %>%     mutate(version_aware = FALSE) ) %>%   filter(geo_value == geo_choose)  p1 <- ggplot(data = forecasts_filtered, aes(x = target_date, group = time_value)) +   geom_ribbon(aes(ymin = `0.05`, ymax = `0.95`, fill = factor(time_value)), alpha = 0.4) +   geom_line(aes(y = .pred, color = factor(time_value)), linetype = 2L) +   geom_point(aes(y = .pred, color = factor(time_value)), size = 0.75) +   geom_vline(data = percent_cli_data, aes(color = factor(version), xintercept = version), lty = 2) +   geom_line(     data = percent_cli_data,     aes(x = time_value, y = percent_cli, color = factor(version)),     inherit.aes = FALSE, na.rm = TRUE   ) +   facet_grid(version_aware ~ geo_value, scales = \"free\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   scale_y_continuous(expand = expansion(c(0, 0.05))) +   labs(x = \"Date\", y = \"smoothed, day of week adjusted covid-like doctors visits\") +   theme(legend.position = \"none\") geo_choose <- \"fl\" forecasts_filtered <- forecasts %>%   filter(geo_value == geo_choose) %>%   mutate(time_value = version) percent_cli_data <- bind_rows(   # Snapshotted data for the version-aware forecasts   map(     forecast_dates,     ~ doctor_visits %>%       epix_as_of(.x) %>%       mutate(version = .x)   ) %>%     bind_rows() %>%     mutate(version_aware = TRUE),   # Latest data for the version-unaware forecasts   doctor_visits %>%     epix_as_of(doctor_visits$versions_end) %>%     mutate(version_aware = FALSE) ) %>%   filter(geo_value == geo_choose)  p2 <- ggplot(data = forecasts_filtered, aes(x = target_date, group = time_value)) +   geom_ribbon(aes(ymin = `0.05`, ymax = `0.95`, fill = factor(time_value)), alpha = 0.4) +   geom_line(aes(y = .pred, color = factor(time_value)), linetype = 2L) +   geom_point(aes(y = .pred, color = factor(time_value)), size = 0.75) +   geom_vline(data = percent_cli_data, aes(color = factor(version), xintercept = version), lty = 2) +   geom_line(     data = percent_cli_data,     aes(x = time_value, y = percent_cli, color = factor(version)),     inherit.aes = FALSE, na.rm = TRUE   ) +   facet_grid(version_aware ~ geo_value, scales = \"free\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   scale_y_continuous(expand = expansion(c(0, 0.05))) +   labs(x = \"Date\", y = \"smoothed, day of week adjusted covid-like doctors visits\") +   theme(legend.position = \"none\") #> Warning: Removed 544 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Warning: Removed 544 rows containing missing values or values outside the scale range #> (`geom_vline()`)."},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/backtesting.html","id":"example-using-case-data-from-canada","dir":"Articles","previous_headings":"Accurately backtesting forecasters > Backtesting a simple autoregressive forecaster","what":"Example using case data from Canada","title":"Accurately backtesting forecasters","text":"leveraging flexibility epiprocess, can apply techniques data sources. Since collaborators British Columbia, Canada, ‚Äôll essentially thing Canada . COVID-19 Canada Open Data Working Group collects daily time series data COVID-19 cases, deaths, recoveries, testing vaccinations health region province levels. Data collected publicly available sources government datasets news releases. Unfortunately, simple versioned source, created Github commit history. First, load versioned case rates provincial level. converting 7-day averages (due highly variable provincial reporting mismatches), convert data epi_archive object, extract latest version . Finally, run forcasting exercise American data, compare forecasts produced using simple linear regression using boosted regression trees. figures shows results single province.","code":"aheads <- c(7, 14, 21, 28) canada_archive <- can_prov_cases canada_archive_faux <- epix_as_of(canada_archive, canada_archive$versions_end) %>%   mutate(version = time_value) %>%   as_epi_archive() # This function will add the 7-day average of the case rate to the data # before forecasting. smooth_cases <- function(epi_df) {   epi_df %>%     group_by(geo_value) %>%     epi_slide_mean(\"case_rate\", .window_size = 7, na.rm = TRUE, .suffix = \"_{.n}dav\") } forecast_dates <- seq.Date(   from = min(canada_archive$DT$version),   to = max(canada_archive$DT$version),   by = \"1 month\" )  # Generate the forecasts, and bind them together canada_forecasts <- bind_rows(   map(     aheads,     ~ forecast_k_week_ahead(       canada_archive_faux,       ahead = .x,       outcome = \"case_rate_7dav\",       predictors = \"case_rate_7dav\",       forecast_dates = forecast_dates,       process_data = smooth_cases     ) %>% mutate(version_aware = FALSE)   ),   map(     aheads,     ~ forecast_k_week_ahead(       canada_archive,       ahead = .x,       outcome = \"case_rate_7dav\",       predictors = \"case_rate_7dav\",       forecast_dates = forecast_dates,       process_data = smooth_cases     ) %>% mutate(version_aware = TRUE)   ) ) geo_choose <- \"Alberta\" forecasts_filtered <- canada_forecasts %>%   filter(geo_value == geo_choose) %>%   mutate(time_value = version) case_rate_data <- bind_rows(   # Snapshotted data for the version-aware forecasts   map(     forecast_dates,     ~ canada_archive %>%       epix_as_of(.x) %>%       smooth_cases() %>%       mutate(case_rate = case_rate_7dav, version = .x)   ) %>%     bind_rows() %>%     mutate(version_aware = TRUE),   # Latest data for the version-unaware forecasts   canada_archive %>%     epix_as_of(doctor_visits$versions_end) %>%     smooth_cases() %>%     mutate(case_rate = case_rate_7dav, version_aware = FALSE) ) %>%   filter(geo_value == geo_choose)  ggplot(data = forecasts_filtered, aes(x = target_date, group = time_value)) +   geom_ribbon(aes(ymin = `0.05`, ymax = `0.95`, fill = factor(time_value)), alpha = 0.4) +   geom_line(aes(y = .pred, color = factor(time_value)), linetype = 2L) +   geom_point(aes(y = .pred, color = factor(time_value)), size = 0.75) +   geom_vline(data = case_rate_data, aes(color = factor(version), xintercept = version), lty = 2) +   geom_line(     data = case_rate_data,     aes(x = time_value, y = case_rate, color = factor(version)),     inherit.aes = FALSE, na.rm = TRUE   ) +   facet_grid(version_aware ~ geo_value, scales = \"free\") +   scale_x_date(minor_breaks = \"month\", date_labels = \"%b %y\") +   scale_y_continuous(expand = expansion(c(0, 0.05))) +   labs(x = \"Date\", y = \"smoothed, day of week adjusted covid-like doctors visits\") +   theme(legend.position = \"none\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"goals-for-the-package","dir":"Articles","previous_headings":"","what":"Goals for the package","title":"Get started with epipredict","text":"high level, goal epipredict make running simple Machine Learning / Statistical forecasters epidemiology easy. However, package extremely extensible, part utility. hope easy users epi training statistics fit baseline models still allowing nuanced statistical understanding create complicated specializations using framework. Serving populations main motivation efforts, time, tried hard make useful.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"baseline-models","dir":"Articles","previous_headings":"Goals for the package","what":"Baseline models","title":"Get started with epipredict","text":"provide set basic, easy--use forecasters work box. able reasonably limited amount customization . serious customization happens framework discussed ). basic forecasters, provide: Baseline flat-line forecaster Autoregressive forecaster Autoregressive classifier forcasters provide built framework. use basic models illustrate flexibility.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"forecasting-framework","dir":"Articles","previous_headings":"Goals for the package","what":"Forecasting framework","title":"Get started with epipredict","text":"framework creating custom forecasters views prediction task set modular components. four types components: Preprocessor: make transformations data model training Trainer: train model data, resulting fitted model object Predictor: make predictions, using fitted model object processed test data Postprocessor: manipulate transform predictions returning Users familiar {tidymodels} especially {workflows} package notice lot overlap. design, fact feature. truth epipredict wrapper around much contained packages. Therefore, want something -verse, ‚Äújust work‚Äù (hope). reason overlap workflows already implements first three steps. well. However, missing postprocessing stage currently plans implementation. feature important. baseline forecaster provide requires postprocessing. Anything complicated needs well. second omission tidymodels support panel data. Besides epidemiological data, economics, psychology, sociology, many areas frequently deal data type. framework behind epipredict implements . principle, nothing epidemiology, one simply use package solution missing functionality tidymodels. , ‚Äújust work‚Äù. panel data functionality implemented epi_df data type companion {epiprocess} package. much see , moment, ‚Äôs enough look simple one: data built package contains measured variables case_rate death_rate COVID-19 daily level US state year 2021. ‚Äúpanel‚Äù part repeated measurements across number locations. epi_df encodes time stamp time_value key geo_value. 2 names required, values don‚Äôt need actually represent objects. Additional key‚Äôs also supported (like age group, ethnicity, taxonomy, etc.). epi_df also contains metadata describes keys well vintage data. ‚Äôs possible data collected different times set geo_value‚Äôs time_value‚Äôs actually different. details, see {epiprocess}.","code":"jhu <- covid_case_death_rates jhu #> An `epi_df` object, 20,496 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 20,496 √ó 4 #>   geo_value time_value case_rate death_rate #> * <chr>     <date>         <dbl>      <dbl> #> 1 ak        2020-12-31      35.9      0.158 #> 2 al        2020-12-31      65.1      0.438 #> 3 ar        2020-12-31      66.0      1.27  #> 4 as        2020-12-31       0        0     #> 5 az        2020-12-31      76.8      1.10  #> 6 ca        2020-12-31      95.9      0.755 #> # ‚Ñπ 20,490 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"why-doesnt-this-package-already-exist","dir":"Articles","previous_headings":"Goals for the package","what":"Why doesn‚Äôt this package already exist?","title":"Get started with epipredict","text":"described : Parts actually exist. ‚Äôs universe called tidymodels. handles preprocessing, training, prediction, bound together, package called workflows. built epipredict top setup. way, CAN use almost everything provide. However, workflows doesn‚Äôt postprocessing. nothing -verse handles panel data. tidy-team doesn‚Äôt plans either things. (checked). two packages time series built tidymodels, ‚Äôs ‚Äúbasic‚Äù time series: 1-step AR models, exponential smoothing, STL decomposition, etc.1 group prioritized sorts models epidemic forecasting, one also integrate methods framework.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"show-me-the-basics","dir":"Articles","previous_headings":"","what":"Show me the basics","title":"Get started with epipredict","text":"start jhu data displayed . One ‚Äúcanned‚Äù forecasters provide autoregressive forecaster (without) covariates directly trains response. contrast typical ‚Äúiterative‚Äù AR model trains predict one-step-ahead, plugs predictions ‚Äúleverage ‚Äù longer horizons. ‚Äôll estimate model jointly across locations using recent 30 days. object two components: predictions just another epi_df. contains predictions location along additional columns. default, 90% predictive interval, forecast_date (date forecast putatively made) target_date (date forecast made). list object class epi_workflow. object encapsulates instructions necessary create prediction. details . default, forecaster predicts outcome (death_rate) 1-week ahead, using 3 lags predictor (case_rate death_rate) 0 (today), 1 week back 2 weeks back. predictors outcome can changed directly. rest defaults encapsulated list arguments. list produced arx_args_list().","code":"jhu <- jhu %>% filter(time_value >= max(time_value) - 30) out <- arx_forecaster(   jhu,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\") ) out$predictions #> # A tibble: 56 √ó 5 #>   geo_value .pred .pred_distn forecast_date target_date #>   <chr>     <dbl>   <qtls(7)> <date>        <date>      #> 1 ak        0.324     [0.324] 2021-12-31    2022-01-07  #> 2 al        0.264     [0.264] 2021-12-31    2022-01-07  #> 3 ar        0.444     [0.444] 2021-12-31    2022-01-07  #> 4 as        0.103     [0.103] 2021-12-31    2022-01-07  #> 5 az        0.591     [0.591] 2021-12-31    2022-01-07  #> 6 ca        0.289     [0.289] 2021-12-31    2022-01-07  #> # ‚Ñπ 50 more rows out$epi_workflow #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 6 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #> 6. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)    lag_0_case_rate    lag_7_case_rate   lag_14_case_rate   #>         0.1015759         -0.0003068          0.0047910         -0.0015547   #>  lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>         0.2448844          0.1915621          0.0721446 #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Frosting layers. #> 1. layer_predict() #> 2. layer_residual_quantiles() #> 3. layer_add_forecast_date() #> 4. layer_add_target_date() #> 5. layer_threshold() #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"simple-adjustments","dir":"Articles","previous_headings":"Show me the basics","what":"Simple adjustments","title":"Get started with epipredict","text":"Basic adjustments can made args_list. , ‚Äôve used different lags case_rate now predicting 2 weeks ahead. example also illustrates major difficulty ‚Äúiterative‚Äù versions AR models. model doesn‚Äôt produce forecasts case_rate, , data ‚Äúplug ‚Äù necessary lags.2 Another property basic model predictive interval. describe detail different vignette, easy request multiple quantiles. column .pred_dstn predictions object actually ‚Äúdistribution‚Äù parameterized quantiles. default forecaster, created using quantiles residuals predictive model (possibly symmetrized). , used 23 quantiles, one can grab particular quantile, extract entire distribution ‚Äúlong‚Äù epi_df quantile_levels probability values value associated quantile. Additional simple adjustments basic forecaster can made using function:","code":"out2week <- arx_forecaster(   jhu,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\"),   args_list = arx_args_list(     lags = list(c(0, 1, 2, 3, 7, 14), c(0, 7, 14)),     ahead = 14   ) ) out_q <- arx_forecaster(jhu, \"death_rate\", c(\"case_rate\", \"death_rate\"),   args_list = arx_args_list(     quantile_levels = c(.01, .025, 1:19 / 20, .975, .99)   ) ) round(head(quantile(out_q$predictions$.pred_distn, p = .4)), 3) #>       [,1] #> [1,] 0.275 #> [2,] 0.215 #> [3,] 0.395 #> [4,] 0.054 #> [5,] 0.542 #> [6,] 0.240 out_q$predictions %>%   pivot_quantiles_longer(.pred_distn) #> # A tibble: 1,288 √ó 6 #>   geo_value .pred forecast_date target_date .pred_distn_value #>   <chr>     <dbl> <date>        <date>                  <dbl> #> 1 ak        0.324 2021-12-31    2022-01-07            0       #> 2 ak        0.324 2021-12-31    2022-01-07            0       #> 3 ak        0.324 2021-12-31    2022-01-07            0.00969 #> 4 ak        0.324 2021-12-31    2022-01-07            0.0969  #> 5 ak        0.324 2021-12-31    2022-01-07            0.141   #> 6 ak        0.324 2021-12-31    2022-01-07            0.177   #> # ‚Ñπ 1,282 more rows #> # ‚Ñπ 1 more variable: .pred_distn_quantile_level <dbl> arx_args_list(   lags = c(0L, 7L, 14L), ahead = 7L, n_training = Inf,   forecast_date = NULL, target_date = NULL,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   symmetrize = TRUE, nonneg = TRUE, quantile_by_key = character(0L),   nafill_buffer = Inf )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"changing-the-engine","dir":"Articles","previous_headings":"Show me the basics","what":"Changing the engine","title":"Get started with epipredict","text":"far, forecasts produced using simple linear regression. way estimate model. trainer argument determines type model want. takes {parsnip} model. default linear regression, instead use random forest ranger package: boosted regression trees xgboost: quantile regression, using custom forecasting engine quantile_reg(): FWIW, last case (using quantile regression), far Delphi production forecast team used Covid forecasts past years.","code":"out_rf <- arx_forecaster(   jhu,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\"),   trainer = rand_forest(mode = \"regression\") ) out_gb <- arx_forecaster(   jhu,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\"),   trainer = boost_tree(mode = \"regression\", trees = 20) ) out_qr <- arx_forecaster(   jhu,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\"),   trainer = quantile_reg() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"inner-workings","dir":"Articles","previous_headings":"Show me the basics","what":"Inner workings","title":"Get started with epipredict","text":"Underneath hood, forecaster creates (returns) epi_workflow. Essentially, big S3 object wraps 4 modular steps (preprocessing - postprocessing) described .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"preprocessing","dir":"Articles","previous_headings":"Show me the basics > Inner workings","what":"Preprocessing","title":"Get started with epipredict","text":"Preprocessing accomplished recipe (imagine baking cake) provided {recipes} package. ‚Äôve made modifications (handle panel data) well added additional options. recipe gives specification handle training data. Think like fancified formula pass lm(): y ~ x1 + log(x2). general, 2 extensions formula recipes handles: transformations training test data can always applied. things like taking log variable, leading lagging, filtering rows, handling dummy variables, etc. Using statistics training data eventually process test data. major benefit recipes. prevents tidy team calls ‚Äúdata leakage‚Äù. simple example centering predictor mean. need store mean predictor training data use value test data rather accidentally calculating mean test predictor centering. recipe processed 2 steps, first ‚Äúprepped‚Äù. calculates stores intermediate statistics necessary use test data. ‚Äúbaked‚Äù resulting training data ready passing statistical model (like lm). introduced epi_recipe. ‚Äôs just recipe knows handle time_value, geo_value, additional keys available necessary. epi_recipe out_gb can extracted result: ‚ÄúInputs‚Äù original epi_df ‚Äúroles‚Äù assigned. None predictors outcomes. created recipe prepped. ‚ÄúOperations‚Äù sequence instructions create cake (baked training data). create lagged predictors, lead outcome, remove NAs. models like lm internally handle NAs, everything , deal explicitly. code (inside forecaster) recipes provides function step_lag(), assumes data breaks sequence time_values. bit dangerous, avoid behaviour. lag/ahead functions also appropriately adjust amount data avoid accidentally dropping recent predictors test data.","code":"extract_recipe(out_gb$epi_workflow) er <- epi_recipe(jhu) %>%   step_epi_lag(case_rate, death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"the-model-specification","dir":"Articles","previous_headings":"Show me the basics > Inner workings","what":"The model specification","title":"Get started with epipredict","text":"Users familiarity parsnip package trouble . Basically, parsnip unifies function signature across statistical models. example, lm() ‚Äúlikes‚Äù work formulas, glmnet::glmnet() uses x y predictors response. parsnip agnostic. ‚Äúlinear regression‚Äù. switched lm() xgboost() without issue despite fact functions couldn‚Äôt different. epipredict provides engines/modules (flatline forecaster quantile regression), able use available models listed . estimate (fit) preprocessed model, one calls fit() epi_workflow.","code":"lm(formula, data, subset, weights, na.action,   method = \"qr\",   model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE,   contrasts = NULL, offset, ... )  xgboost(   data = NULL, label = NULL, missing = NA, weight = NULL,   params = list(), nrounds, verbose = 1, print_every_n = 1L,   early_stopping_rounds = NULL, maximize = NULL, save_period = NULL,   save_name = \"xgboost.model\", xgb_model = NULL, callbacks = list(),   ... ) ewf <- epi_workflow(er, linear_reg()) %>% fit(jhu)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"postprocessing","dir":"Articles","previous_headings":"Show me the basics > Inner workings","what":"Postprocessing","title":"Get started with epipredict","text":"stretch metaphor preparing cake natural limits, created postprocessing functionality called ‚Äúfrosting‚Äù. Much like recipe, postprocessing operation ‚Äúlayer‚Äù ‚Äúslather‚Äù onto baked cake. fix ideas, postprocessing frosting arx_forecaster() 5 layers frosting. first generates forecasts test data. second uses quantiles residuals create distributional forecasts. next two add columns date forecast made date intended occur. predicting rates, non-negative, last layer thresholds predicted values intervals 0. code (inside forecaster) predict time, add object onto epi_workflow call forecast() get_test_data() function examines recipe ensures enough test data available create necessary lags produce prediction desired future time point (end training data). mimics happen jhu contained recent available historical data wanted actually predict future. instead used test data contained necessary predictors.","code":"extract_frosting(out_q$epi_workflow) f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(     quantile_levels = c(.01, .025, 1:19 / 20, .975, .99),     symmetrize = TRUE   ) %>%   layer_add_forecast_date() %>%   layer_add_target_date() %>%   layer_threshold(starts_with(\".pred\")) ewf %>%   add_frosting(f) %>%   forecast() #> An `epi_df` object, 56 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 56 √ó 6 #>   geo_value time_value .pred .pred_distn forecast_date target_date #>   <chr>     <date>     <dbl>  <qtls(23)> <date>        <date>      #> 1 ak        2021-12-31 0.324     [0.324] 2021-12-31    2022-01-07  #> 2 al        2021-12-31 0.264     [0.264] 2021-12-31    2022-01-07  #> 3 ar        2021-12-31 0.444     [0.444] 2021-12-31    2022-01-07  #> 4 as        2021-12-31 0.103     [0.103] 2021-12-31    2022-01-07  #> 5 az        2021-12-31 0.591     [0.591] 2021-12-31    2022-01-07  #> 6 ca        2021-12-31 0.289     [0.289] 2021-12-31    2022-01-07  #> # ‚Ñπ 50 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/epipredict.html","id":"conclusion","dir":"Articles","previous_headings":"Show me the basics","what":"Conclusion","title":"Get started with epipredict","text":"Internally, provide simple functions create reasonable forecasts. ideally, user create forecasters building components provide. vignettes, try walk customizations. illustrate everything , (roughly) code flatline_forecaster() applied case_rate. really differs arx_forecaster() recipe, test data, engine. frosting identical, fitting predicting procedure.","code":"r <- epi_recipe(jhu) %>%   step_epi_ahead(case_rate, ahead = 7, skip = TRUE) %>%   update_role(case_rate, new_role = \"predictor\") %>%   add_role(all_of(key_colnames(jhu)), new_role = \"predictor\")  f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles() %>%   layer_add_forecast_date() %>%   layer_add_target_date() %>%   layer_threshold(starts_with(\".pred\"))  eng <- linear_reg() %>% set_engine(\"flatline\") wf <- epi_workflow(r, eng, f) %>% fit(jhu) preds <- forecast(wf) preds #> An `epi_df` object, 56 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 56 √ó 6 #>   geo_value time_value .pred .pred_distn forecast_date target_date #>   <chr>     <date>     <dbl>   <qtls(7)> <date>        <date>      #> 1 ak        2021-12-31  36.4      [36.4] 2021-12-31    2022-01-07  #> 2 al        2021-12-31  89.9      [89.9] 2021-12-31    2022-01-07  #> 3 ar        2021-12-31  82.6      [82.6] 2021-12-31    2022-01-07  #> 4 as        2021-12-31   0           [0] 2021-12-31    2022-01-07  #> 5 az        2021-12-31  58.3      [58.3] 2021-12-31    2022-01-07  #> 6 ca        2021-12-31  84.3      [84.3] 2021-12-31    2022-01-07  #> # ‚Ñπ 50 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"example-panel-data-overview","dir":"Articles","previous_headings":"","what":"Example panel data overview","title":"Using epipredict on non-epidemic panel data","text":"vignette, demonstrate using epipredict employment panel data Statistics Canada. using Table 37-10-0115-01: Characteristics median employment income longitudinal cohorts postsecondary graduates two five years graduation, educational qualification field study (primary groupings). full dataset contains yearly median employment income two five years graduation, number graduates. data stratified variables geographic region (Canadian province), education, age group. year range dataset 2010 2017, inclusive. full dataset also contains metadata describes quality data collected. demonstration purposes, make following modifications get subset full dataset: keep provincial-level geographic region (full data also ‚ÄúCanada‚Äù region) keep ‚Äúgood‚Äù better quality data rows, indicated STATUS column Choose subset covariates aggregate across remaining ones. chosen covariates age group, educational qualification. use data epipredict, need convert epi_df format using epiprocess::as_epi_df() additional keys. case, additional keys age_group, edu_qual. Note modifications, encoded time_value type integer. lets us set time_type = \"year\", ensures lag ahead modifications later using correct time units. See epiprocess::epi_df list time_types available. Now, ready use grad_employ_subset epipredict. epi_df contains 1,445 rows 7 columns. quick summary columns epi_df: time_value (time value): year date format geo_value (geo value): province Canada num_graduates (raw, time series value): number graduates med_income_2y (raw, time series value): median employment income 2 years graduation med_income_5y (raw, time series value): median employment income 5 years graduation age_group (key): one two age groups, either 15 34 years, 35 64 years edu_qual (key): one 32 unique educational qualifications, e.g., ‚ÄúMaster‚Äôs diploma‚Äù following sections, go pre-processing data epi_recipe framework, fitting model making predictions within epipredict framework using package‚Äôs canned forecasters.","code":"# Rename for simplicity employ <- grad_employ_subset sample_n(employ, 6) #> An `epi_df` object, 6 x 7 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 6 √ó 7 #>   geo_value        age_group      edu_qual           time_value num_graduates #>   <chr>            <fct>          <fct>                   <int>         <dbl> #> 1 Saskatchewan     35 to 64 years Undergraduate cer‚Ä¶       2016           120 #> 2 British Columbia 35 to 64 years Post-baccalaureat‚Ä¶       2017           240 #> 3 Saskatchewan     35 to 64 years Post-baccalaureat‚Ä¶       2012            10 #> 4 Quebec           15 to 34 years Master's certific‚Ä¶       2010            80 #> 5 British Columbia 35 to 64 years Career, technical‚Ä¶       2012          3060 #> 6 New Brunswick    35 to 64 years Career, technical‚Ä¶       2013           230 #> # ‚Ñπ 2 more variables: med_income_2y <dbl>, med_income_5y <dbl>"},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"pre-processing","dir":"Articles","previous_headings":"Autoregressive (AR) model to predict number of graduates in a year","what":"Pre-processing","title":"Using epipredict on non-epidemic panel data","text":"simple example, let‚Äôs work num_graduates column now. first pre-process standardizing numeric column total within group keys. since raw numeric values vary greatly province province since large differences population. visualization sample small data British Columbia Ontario. Note groups time series information since filtered time series incomplete dates.  predict standardized number graduates (proportion) next year (time t+1t+1) using autoregressive model three lags (.e., AR(3) model). model represented algebraically like : yt+1,ijk=Œ±0+Œ±1ytijk+Œ±2yt‚àí1,ijk+Œ±3yt‚àí2,ijk+œµtijk   y_{t+1,ijk} =   \\alpha_0 + \\alpha_1 y_{tijk} + \\alpha_2 y_{t-1,ijk} + \\alpha_3 y_{t-2,ijk} + \\epsilon_{tijk} ytijy_{tij} proportion graduates time tt location ii age group jj education quality kk. pre-processing step, need create additional columns employ yt+1,ijky_{t+1,ijk}, ytijky_{tijk}, yt‚àí1,ijky_{t-1,ijk}, yt‚àí2,ijky_{t-2,ijk}. via epi_recipe. Note creating epi_recipe alone doesn‚Äôt add outcome predictor columns; recipe just stores instructions adding . epi_recipe add one ahead column representing yt+1,ijky_{t+1,ijk} 3 lag columns representing ytijky_{tijk}, yt‚àí1,ijky_{t-1,ijk}, yt‚àí2,ijky_{t-2,ijk} (‚Äôs accurate think 0th ‚Äúlag‚Äù ‚Äúcurrent‚Äù value 2 lags, ‚Äôs quite processing works). Also note since specified time_type year, lag lead values years. Let‚Äôs apply recipe using prep bake generate view lag ahead columns. can see prep bake steps created new columns according epi_recipe: ahead_1_num_graduates_prop corresponds yt+1,ijky_{t+1,ijk} lag_0_num_graduates_prop, lag_1_num_graduates_prop, lag_2_num_graduates_prop correspond ytijky_{tijk}, yt‚àí1,ijky_{t-1,ijk}, yt‚àí2,ijky_{t-2,ijk} respectively.","code":"employ_small <- employ %>%   group_by(geo_value, age_group, edu_qual) %>%   # Select groups where there are complete time series values   filter(n() >= 6) %>%   mutate(     num_graduates_prop = num_graduates / sum(num_graduates),     med_income_2y_prop = med_income_2y / sum(med_income_2y),     med_income_5y_prop = med_income_5y / sum(med_income_5y)   ) %>%   ungroup() head(employ_small) #> An `epi_df` object, 6 x 10 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 6 √ó 10 #>   geo_value           age_group      edu_qual        time_value num_graduates #>   <chr>               <fct>          <fct>                <int>         <dbl> #> 1 Newfoundland and L‚Ä¶ 15 to 34 years Career, techni‚Ä¶       2010           430 #> 2 Newfoundland and L‚Ä¶ 35 to 64 years Career, techni‚Ä¶       2010           140 #> 3 Newfoundland and L‚Ä¶ 15 to 34 years Career, techni‚Ä¶       2010           630 #> 4 Newfoundland and L‚Ä¶ 35 to 64 years Career, techni‚Ä¶       2010           140 #> 5 Newfoundland and L‚Ä¶ 15 to 34 years Undergraduate ‚Ä¶       2010          1050 #> 6 Newfoundland and L‚Ä¶ 35 to 64 years Undergraduate ‚Ä¶       2010           130 #> # ‚Ñπ 5 more variables: med_income_2y <dbl>, med_income_5y <dbl>, #> #   num_graduates_prop <dbl>, med_income_2y_prop <dbl>, ‚Ä¶ employ_small %>%   filter(geo_value %in% c(\"British Columbia\", \"Ontario\")) %>%   filter(grepl(\"degree\", edu_qual, fixed = T)) %>%   group_by(geo_value, time_value, edu_qual, age_group) %>%   summarise(num_graduates_prop = sum(num_graduates_prop), .groups = \"drop\") %>%   ggplot(aes(x = time_value, y = num_graduates_prop, color = geo_value)) +   geom_line() +   scale_colour_manual(values = c(\"Cornflowerblue\", \"Orange\"), name = \"\") +   facet_grid(rows = vars(edu_qual), cols = vars(age_group)) +   xlab(\"Year\") +   ylab(\"Percentage of gratuates\") +   theme(legend.position = \"bottom\") r <- epi_recipe(employ_small) %>%   step_epi_ahead(num_graduates_prop, ahead = 1) %>%   step_epi_lag(num_graduates_prop, lag = 0:2) %>%   step_epi_naomit() r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        6 #> key:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Leading: num_graduates_prop by 1 #> 2. Lagging: num_graduates_prop by 0, 1, 2 #> 3. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 4. ‚Ä¢ Removing rows with NA values in: all_outcomes() # Display a sample of the pre-processed data bake_and_show_sample <- function(recipe, data, n = 5) {   recipe %>%     prep(data) %>%     bake(new_data = data) %>%     sample_n(n) }  r %>% bake_and_show_sample(employ_small) #> An `epi_df` object, 5 x 14 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 5 √ó 14 #>   geo_value        age_group      edu_qual           time_value num_graduates #>   <chr>            <fct>          <fct>                   <dbl>         <dbl> #> 1 Ontario          35 to 64 years Master's diploma         2012            40 #> 2 British Columbia 15 to 34 years Undergraduate deg‚Ä¶       2014         11520 #> 3 Alberta          35 to 64 years Career, technical‚Ä¶       2013          1270 #> 4 Alberta          35 to 64 years Undergraduate deg‚Ä¶       2016          1050 #> 5 Quebec           15 to 34 years Career, technical‚Ä¶       2016          3920 #> # ‚Ñπ 9 more variables: med_income_2y <dbl>, med_income_5y <dbl>, #> #   num_graduates_prop <dbl>, med_income_2y_prop <dbl>, ‚Ä¶"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"model-fitting-and-prediction","dir":"Articles","previous_headings":"Autoregressive (AR) model to predict number of graduates in a year","what":"Model fitting and prediction","title":"Using epipredict on non-epidemic panel data","text":"Since goal now fit simple autoregressive model, can use parsnip::linear_reg() default engine lm, fits linear regression using ordinary least squares. use epi_workflow epi_recipe defined pre-processing section along parsnip::linear_reg() model. Note epi_workflow container doesn‚Äôt actually fitting. pass workflow fit() get estimated model coefficients Œ±ÃÇ,=0,...,3\\widehat{\\alpha}_i,\\ =0,...,3. output tells us coefficients fitted model; instance, estimated intercept Œ±ÃÇ0=\\widehat{\\alpha}_0 = 0.109 coefficient ytijky_{tijk} Œ±ÃÇ1=\\widehat\\alpha_1 = 0.324. summary also tells us estimated coefficients significantly different zero. Extracting 95% confidence intervals coefficients also leads us conclusion: coefficient estimates significantly different 0. Now workflow, can generate predictions subset data. demo, predict number graduates using last 2 years dataset. can using augment function . Note predict augment still return epiprocess::epi_df keys present original dataset.","code":"wf_linreg <- epi_workflow(r, linear_reg()) %>%   fit(employ_small) summary(extract_fit_engine(wf_linreg)) #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.104501 -0.013043 -0.002708  0.009289  0.210582  #>  #> Coefficients: #>                           Estimate Std. Error t value Pr(>|t|)     #> (Intercept)               0.108532   0.006695  16.211  < 2e-16 *** #> lag_0_num_graduates_prop  0.324251   0.037163   8.725  < 2e-16 *** #> lag_1_num_graduates_prop  0.014190   0.038543   0.368 0.712848     #> lag_2_num_graduates_prop -0.137378   0.036337  -3.781 0.000168 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.02993 on 777 degrees of freedom #> Multiple R-squared:  0.1084, Adjusted R-squared:  0.1049  #> F-statistic: 31.47 on 3 and 777 DF,  p-value: < 2.2e-16 confint(extract_fit_engine(wf_linreg)) #>                                2.5 %      97.5 % #> (Intercept)               0.09538942  0.12167466 #> lag_0_num_graduates_prop  0.25130008  0.39720211 #> lag_1_num_graduates_prop -0.06147071  0.08985152 #> lag_2_num_graduates_prop -0.20870743 -0.06604791 latest <- get_test_data(recipe = r, x = employ_small) preds <- stats::predict(wf_linreg, latest) %>% filter(!is.na(.pred)) # Display a sample of the prediction values, excluding NAs preds %>% sample_n(5) #> An `epi_df` object, 5 x 5 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 5 √ó 5 #>   geo_value                 age_group      edu_qual          time_value .pred #>   <chr>                     <fct>          <fct>                  <dbl> <dbl> #> 1 New Brunswick             15 to 34 years Professional deg‚Ä¶       2017 0.141 #> 2 British Columbia          15 to 34 years Career, technica‚Ä¶       2017 0.134 #> 3 Nova Scotia               15 to 34 years Master's degree         2017 0.133 #> 4 Ontario                   15 to 34 years Undergraduate ce‚Ä¶       2017 0.161 #> 5 Newfoundland and Labrador 15 to 34 years Master's degree         2017 0.139 augment(wf_linreg, latest) %>% sample_n(5) #> An `epi_df` object, 5 x 11 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 5 √ó 11 #>   geo_value        age_group      edu_qual                  time_value  .pred #>   <chr>            <fct>          <fct>                          <dbl>  <dbl> #> 1 British Columbia 35 to 64 years Post-baccalaureate non-g‚Ä¶       2017  0.143 #> 2 Saskatchewan     15 to 34 years Career, technical or pro‚Ä¶       2015 NA     #> 3 Manitoba         15 to 34 years Career, technical or pro‚Ä¶       2016 NA     #> 4 Saskatchewan     35 to 64 years Doctoral degree                 2017  0.135 #> 5 Manitoba         35 to 64 years Other career, technical ‚Ä¶       2016 NA     #> # ‚Ñπ 6 more variables: num_graduates <dbl>, med_income_2y <dbl>, #> #   med_income_5y <dbl>, num_graduates_prop <dbl>, ‚Ä¶"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"model-diagnostics","dir":"Articles","previous_headings":"Autoregressive (AR) model to predict number of graduates in a year","what":"Model diagnostics","title":"Using epipredict on non-epidemic panel data","text":"First, ‚Äôll plot residuals (, ytijk‚àíyÃÇtijky_{tijk} - \\widehat{y}_{tijk}) fitted values (yÃÇtijk\\widehat{y}_{tijk}).  fitted values vs.¬†residuals plot shows us residuals mostly clustered around zero, form even band around zero line, indicating variance residuals constant. Additionally, fitted values vs.¬†square root standardized residuals makes obvious - spread square root standardized residuals varies fitted values. Q-Q plot shows us residuals heavier tails Normal distribution. normality residuals assumption doesn‚Äôt hold either. Finally, residuals vs.¬†leverage plot shows us influential points based Cook‚Äôs distance (outside red dotted line). Since appear violating linear model assumptions, might consider transforming data differently, considering non-linear model, something else.","code":"par(mfrow = c(2, 2), mar = c(5, 3, 1.2, 0)) plot(extract_fit_engine(wf_linreg))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"ar-model-with-exogenous-inputs","dir":"Articles","previous_headings":"","what":"AR model with exogenous inputs","title":"Using epipredict on non-epidemic panel data","text":"Now suppose want model 1-step-ahead 5-year employment income using current two previous values, also incorporating information two time-series dataset: 2-year employment income number graduates previous 2 years. using autoregressive model exogenous inputs, defined follows: yt+1,ijk=Œ±0+Œ±1ytijk+Œ±2yt‚àí1,ijk+Œ±3yt‚àí2,ijk+Œ≤1xtijk+Œ≤2xt‚àí1,ijk+Œ≥2ztijk+Œ≥2zt‚àí1,ijk+œµtijk \\begin{aligned}   y_{t+1,ijk} &=   \\alpha_0 + \\alpha_1 y_{tijk} + \\alpha_2 y_{t-1,ijk} + \\alpha_3 y_{t-2,ijk}\\\\   &\\quad + \\beta_1 x_{tijk} + \\beta_2 x_{t-1,ijk}\\\\   &\\quad + \\gamma_2 z_{tijk} + \\gamma_2 z_{t-1,ijk} + \\epsilon_{tijk} \\end{aligned} ytijky_{tijk} 5-year median income (proportion) time tt (location ii, age group jj education quality kk), xtijkx_{tijk} 2-year median income (proportion) time tt, ztijkz_{tijk} number graduates (proportion) time tt.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"pre-processing-1","dir":"Articles","previous_headings":"AR model with exogenous inputs","what":"Pre-processing","title":"Using epipredict on non-epidemic panel data","text":", construct epi_recipe detailing pre-processing steps.","code":"rx <- epi_recipe(employ_small) %>%   step_epi_ahead(med_income_5y_prop, ahead = 1) %>%   # 5-year median income has current, and two lags c(0, 1, 2)   step_epi_lag(med_income_5y_prop, lag = 0:2) %>%   # But the two exogenous variables have current values, and 1 lag c(0, 1)   step_epi_lag(med_income_2y_prop, lag = c(0, 1)) %>%   step_epi_lag(num_graduates_prop, lag = c(0, 1)) %>%   step_epi_naomit()  bake_and_show_sample(rx, employ_small) #> An `epi_df` object, 5 x 18 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 5 √ó 18 #>   geo_value           age_group      edu_qual        time_value num_graduates #>   <chr>               <fct>          <fct>                <dbl>         <dbl> #> 1 Prince Edward Isla‚Ä¶ 35 to 64 years Undergraduate ‚Ä¶       2017            10 #> 2 British Columbia    35 to 64 years Post-baccalaur‚Ä¶       2014           180 #> 3 Alberta             35 to 64 years Career, techni‚Ä¶       2016          1250 #> 4 Saskatchewan        15 to 34 years Undergraduate ‚Ä¶       2015          2600 #> 5 Saskatchewan        15 to 34 years Doctoral degree       2016            70 #> # ‚Ñπ 13 more variables: med_income_2y <dbl>, med_income_5y <dbl>, #> #   num_graduates_prop <dbl>, med_income_2y_prop <dbl>, ‚Ä¶"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"model-fitting-post-processing","dir":"Articles","previous_headings":"AR model with exogenous inputs","what":"Model fitting & post-processing","title":"Using epipredict on non-epidemic panel data","text":"fitting model making predictions, let‚Äôs add post-processing steps using frosting layers things: Threshold predictions 0. predicting proportions, can‚Äôt negative. transformed values back dollars people can‚Äôt negative either. Generate prediction intervals based residual quantiles, allowing us quantify uncertainty associated future predicted values. Convert predictions back income values number graduates, rather standardized proportions. via frosting layer layer_population_scaling(). Based summary output model, can examine confidence intervals perform hypothesis tests usual. Let‚Äôs take look predictions along 90% prediction intervals.","code":"# Create dataframe of the sums we used for standardizing # Only have to include med_income_5y since that is our outcome totals <- employ_small %>%   group_by(geo_value, age_group, edu_qual) %>%   summarise(med_income_5y_tot = sum(med_income_5y), .groups = \"drop\")  # Define post-processing steps f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred) %>%   layer_threshold(.pred, lower = 0) %>%   # 90% prediction interval   layer_residual_quantiles(     symmetrize = FALSE   ) %>%   layer_population_scaling(     .pred, .pred_distn,     df = totals, df_pop_col = \"med_income_5y_tot\"   )  wfx_linreg <- epi_workflow(rx, parsnip::linear_reg()) %>%   fit(employ_small) %>%   add_frosting(f)  summary(extract_fit_engine(wfx_linreg)) #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Residuals: #>       Min        1Q    Median        3Q       Max  #> -0.049668 -0.004509 -0.000516  0.004707  0.049882  #>  #> Coefficients: #>                           Estimate Std. Error t value Pr(>|t|)     #> (Intercept)               0.041278   0.004975   8.298 4.72e-16 *** #> lag_0_med_income_5y_prop  0.320780   0.049348   6.500 1.44e-10 *** #> lag_1_med_income_5y_prop  0.079610   0.049116   1.621  0.10546     #> lag_2_med_income_5y_prop  0.073048   0.033686   2.168  0.03043 *   #> lag_0_med_income_2y_prop  0.118122   0.045579   2.592  0.00973 **  #> lag_1_med_income_2y_prop  0.034455   0.042749   0.806  0.42050     #> lag_0_num_graduates_prop -0.025129   0.013603  -1.847  0.06509 .   #> lag_1_num_graduates_prop  0.078268   0.013396   5.842 7.58e-09 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 0.01056 on 773 degrees of freedom #> Multiple R-squared:  0.3224, Adjusted R-squared:  0.3163  #> F-statistic: 52.54 on 7 and 773 DF,  p-value: < 2.2e-16 latest <- get_test_data(recipe = rx, x = employ_small) predsx <- predict(wfx_linreg, latest)  # Display predictions along with prediction intervals predsx %>%   select(     geo_value, time_value, edu_qual, age_group,     .pred_scaled, .pred_distn_scaled   ) %>%   head() %>%   pivot_quantiles_wider(.pred_distn_scaled) #> An `epi_df` object, 6 x 12 with metadata: #> * geo_type  = custom #> * time_type = integer #> * other_keys = age_group, edu_qual #> * as_of     = 2024-09-18 #>  #> # A tibble: 6 √ó 12 #>   geo_value            time_value edu_qual        age_group      .pred_scaled #>   <chr>                     <dbl> <fct>           <fct>                 <dbl> #> 1 Newfoundland and La‚Ä¶       2017 Career, techni‚Ä¶ 15 to 34 years       45724. #> 2 Newfoundland and La‚Ä¶       2017 Career, techni‚Ä¶ 35 to 64 years       37614. #> 3 Newfoundland and La‚Ä¶       2017 Career, techni‚Ä¶ 15 to 34 years       56992. #> 4 Newfoundland and La‚Ä¶       2017 Career, techni‚Ä¶ 35 to 64 years       47802. #> 5 Newfoundland and La‚Ä¶       2017 Post career, t‚Ä¶ 15 to 34 years       61127. #> 6 Newfoundland and La‚Ä¶       2017 Undergraduate ‚Ä¶ 15 to 34 years       72713. #> # ‚Ñπ 7 more variables: `0.05` <dbl>, `0.1` <dbl>, `0.25` <dbl>, `0.5` <dbl>, #> #   `0.75` <dbl>, `0.9` <dbl>, `0.95` <dbl>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"using-canned-forecasters","dir":"Articles","previous_headings":"","what":"Using canned forecasters","title":"Using epipredict on non-epidemic panel data","text":"‚Äôve seen can non-epidemiological panel data using recipes frame, epi_recipe pre-processing, epi_workflow model fitting, frosting post-processing. epipredict also comes canned forecasters steps behind scenes simple models. Even though aren‚Äôt working epidemiological data, canned forecasters still work expected, box. demonstrate simple flatline_forecaster direct autoregressive (AR) forecaster arx_forecaster. illustrations, continue use employ_small dataset transformed numeric columns proportions within group keys epi_df.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"flatline-forecaster","dir":"Articles","previous_headings":"Using canned forecasters","what":"Flatline forecaster","title":"Using epipredict on non-epidemic panel data","text":"first example, ‚Äôll use flatline_forecaster make simple prediction 2-year median income next year, based one previous time point. model representated algebraically : yt+1,ijk=ytijk+œµtijky_{t+1,ijk} = y_{tijk} + \\epsilon_{tijk} ytijky_{tijk} 2-year median income (proportion) time tt.","code":"out_fl <- flatline_forecaster(employ_small, \"med_income_2y_prop\",   args_list = flatline_args_list(ahead = 1) )  out_fl #> ‚ïê‚ïê A basic forecaster of type flatline ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>  #> This forecaster was fit on 2025-03-13 17:36:41. #>  #> Training data was an <epi_df> with: #> ‚Ä¢ Geography: custom, #> ‚Ä¢ Other keys: age_group and edu_qual, #> ‚Ä¢ Time type: integer, #> ‚Ä¢ Using data up-to-date as of: 2024-09-18. #> ‚Ä¢ With the last data available on 2017 #>  #> ‚îÄ‚îÄ Predictions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> A total of 167 predictions are available for #> ‚Ä¢ 11 unique geographic regions, #> ‚Ä¢ At forecast dates: 2017, #> ‚Ä¢ For target dates: 2018, #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"autoregressive-forecaster-with-exogenous-inputs","dir":"Articles","previous_headings":"Using canned forecasters","what":"Autoregressive forecaster with exogenous inputs","title":"Using epipredict on non-epidemic panel data","text":"second example, ‚Äôll use arx_forecaster make prediction 5-year median income based using two lags, using two lags two exogenous variables: 2-year median income number graduates. canned forecaster gives us simple way making forecast since defines recipe, workflow, post-processing steps behind scenes. similar model introduced ‚ÄúAutoregressive Linear Model Exogenous Inputs‚Äù section article, inputs number lags. changes direct AR forecaster, like changing engine, also work expected. use boosted tree model instead linear regression.","code":"arx_args <- arx_args_list(lags = c(0L, 1L), ahead = 1L)  out_arx_lr <- arx_forecaster(employ_small, \"med_income_5y_prop\",   c(\"med_income_5y_prop\", \"med_income_2y_prop\", \"num_graduates_prop\"),   args_list = arx_args )  out_arx_lr #> ‚ïê‚ïê A basic forecaster of type ARX Forecaster ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>  #> This forecaster was fit on 2025-03-13 17:36:42. #>  #> Training data was an <epi_df> with: #> ‚Ä¢ Geography: custom, #> ‚Ä¢ Other keys: age_group and edu_qual, #> ‚Ä¢ Time type: integer, #> ‚Ä¢ Using data up-to-date as of: 2024-09-18. #> ‚Ä¢ With the last data available on 2017 #>  #> ‚îÄ‚îÄ Predictions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> A total of 166 predictions are available for #> ‚Ä¢ 11 unique geographic regions, #> ‚Ä¢ At forecast dates: 2017, #> ‚Ä¢ For target dates: 2018, #> out_arx_rf <- arx_forecaster(   employ_small, \"med_income_5y_prop\",   c(\"med_income_5y_prop\", \"med_income_2y_prop\", \"num_graduates_prop\"),   trainer = parsnip::boost_tree(mode = \"regression\", trees = 20),   args_list = arx_args )  out_arx_rf #> ‚ïê‚ïê A basic forecaster of type ARX Forecaster ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>  #> This forecaster was fit on 2025-03-13 17:36:44. #>  #> Training data was an <epi_df> with: #> ‚Ä¢ Geography: custom, #> ‚Ä¢ Other keys: age_group and edu_qual, #> ‚Ä¢ Time type: integer, #> ‚Ä¢ Using data up-to-date as of: 2024-09-18. #> ‚Ä¢ With the last data available on 2017 #>  #> ‚îÄ‚îÄ Predictions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> A total of 166 predictions are available for #> ‚Ä¢ 11 unique geographic regions, #> ‚Ä¢ At forecast dates: 2017, #> ‚Ä¢ For target dates: 2018, #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/panel-data.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using epipredict on non-epidemic panel data","text":"purpose epipredict allow tidymodels operate epidemiology data, can easily adapted (workflows canned forecasters) work generic panel data modelling.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Examples of Preprocessing and Models","text":"epipredict package utilizes tidymodels framework, namely {recipes} dplyr-like pipeable sequences feature engineering {parsnip} unified interface range models. epipredict additional customized feature engineering preprocessing steps, step_epi_lag(), step_population_scaling(), step_epi_naomit(). can used along steps recipes package feature engineering. vignette, illustrate examples use epipredict recipes parsnip different purposes epidemiological forecasting. focus basic autoregressive models, COVID cases deaths near future predicted using linear combination cases deaths near past. remaining vignette split three sections. first section, use Poisson regression predict death counts. second section, use linear regression predict death rates. Last least, create classification model hotspot predictions.","code":"library(tidyr) library(dplyr) library(epipredict) library(recipes) library(workflows) library(poissonreg)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"poisson-regression","dir":"Articles","previous_headings":"","what":"Poisson Regression","title":"Examples of Preprocessing and Models","text":"COVID-19, US Center Disease Control Prevention (CDC) collected models forecasts characterize state outbreak course. use inform public health decision makers potential consequences deploying control measures. One outcomes CDC forecasts death counts COVID-19. Although many state---art models, choose use Poisson regression, textbook example modeling count data, illustration using epipredict package existing tidymodels packages. counts_subset dataset available epidatasets package), contains number confirmed cases deaths June 4, 2021 Dec 31, 2021 U.S. states. can loaded : data can also fetched Delphi API following query: wish predict 7-day ahead death counts lagged cases deaths. Furthermore, let state dummy variable. Using differential intercept coefficients, can allow intercept shift states. Œºt+7=ùîº(yt+7)\\mu_{t+7} = \\mathbb{E}(y_{t+7}), yt+7y_{t+7} assumed follow Poisson distribution mean Œºt+7\\mu_{t+7}; sstates_{\\text{state}} dummy variables state take values either 0 1. Preprocessing steps performed prepare data model fitting. diving , helpful understand roles recipes framework.","code":"x <- epidatasets::counts_subset library(epidatr)  d <- as.Date(\"2024-03-20\")  x <- pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_incidence_num\",   time_type = \"day\",   geo_type = \"state\",   time_values = epirange(20210604, 20211231),   geo_values = \"ca,fl,tx,ny,nj\",   as_of = d ) %>%   select(geo_value, time_value, cases = value)  y <- pub_covidcast(   source = \"jhu-csse\",   signals = \"deaths_incidence_num\",   time_type = \"day\",   geo_type = \"state\",   time_values = epirange(20210604, 20211231),   geo_values = \"ca,fl,tx,ny,nj\",   as_of = d ) %>%   select(geo_value, time_value, deaths = value)  x <- full_join(x, y, by = c(\"geo_value\", \"time_value\")) %>%   as_epi_df(as_of = d)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"aside-on-recipes","dir":"Articles","previous_headings":"Poisson Regression","what":"Aside on recipes","title":"Examples of Preprocessing and Models","text":"recipes can assign one roles column data. roles restricted predefined set; can anything. conventional situations, typically ‚Äúpredictor‚Äù /‚Äúoutcome‚Äù. Additional roles enable targeted step_*() operations specific variables groups variables. case, role predictor given explanatory variables right-hand side model (equation ). role outcome response variable wish predict. geo_value time_value predefined roles unique epipredict package. Since work epi_df objects, datasets geo_value time_value passed automatically two roles assigned appropriate columns data. recipes package also allows manual alterations roles bulk. handy functions can used together help us manipulate variable roles easily. update_role() alters existing role recipe assigns initial role variables yet declared role. add_role() adds additional role variables already role recipe, without overwriting old roles. remove_role() eliminates single existing role recipe.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"end-aside","dir":"Articles","previous_headings":"Poisson Regression","what":"End aside","title":"Examples of Preprocessing and Models","text":"Notice following preprocessing steps, used add_role() geo_value_factor since, currently, default role raw, like reuse variable predictors. specifying preprocessing steps, use parsnip package modeling producing prediction death count, 7 days latest available date dataset. Note time_value corresponds last available date training set, target date forecast (2022-01-07). Let‚Äôs take look fit: now, ‚Äôve used Poisson regression model count data. Poisson regression can also used model rate data, case rates death rates, incorporating offset terms model. log(population)\\log(\\text{population}) log state population used scale count data left-hand side equation. offset simply predictor coefficient fixed 1 rather estimated. several ways model rate data given count population data. First, parsnip framework, specify formula fit(). However, lose ability use recipes framework create new variables since variables exist original dataset (, , lags leads) called directly fit(). Alternatively, step_population_scaling() layer_population_scaling() epipredict package can perform population scaling provide population data, illustrate next section.","code":"counts_subset <- counts_subset %>%   mutate(geo_value_factor = as.factor(geo_value)) %>%   as_epi_df()  epi_recipe(counts_subset) #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        3 #> geo_value:  1 #> time_value: 1  r <- epi_recipe(counts_subset) %>%   add_role(geo_value_factor, new_role = \"predictor\") %>%   step_dummy(geo_value_factor) %>%   ## Occasionally, data reporting errors / corrections result in negative   ## cases / deaths   step_mutate(cases = pmax(cases, 0), deaths = pmax(deaths, 0)) %>%   step_epi_lag(cases, deaths, lag = c(0, 7)) %>%   step_epi_ahead(deaths, ahead = 7, role = \"outcome\") %>%   step_epi_naomit() latest <- get_test_data(r, counts_subset)  wf <- epi_workflow(r, parsnip::poisson_reg()) %>%   fit(counts_subset)  predict(wf, latest) %>% filter(!is.na(.pred)) #> An `epi_df` object, 5 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2024-03-20 #>  #> # A tibble: 5 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ca        2021-12-31 108.  #> 2 fl        2021-12-31 270.  #> 3 nj        2021-12-31  22.5 #> 4 ny        2021-12-31  94.8 #> 5 tx        2021-12-31  91.0 extract_fit_engine(wf) #>  #> Call:  stats::glm(formula = ..y ~ ., family = stats::poisson, data = data) #>  #> Coefficients: #>         (Intercept)  geo_value_factor_fl  geo_value_factor_nj   #>           3.970e+00           -1.487e-01           -1.425e+00   #> geo_value_factor_ny  geo_value_factor_tx          lag_0_cases   #>          -6.865e-01            3.025e-01            1.339e-05   #>         lag_7_cases         lag_0_deaths         lag_7_deaths   #>           1.717e-06            1.731e-03            8.566e-04   #>  #> Degrees of Freedom: 984 Total (i.e. Null);  976 Residual #> Null Deviance:       139600  #> Residual Deviance: 58110     AIC: 62710"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"linear-regression","dir":"Articles","previous_headings":"","what":"Linear Regression","title":"Examples of Preprocessing and Models","text":"COVID-19, CDC required submission case death count predictions. However, Delphi Group preferred train rate data instead, puts different locations similar scale (eliminating need location-specific intercepts). can use liner regression predict death rates use state population data scale rates counts.1 using layer_population_scaling() epipredict package. Additionally, forecasts submitted, prediction intervals provided along point estimates. can obtained via postprocessing using layer_residual_quantiles(). worth pointing , however, layer_residual_quantiles() used population scaling else transformation make results uninterpretable. wish, now, predict 7-day ahead death counts lagged case rates death rates, along extra behaviourial predictors. Namely, use survey data COVID-19 Trends Impact Survey. survey data provides estimated percentage people wore mask time public past 7 days estimated percentage respondents reported people encountered public past 7 days maintained distance least 6 feet. State-wise population data 2019 U.S. Census used layer_population_scaling(). datasets available epidatasets package), can loaded : data can also fetched Delphi API following query: Rather using raw mask-wearing / social-distancing metrics, sake illustration, ‚Äôll convert categorical predictors.  take subset death rate case rate data built-dataset covid_case_death_rates. Preprocessing steps rely functions epipredict package well recipes package. also many functions recipes package allow scalar transformations, log transformations data centering. case, center numerical predictors allow meaningful interpretation intercept. sanity check can examine structure training data: directly predicting results, need add postprocessing layers obtain death counts instead death rates. Note rates used far ‚Äúper 100K people‚Äù rather ‚Äúper person‚Äù. ‚Äôll also use quantile regression quantile_reg engine rather ordinary least squares create median predictions 90% prediction interval. columns marked *_scaled rescaled correct units, case deaths rather deaths per 100K people (remain .pred). look prediction intervals: Last least, let‚Äôs take look regression fit check coefficients:","code":"behav_ind <- epidatasets::ctis_covid_behaviours pop_dat <- epidatasets::state_census %>% select(abbr, pop) library(epidatr)  d <- as.Date(\"2024-03-20\")  behav_ind_mask <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_wwearing_mask_7d\",   time_type = \"day\",   geo_type = \"state\",   time_values = epirange(20210604, 20211231),   geo_values = \"ca,fl,tx,ny,nj\",   as_of = d ) %>%   select(geo_value, time_value, masking = value)  behav_ind_distancing <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_wothers_distanced_public\",   time_type = \"day\",   geo_type = \"state\",   time_values = epirange(20210604, 20211231),   geo_values = \"ca,fl,tx,ny,nj\",   as_of = d ) %>%   select(geo_value, time_value, distancing = value)  behav_ind <- behav_ind_mask %>%   full_join(behav_ind_distancing, by = c(\"geo_value\", \"time_value\")) %>%   as_epi_df(as_of = d)  pop_dat <- state_census %>% select(abbr, pop) jhu <- filter(   covid_case_death_rates,   time_value >= \"2021-06-04\",   time_value <= \"2021-12-31\",   geo_value %in% c(\"ca\", \"fl\", \"tx\", \"ny\", \"nj\") ) jhu <- jhu %>%   mutate(geo_value_factor = as.factor(geo_value)) %>%   left_join(behav_ind, by = c(\"geo_value\", \"time_value\")) %>%   as_epi_df()  r <- epi_recipe(jhu) %>%   add_role(geo_value_factor, new_role = \"predictor\") %>%   step_dummy(geo_value_factor) %>%   step_epi_lag(case_rate, death_rate, lag = c(0, 7, 14)) %>%   step_mutate(     masking = cut_number(masking, 5),     distancing = cut_number(distancing, 5)   ) %>%   step_epi_ahead(death_rate, ahead = 7, role = \"outcome\") %>%   step_center(contains(\"lag\"), role = \"predictor\") %>%   step_epi_naomit() glimpse(slice_sample(bake(prep(r, jhu), jhu), n = 6)) #> Rows: 6 #> Columns: 17 #> $ geo_value           <chr> \"ny\", \"ca\", \"ca\", \"nj\", \"ca\", \"tx\" #> $ time_value          <date> 2021-10-16, 2021-11-24, 2021-11-28, 2021-12-03,‚Ä¶ #> $ case_rate           <dbl> 23.910028, 11.687497, 10.642052, 34.521027, 32‚Ä¶ #> $ death_rate          <dbl> 0.1935616, 0.2489327, 0.1596653, 0.1736988, -0.‚Ä¶ #> $ masking             <fct> NA, NA, NA, NA, NA, NA #> $ distancing          <fct> NA, NA, NA, NA, NA, NA #> $ geo_value_factor_fl <dbl> 0, 0, 0, 0, 0, 0 #> $ geo_value_factor_nj <dbl> 0, 0, 0, 1, 0, 0 #> $ geo_value_factor_ny <dbl> 1, 0, 0, 0, 0, 0 #> $ geo_value_factor_tx <dbl> 0, 0, 0, 0, 0, 1 #> $ lag_0_case_rate     <dbl> -3.031947, -15.254479, -16.299923, 7.579052, 5.‚Ä¶ #> $ lag_7_case_rate     <dbl> -1.452426, -13.683953, -13.892606, -2.516386, 2‚Ä¶ #> $ lag_14_case_rate    <dbl> -1.971052, -11.437390, -12.995578, -5.872955, -‚Ä¶ #> $ lag_0_death_rate    <dbl> -0.08822027, -0.03284917, -0.12211657, -0.10808‚Ä¶ #> $ lag_7_death_rate    <dbl> -0.10521237, -0.08728057, -0.06514517, -0.14829‚Ä¶ #> $ lag_14_death_rate   <dbl> -0.05793007, -0.07639427, -0.07022537, -0.13542‚Ä¶ #> $ ahead_7_death_rate  <dbl> 0.1950392, 0.1694629, 0.2282487, 0.1753071, 0.1‚Ä¶ f <- frosting() %>%   layer_predict() %>%   layer_add_target_date(\"2022-01-07\") %>%   layer_threshold(.pred, lower = 0) %>%   layer_quantile_distn() %>%   layer_naomit(.pred) %>%   layer_population_scaling(     .pred, .pred_distn,     df = pop_dat,     rate_rescaling = 1e5,     by = c(\"geo_value\" = \"abbr\"),     df_pop_col = \"pop\"   )  wf <- epi_workflow(r, quantile_reg()) %>%   fit(jhu) %>%   add_frosting(f)  p <- forecast(wf) p #> An `epi_df` object, 5 x 7 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 5 √ó 7 #>   geo_value time_value     .pred target_date .pred_distn .pred_scaled #>   <chr>     <date>     <qtls(7)> <date>        <qtls(7)>    <qtls(7)> #> 1 ca        2021-12-31   [0.182] 2022-01-07      [0.182]       [71.8] #> 2 fl        2021-12-31   [0.354] 2022-01-07      [0.354]       [76.1] #> 3 nj        2021-12-31   [0.651] 2022-01-07      [0.651]       [57.8] #> 4 ny        2021-12-31   [0.703] 2022-01-07      [0.703]        [137] #> 5 tx        2021-12-31   [0.296] 2022-01-07      [0.296]       [85.7] #> # ‚Ñπ 1 more variable: .pred_distn_scaled <qtls(7)> p %>%   select(geo_value, target_date, .pred_scaled, .pred_distn_scaled) %>%   pivot_quantiles_wider(.pred_distn_scaled) #> # A tibble: 5 √ó 10 #>   geo_value target_date .pred_scaled `0.05` `0.1` `0.25` `0.5` `0.75` `0.9` #>   <chr>     <date>         <qtls(7)>  <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl> #> 1 ca        2022-01-07        [71.8]   32.4  52.9   62.0  71.8   71.3  53.7 #> 2 fl        2022-01-07        [76.1]   31.4  50.1   62.7  76.1   69.2  43.2 #> 3 nj        2022-01-07        [57.8]   36.3  45.2   52.6  57.8   55.6  42.6 #> 4 ny        2022-01-07         [137]   85.8 110.   124.  137.   134.   98.5 #> 5 tx        2022-01-07        [85.7]   52.7  64.1   76.5  85.7   96.0  94.7 #> # ‚Ñπ 1 more variable: `0.95` <dbl> #> Call: #> quantreg::rq(formula = ..y ~ ., tau = ~c(0.05, 0.1, 0.25, 0.5,  #> 0.75, 0.9, 0.95), data = data, na.action = stats::na.omit, method = ~\"br\",  #>     model = FALSE) #>  #> Coefficients: #>                        tau= 0.05     tau= 0.10     tau= 0.25     tau= 0.50 #> (Intercept)          0.210972402  0.2359826581  0.2664823658  0.2947231936 #> geo_value_factor_fl  0.029646713  0.0164328932  0.0228839635  0.0477642418 #> geo_value_factor_nj  0.007927635 -0.0004083631 -0.0012956427 -0.0022679253 #> geo_value_factor_ny -0.003055366 -0.0045424488 -0.0154494128 -0.0186682895 #> geo_value_factor_tx  0.020163817  0.0260190881  0.0325313901  0.0380479148 #> lag_0_case_rate     -0.001497710 -0.0008892893 -0.0011817541 -0.0011301607 #> lag_7_case_rate      0.004540193  0.0042615475  0.0055779628  0.0058296289 #> lag_14_case_rate     0.001401322  0.0007932742  0.0005183414  0.0001946297 #> lag_0_death_rate     0.500930277  0.4897370924  0.4452127352  0.5322549795 #> lag_7_death_rate     0.023373823  0.0856670896  0.0800142120  0.1192945031 #> lag_14_death_rate   -0.114626164 -0.0610698031  0.0154793659 -0.0291354449 #>                         tau= 0.75     tau= 0.90    tau= 0.95 #> (Intercept)          0.3389449098  0.3797560267  0.415298613 #> geo_value_factor_fl  0.0588500157  0.1331501784  0.168089770 #> geo_value_factor_nj -0.0138013295 -0.0137781000 -0.029492405 #> geo_value_factor_ny -0.0101301003 -0.0195144856 -0.037258463 #> geo_value_factor_tx  0.0489007435  0.0749248485  0.073000742 #> lag_0_case_rate     -0.0018750320 -0.0029905834 -0.001683478 #> lag_7_case_rate      0.0067506556  0.0060268400  0.007268965 #> lag_14_case_rate     0.0007346599  0.0052740974  0.002825240 #> lag_0_death_rate     0.5119314030  0.2221271697  0.198207000 #> lag_7_death_rate     0.1447297067  0.2473517717  0.218447512 #> lag_14_death_rate   -0.0007025566 -0.0003914277  0.122566902 #>  #> Degrees of freedom: 950 total; 939 residual"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"classification","dir":"Articles","previous_headings":"","what":"Classification","title":"Examples of Preprocessing and Models","text":"Sometimes preferable create predictive model surges upswings rather raw values. case, target predict future increased case rates (denoted ), decreased case rates (), flat case rates (flat) relative current level. models may referred ‚Äúhotspot prediction models‚Äù. follow analysis McDonald, Bien, Green, Hu, et al. extend application predict three categories instead two. Hotspot prediction uses categorical outcome variable defined terms relative change Y‚Ñì,t+aY_{\\ell, t+} compared Y‚Ñì,tY_{\\ell, t}. Y‚Ñì,tY_{\\ell, t} denotes case rates location ‚Ñì\\ell time tt. define response variables follows: Z‚Ñì,t={,ifY‚Ñì,tŒî>0.25down,ifY‚Ñì,tŒî<‚àí0.20flat,otherwise  Z_{\\ell, t}=     \\begin{cases}       \\text{}, & \\text{}\\ Y^{\\Delta}_{\\ell, t} > 0.25 \\\\       \\text{}, & \\text{}\\  Y^{\\Delta}_{\\ell, t} < -0.20\\\\       \\text{flat}, & \\text{otherwise}     \\end{cases} Y‚Ñì,tŒî=(Y‚Ñì,t‚àíY‚Ñì,t‚àí7)/(Y‚Ñì,t‚àí7)Y^{\\Delta}_{\\ell, t} = (Y_{\\ell, t}- Y_{\\ell, t-7})\\ /\\ (Y_{\\ell, t-7}). say location ‚Ñì\\ell hotspot time tt Z‚Ñì,tZ_{\\ell,t} , meaning number newly reported cases past 7 days increased least 25% compared preceding week. Z‚Ñì,tZ_{\\ell,t} categorized , suggests least 20% decrease newly reported cases past 7 days (20% decrease inverse 25% increase). Otherwise, consider trend flat. expression multinomial regression use follows: œÄj(x)=Pr(Z‚Ñì,t=j|x)=egj(x)1+‚àëk=12egk(x) \\pi_{j}(x) = \\text{Pr}(Z_{\\ell,t} = j|x) = \\frac{e^{g_j(x)}}{1 + \\sum_{k=1}^{2}e^{g_k(x)} } jj either , flat, Preprocessing steps similar previous models additional step categorizing response variables. , use subset death rate case rate data built-dataset covid_case_death_rates. fit multinomial regression examine predictions: can also look estimated coefficients model summary information: One also use formula epi_recipe() achieve results . However, one add_formula(), add_recipe(), workflow_variables() can specified. purpose demonstrating add_formula rather add_recipe, prep bake recipe return data.frame used model fitting.","code":"jhu <- covid_case_death_rates %>%   dplyr::filter(     time_value >= \"2021-06-04\",     time_value <= \"2021-12-31\",     geo_value %in% c(\"ca\", \"fl\", \"tx\", \"ny\", \"nj\")   ) %>%   mutate(geo_value_factor = as.factor(geo_value))  r <- epi_recipe(jhu) %>%   add_role(time_value, new_role = \"predictor\") %>%   step_dummy(geo_value_factor) %>%   step_growth_rate(case_rate, role = \"none\", prefix = \"gr_\") %>%   step_epi_lag(starts_with(\"gr_\"), lag = c(0, 7, 14)) %>%   step_epi_ahead(starts_with(\"gr_\"), ahead = 7, role = \"none\") %>%   # note recipes::step_cut() has a bug in it, or we could use that here   step_mutate(     response = cut(       ahead_7_gr_7_rel_change_case_rate,       breaks = c(-Inf, -0.2, 0.25, Inf) / 7, # division gives weekly not daily       labels = c(\"down\", \"flat\", \"up\")     ),     role = \"outcome\"   ) %>%   step_rm(has_role(\"none\"), has_role(\"raw\")) %>%   step_epi_naomit() wf <- epi_workflow(r, multinom_reg()) %>%   fit(jhu)  forecast(wf) %>% filter(!is.na(.pred_class)) #> An `epi_df` object, 5 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 5 √ó 3 #>   geo_value time_value .pred_class #>   <chr>     <date>     <fct>       #> 1 ca        2021-12-31 up          #> 2 fl        2021-12-31 up          #> 3 nj        2021-12-31 up          #> 4 ny        2021-12-31 up          #> 5 tx        2021-12-31 up extract_fit_engine(wf) #> Call: #> nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE) #>  #> Coefficients: #>      (Intercept)  time_value geo_value_factor_fl geo_value_factor_nj #> flat   -161.3776 0.008663641           -1.310482            1.145751 #> up     -146.6629 0.007796713           -0.565096            1.582188 #>      geo_value_factor_ny geo_value_factor_tx lag_0_gr_7_rel_change_case_rate #> flat            25.93757          -0.2681016                        20.06018 #> up              26.04283          -0.2679387                        34.18244 #>      lag_7_gr_7_rel_change_case_rate lag_14_gr_7_rel_change_case_rate #> flat                        33.91462                         7.466482 #> up                          57.78538                         5.116403 #>  #> Residual Deviance: 1152.434  #> AIC: 1188.434 b <- bake(prep(r, jhu), jhu)  epi_workflow() %>%   add_formula(     response ~ geo_value + time_value + lag_0_gr_7_rel_change_case_rate +       lag_7_gr_7_rel_change_case_rate + lag_14_gr_7_rel_change_case_rate   ) %>%   add_model(parsnip::multinom_reg()) %>%   fit(data = b) #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Formula #> Model: multinom_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> response ~ geo_value + time_value + lag_0_gr_7_rel_change_case_rate + #> lag_7_gr_7_rel_change_case_rate + lag_14_gr_7_rel_change_case_rate #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Call: #> nnet::multinom(formula = ..y ~ ., data = data, trace = FALSE) #>  #> Coefficients: #>      (Intercept) geo_valuefl geo_valuenj geo_valueny geo_valuetx  time_value #> flat   -161.3782   -1.310438    1.145794    25.93743  -0.2680307 0.008663669 #> up     -146.6592   -0.565024    1.582236    26.04272  -0.2678949 0.007796513 #>      lag_0_gr_7_rel_change_case_rate lag_7_gr_7_rel_change_case_rate #> flat                        20.05896                        33.91374 #> up                          34.18073                        57.78475 #>      lag_14_gr_7_rel_change_case_rate #> flat                         7.466884 #> up                           5.116729 #>  #> Residual Deviance: 1152.434  #> AIC: 1188.434 #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"benefits-of-lagging-and-leading-in-epipredict","dir":"Articles","previous_headings":"","what":"Benefits of Lagging and Leading in epipredict","title":"Examples of Preprocessing and Models","text":"step_epi_ahead step_epi_lag functions epipredict package handy creating correct lags leads future predictions. Let‚Äôs start simple dataset preprocessing: want predict death rates 2022-01-07, 7 days ahead latest available date dataset. compare two methods trying create lags leads: Notice difference number rows b1 b2 returns. second version, one doesn‚Äôt use step_epi_ahead step_epi_lag, omitted dates compared one used epipredict functions. model trained based recipes functions predict 7 days ahead 2021-12-24 instead 7 days ahead 2021-12-31.","code":"ex <- filter(   covid_case_death_rates,   time_value >= \"2021-12-01\",   time_value <= \"2021-12-31\",   geo_value == \"ca\" )  dim(ex) #> [1] 31  4 p1 <- epi_recipe(ex) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7, role = \"outcome\") %>%   step_epi_naomit() %>%   prep(ex)  b1 <- bake(p1, ex) b1 #> An `epi_df` object, 17 x 11 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 17 √ó 11 #>   geo_value time_value case_rate death_rate lag_0_case_rate lag_7_case_rate #> * <chr>     <date>         <dbl>      <dbl>           <dbl>           <dbl> #> 1 ca        2021-12-15      15.8      0.154            15.8            18.0 #> 2 ca        2021-12-16      16.3      0.155            16.3            17.4 #> 3 ca        2021-12-17      16.8      0.158            16.8            17.3 #> 4 ca        2021-12-18      17.6      0.164            17.6            17.2 #> 5 ca        2021-12-19      19.0      0.165            19.0            16.3 #> 6 ca        2021-12-20      20.6      0.163            20.6            16.0 #> # ‚Ñπ 11 more rows #> # ‚Ñπ 5 more variables: lag_14_case_rate <dbl>, lag_0_death_rate <dbl>, ‚Ä¶   p2 <- epi_recipe(ex) %>%   step_mutate(     lag0case_rate = lag(case_rate, 0),     lag7case_rate = lag(case_rate, 7),     lag14case_rate = lag(case_rate, 14),     lag0death_rate = lag(death_rate, 0),     lag7death_rate = lag(death_rate, 7),     lag14death_rate = lag(death_rate, 14),     ahead7death_rate = lead(death_rate, 7)   ) %>%   step_epi_naomit() %>%   prep(ex)  b2 <- bake(p2, ex) b2 #> An `epi_df` object, 10 x 11 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 10 √ó 11 #>   geo_value time_value case_rate death_rate lag0case_rate lag7case_rate #> * <chr>     <date>         <dbl>      <dbl>         <dbl>         <dbl> #> 1 ca        2021-12-15      15.8      0.154          15.8          18.0 #> 2 ca        2021-12-16      16.3      0.155          16.3          17.4 #> 3 ca        2021-12-17      16.8      0.158          16.8          17.3 #> 4 ca        2021-12-18      17.6      0.164          17.6          17.2 #> 5 ca        2021-12-19      19.0      0.165          19.0          16.3 #> 6 ca        2021-12-20      20.6      0.163          20.6          16.0 #> # ‚Ñπ 4 more rows #> # ‚Ñπ 5 more variables: lag14case_rate <dbl>, lag0death_rate <dbl>, ‚Ä¶ dates_used_in_training1 <- b1 %>%   select(-ahead_7_death_rate) %>%   na.omit() %>%   pull(time_value) dates_used_in_training1 #>  [1] \"2021-12-15\" \"2021-12-16\" \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" #>  [6] \"2021-12-20\" \"2021-12-21\" \"2021-12-22\" \"2021-12-23\" \"2021-12-24\" #> [11] \"2021-12-25\" \"2021-12-26\" \"2021-12-27\" \"2021-12-28\" \"2021-12-29\" #> [16] \"2021-12-30\" \"2021-12-31\"  dates_used_in_training2 <- b2 %>%   select(-ahead7death_rate) %>%   na.omit() %>%   pull(time_value) dates_used_in_training2 #>  [1] \"2021-12-15\" \"2021-12-16\" \"2021-12-17\" \"2021-12-18\" \"2021-12-19\" #>  [6] \"2021-12-20\" \"2021-12-21\" \"2021-12-22\" \"2021-12-23\" \"2021-12-24\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Examples of Preprocessing and Models","text":"McDonald, Bien, Green, Hu, et al.¬†‚ÄúCan auxiliary indicators improve COVID-19 forecasting hotspot prediction?.‚Äù Proceedings National Academy Sciences 118.51 (2021): e2111453118. doi:10.1073/pnas.2111453118","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/preprocessing-and-models.html","id":"attribution","dir":"Articles","previous_headings":"","what":"Attribution","title":"Examples of Preprocessing and Models","text":"object contains modified part COVID-19 Data Repository Center Systems Science Engineering (CSSE) Johns Hopkins University republished COVIDcast Epidata API. data set licensed terms Creative Commons Attribution 4.0 International license Johns Hopkins University behalf Center Systems Science Engineering. Copyright Johns Hopkins University 2020.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"introducing-smooth-quantile-regression","dir":"Articles","previous_headings":"","what":"Introducing smooth quantile regression","title":"Smooth quantile regression","text":"Whereas time-series forecasting examples package used (direct) models single horizons, multi-period forecasting, goal (directly) forecast several horizons simultaneously. useful epidemiological applications decisions based trend signal. idea underlying smooth quantile regression set forecast targets can approximated smooth curve. novel approach Tuzhilina et al., 2022 enforces smoothness across horizons can applied point estimation regression interval prediction quantile regression. focus vignette latter.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"built-in-function-for-smooth-quantile-regression-and-its-parameters","dir":"Articles","previous_headings":"","what":"Built-in function for smooth quantile regression and its parameters","title":"Smooth quantile regression","text":"built-smooth quantile regression function, smooth_quantile_reg() provides model specification smooth quantile regression works tidymodels framework. following parameters default values: smooth quantile regression, type model mode regression. engine currently supported smooth_qr() smoothqr package. outcome_locations indicate multiple horizon (ie. ahead) values. specified user. quantile_levels parameter vector values indicates quantiles estimated. default median (0.5 quantile). degree parameter indicates degree polynomials used smoothing response. number aheads. degree precisely equal number aheads, smoothing. better understand parameter works, look origins used model.","code":"smooth_quantile_reg(   mode = \"regression\",   engine = \"smoothqr\",   outcome_locations = NULL,   quantile_levels = 0.5,   degree = 3L )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"model-form","dir":"Articles","previous_headings":"","what":"Model form","title":"Smooth quantile regression","text":"Smooth quantile regression linear auto-regressive, key feature transformation forces coefficients satisfy smoothing constraint. purpose model coefficient smooth function ahead values, coefficient set linear combination smooth basis functions (spline polynomial). degree parameter controls number polynomials used. greater number responses. tuning parameter, can chosen performing grid search cross-validation. Intuitively, d=1d = 1 corresponds constant model, d=2d = 2 gives straight line forecasts, d=3d = 3 gives quadratic forecasts. Since degree 3 found work well tested applications (see Section 9 Tuzhilina et al., 2022), default value.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"demonstration-of-smooth-quantile-regression","dir":"Articles","previous_headings":"","what":"Demonstration of smooth quantile regression","title":"Smooth quantile regression","text":"now apply smooth quantile regression real data used COVID-19 forecasting. built-dataset use subset JHU daily data state cases deaths. sample data ranges Dec.¬†31, 2020 Dec.¬†31, 2021. set forecast date November 30, 2021 can produce forecasts target dates 1 28 days ahead. construct test data, tedf days beyond . use recent 3 months worth data forecast date training. plotting focus subset two states - California Utah. Suppose goal data predict COVID-19 death rates several horizons state. day tt, want predict new deaths yy =1,‚Ä¶,28a = 1,\\dots, 28 days ahead locations jj using death rates today, 1 week ago, 2 weeks ago. location, ‚Äôll predict median (0.5 quantile) target dates using yÃÇj(t+)=Œ±()+‚àël=02Œ≤l()yj(t‚àí7l) \\hat{y}_{j}(t+) = \\alpha() + \\sum_{l = 0}^2 \\beta_{l}()  y_{j}(t - 7l)  Œ≤l()=‚àë=1dŒ∏ilhi()\\beta_{l}() = \\sum_{=1}^d \\theta_{il} h_i() smoothing constraint h1(),‚Ä¶,hd(){h_1(), \\dots, h_d()} set smooth basis functions dd hyperparameter manages flexibility Œ≤l()\\beta_{l}(). Remember goal Œ≤l()\\beta_{l}() smooth function aheads achieved imposing smoothing constraint. Note model intended simple straightforward. modification model add case rates another predictive feature (leave reader incorporate additional features beyond historical response values). can update basic model incorporate k=2k = 2 predictive features case death rates location j, xj(t)=(xj1(t),xj2(t))x_j(t) = (x_{j1}(t), x_{j2}(t)) follows: yÃÇj(t+)=Œ±()+‚àëk=12‚àël=02Œ≤kl()xjk(t‚àí7l) \\hat{y}_{j}(t+) = \\alpha() + \\sum_{k = 1}^2 \\sum_{l = 0}^2 \\beta_{kl}()  x_{jk}(t - 7l)  Œ≤kl()=‚àë=1dŒ∏iklhi()\\beta_{kl}() = \\sum_{=1}^d \\theta_{ikl} h_i(). Now, create forecaster scratch building epi_workflow (canned forecaster currently available). Building forecaster allows customization control pre-processing post-processing actions wish take. pre-processing steps take epi_recipe simply lag predictor (0, 7, 14 days) lead response multiple aheads specified function user. post-processing layers add frosting nearly simple. first predict, unnest prediction list-cols, omit NAs , enforce greater 0. third component epi_workflow, model, smooth quantile regression, three main arguments - quantiles, aheads, degree. creating epi_workflow components, get test data based longest lag period make predictions. input forecaster function ease use. Notice allow function user specify aheads, degree, quantile may want change parameter values. also allow input forecast date fixed onset demonstration. now can produce smooth quantile regression predictions problem: often, ‚Äôre going want limit just predicting median value uncertainty predictions, let‚Äôs try predict several different quantiles addition median: can see different columns different quantile predictions. Let‚Äôs visualize results sample two states. create simple plotting function, median predictions orange line surrounding quantiles blue bands around . comparison, include actual values time black line. Since like plot actual death rates states time, bind training testing data together input plotting function follows:  can see predictions smooth curves state, expected using smooth quantile regression. addition curvature forecasts matches truth, forecasts look remarkably accurate.","code":"library(epipredict) library(dplyr) library(purrr) library(ggplot2) theme_set(theme_bw()) edf <- epidatasets::covid_case_death_rates fd <- as.Date(\"2021-11-30\")  tedf <- edf %>% filter(time_value >= fd) edf <- edf %>% filter(time_value < fd, time_value >= fd - 90L) geos <- c(\"ut\", \"ca\") smooth_fc <- function(x, aheads = 1:28, degree = 3L, quantiles = 0.5, fd) {   rec <- epi_recipe(x) %>%     step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%     step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%     step_epi_ahead(death_rate, ahead = aheads)    f <- frosting() %>%     layer_predict() %>%     layer_unnest(.pred) %>%     layer_naomit(distn) %>%     layer_add_forecast_date() %>%     layer_threshold(distn)    ee <- smooth_quantile_reg(     quantile_levels = quantiles,     outcome_locations = aheads,     degree = degree   )    ewf <- epi_workflow(rec, ee, f)    the_fit <- ewf %>% fit(x)    latest <- get_test_data(rec, x)    preds <- predict(the_fit, new_data = latest) %>%     mutate(forecast_date = fd, target_date = fd + ahead) %>%     select(geo_value, target_date, distn, ahead) %>%     pivot_quantiles_wider(distn)    preds } smooth_preds <- smooth_fc(edf, fd = fd) smooth_preds #> # A tibble: 1,568 √ó 4 #>    geo_value target_date ahead `0.5` #>    <chr>     <date>      <int> <dbl> #>  1 ak        2021-12-01      1 0.323 #>  2 ak        2021-12-02      2 0.347 #>  3 ak        2021-12-03      3 0.369 #>  4 ak        2021-12-04      4 0.389 #>  5 ak        2021-12-05      5 0.407 #>  6 ak        2021-12-06      6 0.422 #>  7 ak        2021-12-07      7 0.436 #>  8 ak        2021-12-08      8 0.448 #>  9 ak        2021-12-09      9 0.458 #> 10 ak        2021-12-10     10 0.465 #> # ‚Ñπ 1,558 more rows several_quantiles <- c(.1, .25, .5, .75, .9) smooth_preds <- smooth_fc(edf, quantiles = several_quantiles, fd = fd) smooth_preds #> # A tibble: 1,568 √ó 8 #>    geo_value target_date ahead `0.1` `0.25` `0.5` `0.75` `0.9` #>    <chr>     <date>      <int> <dbl>  <dbl> <dbl>  <dbl> <dbl> #>  1 ak        2021-12-01      1 0.286  0.315 0.323  0.350 0.434 #>  2 ak        2021-12-02      2 0.292  0.331 0.347  0.383 0.474 #>  3 ak        2021-12-03      3 0.298  0.345 0.369  0.414 0.511 #>  4 ak        2021-12-04      4 0.303  0.358 0.389  0.442 0.544 #>  5 ak        2021-12-05      5 0.307  0.369 0.407  0.467 0.575 #>  6 ak        2021-12-06      6 0.310  0.378 0.422  0.490 0.603 #>  7 ak        2021-12-07      7 0.313  0.387 0.436  0.511 0.629 #>  8 ak        2021-12-08      8 0.314  0.393 0.448  0.529 0.651 #>  9 ak        2021-12-09      9 0.315  0.398 0.458  0.544 0.670 #> 10 ak        2021-12-10     10 0.315  0.402 0.465  0.557 0.687 #> # ‚Ñπ 1,558 more rows plot_preds <- function(preds, geos_to_plot = NULL, train_test_dat, fd) {   if (!is.null(geos_to_plot)) {     preds <- preds %>% filter(geo_value %in% geos_to_plot)     train_test_dat <- train_test_dat %>% filter(geo_value %in% geos_to_plot)   }    ggplot(preds) +     geom_ribbon(aes(target_date, ymin = `0.1`, ymax = `0.9`),       fill = \"cornflowerblue\", alpha = .8     ) +     geom_ribbon(aes(target_date, ymin = `0.25`, ymax = `0.75`),       fill = \"#00488E\", alpha = .8     ) +     geom_line(data = train_test_dat, aes(time_value, death_rate)) +     geom_line(aes(target_date, `0.5`), color = \"orange\") +     geom_vline(xintercept = fd) +     facet_wrap(~geo_value) +     scale_x_date(name = \"\", date_labels = \"%b %Y\", date_breaks = \"2 months\") +     ylab(\"Deaths per 100K inhabitants\") } plot_preds(smooth_preds, geos, bind_rows(tedf, edf), fd)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"varying-the-degrees-parameter","dir":"Articles","previous_headings":"Demonstration of smooth quantile regression","what":"Varying the degrees parameter","title":"Smooth quantile regression","text":"can test impact different degrees using map() function. Noting may take time run, let‚Äôs try degrees 1 7: One way quantify impact forecasting look mean absolute error (MAE) mean squared error (MSE) degrees. can select degree results lowest MAE. Since MAE compares predicted values actual values, first join test data predicted data comparisons: compute MAE degrees: Instead just looking raw numbers, let‚Äôs create simple line plot visualize MAE changes degrees data:  can see degree results lowest MAE 3. Hence, pick degree future forecasting work data.","code":"smooth_preds_list <- map(1:7, function(x) {   smooth_fc(     edf,     degree = x,     quantiles = c(.1, .25, .5, .75, .9),     fd = fd   ) %>%     mutate(degree = x) }) %>% list_rbind() tedf_sub <- tedf %>%   rename(target_date = time_value, actual = death_rate) %>%   select(geo_value, target_date, actual) smooth_preds_df_deg <- smooth_preds_list %>%   left_join(tedf_sub, by = c(\"geo_value\", \"target_date\")) %>%   group_by(degree) %>%   mutate(error = abs(`0.5` - actual)) %>%   summarise(mean = mean(error))  # Arrange the MAE from smallest to largest smooth_preds_df_deg %>% arrange(mean) #> # A tibble: 7 √ó 2 #>   degree  mean #>    <int> <dbl> #> 1      3 0.201 #> 2      2 0.202 #> 3      5 0.203 #> 4      4 0.203 #> 5      6 0.203 #> 6      7 0.203 #> 7      1 0.206 ggplot(smooth_preds_df_deg, aes(degree, mean)) +   geom_line() +   xlab(\"Degrees of freedom\") +   ylab(\"Mean MAE\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"a-brief-comparison-between-smoothing-and-no-smoothing","dir":"Articles","previous_headings":"Demonstration of smooth quantile regression","what":"A brief comparison between smoothing and no smoothing","title":"Smooth quantile regression","text":"Now, briefly compare results using smooth quantile regression obtained without smoothing. latter approach amounts ordinary quantile regression get predictions intended target date. main drawback ignores fact responses represent signal, just different ahead values. contrast, smooth quantile regression approach utilizes information data structure - fact aheads independent , naturally related time smooth curve. get basic quantile regression results can utilize forecaster ‚Äôve already built. can simply set degree number ahead values re-run code without smoothing. can produce corresponding plot inspect predictions obtained baseline model:  Unlike smooth quantile regression, resulting forecasts smooth curves, rather jagged irregular shape. formal comparison two approaches, compare test performance terms accuracy calculating either , MAE MSE, performance measure choice can calculated times locations ahead value  aheads, times, locations single numerical summary. former shows forecasts immediate future distant future inaccurate models consideration. latter shows smooth quantile regression model baseline models perform similarly overall, smooth quantile regression model slightly beating baseline model terms overall average MAE. One commonly used metric Weighted Interval Score (WIS, Bracher et al., 2021), scoring rule based population quantiles. point score interval, whereas MAE evaluates accuracy point forecast. Let FF forecast composed predicted quantiles qœÑq_{\\tau} set quantile levels œÑ\\tau. , terms predicted quantiles, WIS target variable YY represented follows (McDonald etal., 2021): WIS(F,Y)=2‚àëœÑœïœÑ(Y‚àíqœÑ) WIS(F, Y) = 2 \\sum_{\\tau} \\phi_{\\tau} (Y - q_{\\tau})  œïœÑ(x)=œÑ|x|\\phi_{\\tau}(x) = \\tau |x| x‚â•0x \\geq 0 andœïœÑ(x)=(1‚àíœÑ)|x|\\phi_{\\tau}(x) = (1 - \\tau) |x| x<0x < 0. form general can accommodate symmetric asymmetric quantile levels. quantile levels symmetric, can alternatively express WIS collection central prediction intervals (‚ÑìŒ±,uŒ±\\ell_{\\alpha}, u_{\\alpha}) parametrized exclusion probability Œ±\\alpha: WIS(F,Y)=‚àëŒ±{(uŒ±‚àí‚ÑìŒ±)+2‚ãÖdist(Y,[‚ÑìŒ±,uŒ±])} WIS(F, Y) =  \\sum_{\\alpha} \\{ (u_{\\alpha} - \\ell_{\\alpha}) + 2 \\cdot \\text{dist}(Y, [\\ell_{\\alpha}, u_{\\alpha}]) \\}  dist(,S)\\text{dist}(,S) smallest distance point aa element set SS. implement former representation, mention form shows score can decomposed addition sharpness component (first term summand) /overprediction component (second term summand). alternative representation useful , easily see major limitation WIS, score tends prioritize sharpness (wide interval ) relative coverage (interval contains truth). Now, write simple function first representation score compatible latest version epipredict (adapted corresponding function smoothmpf-epipredict). inputs actual predicted values quantile levels. Next, apply wis_dist_quantile function get WIS score state target date. compute mean WIS ahead value states. results smooth baseline forecasters shown similar style line plot chose MAE:  results consistent saw MAE: forecasts near distant future tend inaccurate models. smooth quantile regression model slightly outperforms baseline model. Though averaging WIS score location time tends primary aggregation scheme used evaluation model comparisons (see, example, McDonald et al., 2021), can also obtain single numerical summary averaging aheads, times, locations: Overall, perspectives agree smooth quantile regression model tends perform slightly better baseline model terms average WIS, illustrating difficulty forecasting problem.","code":"baseline_preds <- smooth_fc(   edf,   degree = 28L, quantiles = several_quantiles, fd = fd ) plot_preds(baseline_preds, geos, bind_rows(tedf, edf), fd) baseline_preds_mae_df <- baseline_preds %>%   left_join(tedf_sub, by = c(\"geo_value\", \"target_date\")) %>%   group_by(ahead) %>%   mutate(error = abs(`0.5` - actual)) %>%   summarise(mean = mean(error)) %>%   mutate(type = \"baseline\")  smooth_preds_mae_df <- smooth_preds %>%   left_join(tedf_sub, by = c(\"geo_value\", \"target_date\")) %>%   group_by(ahead) %>%   mutate(error = abs(`0.5` - actual)) %>%   summarise(mean = mean(error)) %>%   mutate(type = \"smooth\")  preds_mae_df <- bind_rows(baseline_preds_mae_df, smooth_preds_mae_df)  ggplot(preds_mae_df, aes(ahead, mean, color = type)) +   geom_line() +   xlab(\"Ahead\") +   ylab(\"Mean MAE\") +   scale_color_manual(values = c(\"darkred\", \"#063970\"), name = \"\") mean(baseline_preds_mae_df$mean) #> [1] 0.203589 mean(smooth_preds_mae_df$mean) #> [1] 0.2011083 wis_dist_quantile <- function(actual, values, quantile_levels) {   2 * mean(pmax(     quantile_levels * (actual - values),     (1 - quantile_levels) * (values - actual),     na.rm = TRUE   )) } smooth_preds_wis_df <- smooth_preds %>%   left_join(tedf_sub, by = c(\"geo_value\", \"target_date\")) %>%   rowwise() %>%   mutate(wis = wis_dist_quantile(     actual, c(`0.1`, `0.25`, `0.5`, `0.75`, `0.9`),     several_quantiles   )) %>%   group_by(ahead) %>%   summarise(mean = mean(wis)) %>%   mutate(type = \"smooth\")  baseline_preds_wis_df <- baseline_preds %>%   left_join(tedf_sub, by = c(\"geo_value\", \"target_date\")) %>%   rowwise() %>%   mutate(wis = wis_dist_quantile(     actual, c(`0.1`, `0.25`, `0.5`, `0.75`, `0.9`),     several_quantiles   )) %>%   group_by(ahead) %>%   summarise(mean = mean(wis)) %>%   mutate(type = \"baseline\")  preds_wis_df <- bind_rows(smooth_preds_wis_df, baseline_preds_wis_df)  ggplot(preds_wis_df, aes(ahead, mean, color = type)) +   geom_line() +   xlab(\"Ahead\") +   ylab(\"Mean WIS\") +   scale_color_manual(values = c(\"darkred\", \"#063970\"), name = \"\") mean(baseline_preds_wis_df$mean) #> [1] 0.1676765 mean(smooth_preds_wis_df$mean) #> [1] 0.1647412"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"what-weve-learned-in-a-nutshell","dir":"Articles","previous_headings":"","what":"What we‚Äôve learned in a nutshell","title":"Smooth quantile regression","text":"Smooth quantile regression used multi-period forecasting predicting several horizons simultaneously single smooth curve. operates key assumption future response can approximated well smooth curve.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/smooth-qr.html","id":"attribution","dir":"Articles","previous_headings":"","what":"Attribution","title":"Smooth quantile regression","text":"information presented smooth quantile regression Tuzhilina et al., 2022.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"main-goal-of-the-addupdateremove-and-adjust-functions","dir":"Articles","previous_headings":"","what":"Main goal of the add/update/remove and adjust functions","title":"Using the add/update/remove and adjust functions","text":"primary goal update adjust functions allow user modify step, layer, epi_recipe, frosting, part epi_workflow create new object time wish make change pre-processing, fitting, post-processing. context pre-processing, goal update functions add/remove/update epi_recipe step . , add_epi_recipe(), update_epi_recipe(), remove_epi_recipe() add/update/remove entire epi_recipe epi_workflow well adjust_epi_recipe() adjust particular step epi_recipe epi_workflow step number name. model, one may Add_model(), Update_model(), Remove_model() epi_workflow.1 post-processing, goal update frosting object layer , add_frosting(), remove_frosting(), update_frosting() add/update/remove entire frosting object epi_workflow well adjust_frosting() adjust particular layer frosting epi_workflow number name. summary function uses processing step shown following table: Since adding/removing/updating frosting well adjusting layer frosting object proceeds way performing tasks epi_recipe, focus implementing epi_recipe vignette briefly go examples frosting object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"addupdateremove-an-epi_recipe-in-an-epi_workflow","dir":"Articles","previous_headings":"","what":"Add/update/remove an epi_recipe in an epi_workflow","title":"Using the add/update/remove and adjust functions","text":"start built-covid_case_death_rates dataset contains JHU daily COVID-19 cases deaths state take subset Nov.¬†1, 2021 Dec.¬†31, 2021 four states Alaska, California, New York, South Carolina. , construct simple epi_recipe object named r, lag death rates 0, 7, 14 days, lead death rate 14 days, omit NA values predictors outcomes (set skip = TRUE skip processing outcome variable recipe baked). add recipe epi_workflow object inputting r add_epi_recipe() function: may go add fitted linear model epi_workflow: stage, suppose decide overhaul recipe different set pre-processing steps want make multiple changes existing steps, desire keep remainder epi_workflow . can use update_epi_recipe() function trade current recipe r another recipe r2 wf follows: can see output wf depicts sequence steps r2 instead r, indicates update successful. longer approach achieve end use remove_epi_recipe() remove old recipe add_epi_recipe() add new one. hood, update_epi_recipe() function operates way. add_epi_recipe() remove_epi_recipe() functions offload workflows versions functions much possible. main reason using epipredict version ensure retain epi_workflow class. see , let‚Äôs look happens remove current epi_recipe using workflows::remove_recipe() inspect class wf: can observe wf longer epi_workflow workflow. demoted workflow. epi_workflows workflows, workflows epi_workflows, meaning may compatibility issues limitations tools may used epipredict package plain workflow object. Now, checked happens epi_recipe remove , note actually store change wf. Hence, epi_workflow remains unchanged. One thing notice workflow output model fit remains r recipe. illustrates important point - operations performed using old recipe updated automatically. careful fit model using new recipe, r2. Similarly, predictions made using old recipe, re-generated using version epi_workflow contains updated recipe. can use Update_model() replace model used wf, fit : Alternatively, may use Remove_model() followed Add_model() combination effect.","code":"jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\"), geo_value %in% c(\"ak\", \"ca\", \"ny\", \"sc\"))  jhu #> An `epi_df` object, 244 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 244 √ó 4 #>   geo_value time_value case_rate death_rate #>   <chr>     <date>         <dbl>      <dbl> #> 1 ak        2021-11-01      87.9      0.494 #> 2 ca        2021-11-01      15.6      0.241 #> 3 ny        2021-11-01      19.9      0.177 #> 4 sc        2021-11-01      16.0      0.531 #> 5 ak        2021-11-02      83.2      0.395 #> 6 ca        2021-11-02      15.4      0.200 #> # ‚Ñπ 238 more rows r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 14) %>%   step_naomit(all_predictors()) %>%   step_naomit(all_outcomes(), skip = TRUE) wf <- epi_workflow() %>%   add_epi_recipe(r)  wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: None #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 4 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #> 3. step_naomit() #> 4. step_naomit() #> # Fit a linear model wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  wf #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 4 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #> 3. step_naomit() #> 4. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>           0.43314           -0.75303            0.02903            0.09068 #> r2 <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 1, 7, 14)) %>%   step_epi_lag(case_rate, lag = c(0:7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- update_epi_recipe(wf, r2) wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>           0.43314           -0.75303            0.02903            0.09068 #> wf %>% class() # class before #> [1] \"epi_workflow\" \"workflow\" remove_recipe(wf) %>% class() # class after removing recipe using workflows function #> [1] \"workflow\" wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>           0.43314           -0.75303            0.02903            0.09068 #> # fit linear model wf <- Update_model(wf, linear_reg()) %>% fit(jhu) wf #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_1_death_rate   lag_7_death_rate   #>          0.290875          -0.156658           0.054776          -0.348165   #> lag_14_death_rate    lag_0_case_rate    lag_1_case_rate    lag_2_case_rate   #>         -0.303906           0.009033          -0.009466          -0.005362   #>   lag_3_case_rate    lag_4_case_rate    lag_5_case_rate    lag_6_case_rate   #>         -0.006236           0.004849           0.005536          -0.013340   #>   lag_7_case_rate   lag_14_case_rate   #>          0.011320           0.011674 #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"addupdateremove-a-frosting-object-in-an-epi_workflow","dir":"Articles","previous_headings":"","what":"Add/update/remove a frosting object in an epi_workflow","title":"Using the add/update/remove and adjust functions","text":"now generate create frosting object post-processing predictions. initial frosting object, f, simply implement predictions fitted epi_workflow: Suppose decide augment post-processing include threshold enforce predictions least 0. well, let‚Äôs include forecast target dates separate columns. update frosting leaving remainder epi_workflow , can use update_frosting() function follows: Internally, works removing old frosting followed adding new frosting, just like update recipe model. decide want frosting post-processing , can remove frosting object workflow make predictions follows: can see results p3 p1, simply prediction layer frosting post-processing container.","code":"f <- frosting() %>%   layer_predict()  wf1 <- wf %>% add_frosting(f) p1 <- forecast(wf1) p1 #> An `epi_df` object, 4 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 4 √ó 3 #>   geo_value time_value   .pred #>   <chr>     <date>       <dbl> #> 1 ak        2021-12-31 -0.206  #> 2 ca        2021-12-31  0.0992 #> 3 ny        2021-12-31  0.295  #> 4 sc        2021-12-31  0.351 # Update frosting in a workflow and predict f2 <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred) %>%   layer_add_forecast_date() %>%   layer_add_target_date()  wf2 <- wf1 %>% update_frosting(f2) p2 <- forecast(wf2) p2 #> An `epi_df` object, 4 x 5 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 4 √ó 5 #>   geo_value time_value  .pred forecast_date target_date #>   <chr>     <date>      <dbl> <date>        <date>      #> 1 ak        2021-12-31 0      2021-12-31    2022-01-07  #> 2 ca        2021-12-31 0.0992 2021-12-31    2022-01-07  #> 3 ny        2021-12-31 0.295  2021-12-31    2022-01-07  #> 4 sc        2021-12-31 0.351  2021-12-31    2022-01-07 update_frosting #> function (x, frosting, ...)  #> { #>     rlang::check_dots_empty() #>     x <- remove_frosting(x) #>     add_frosting(x, frosting) #> } #> <bytecode: 0x55599787bfa8> #> <environment: namespace:epipredict> wf3 <- wf2 %>% remove_frosting() p3 <- forecast(wf3) p3 #> An `epi_df` object, 4 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 4 √ó 3 #>   geo_value time_value   .pred #>   <chr>     <date>       <dbl> #> 1 ak        2021-12-31 -0.206  #> 2 ca        2021-12-31  0.0992 #> 3 ny        2021-12-31  0.295  #> 4 sc        2021-12-31  0.351"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"adjust-a-single-step-of-an-epi_recipe","dir":"Articles","previous_headings":"","what":"Adjust a single step of an epi_recipe","title":"Using the add/update/remove and adjust functions","text":"Suppose just want change single step epi_recipe (either standalone part epi_workflow). Instead replacing entire epi_recipe, can use adjust_epi_recipe() function. function, step adjusted indicated either step number name which_step parameter. , parameter name update value must inputted .... instance, suppose decide lead death_rate 14 days instead 7. may adjust step wf recipe setting which_step step number order operations, can obtained inspecting r2 tidy summary : Alternatively, may adjust step name specifying full name step, step_epi_ahead, which_step: least two steps recipe share name, specifying name which_step throw error adjust_epi_recipe() intended used modify multiple steps . way, , modify step name another indicate number ordering steps. example, r2 two steps named step_epi_lag - first step lag death rate, second lag case rate. want modify lags case_rate variable, specify step number 2 which_step. adjust recipe directly way adjust recipe workflow. main difference input wf first argument adjust_epi_recipe() rather r2. Note adjust r2 object directly, adjusting recipe epi_workflow. , modify step r2, change automatically transfer wf. need modify recipe wf directly (adjust_epi_recipe() wf) update recipe wf new epi_recipe undergone adjustment (using update_epi_recipe()):","code":"extract_preprocessor(wf) # step_epi_ahead is the third step in r2 #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Lagging: death_rate by 0, 1, 7, 14 #> 2. Lagging: case_rate by 0, 1, 2, 3, 4, 5, 6, 7, 14 #> 3. Leading: death_rate by 7 #> 4. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 5. ‚Ä¢ Removing rows with NA values in: all_outcomes() tidy(extract_preprocessor(wf)) # tidy tibble summary of r2 #> # A tibble: 5 √ó 6 #>   number operation type      trained skip  id              #>    <int> <chr>     <chr>     <lgl>   <lgl> <chr>           #> 1      1 step      epi_lag   FALSE   FALSE epi_lag_9QeuR   #> 2      2 step      epi_lag   FALSE   FALSE epi_lag_8HfdV   #> 3      3 step      epi_ahead FALSE   FALSE epi_ahead_HIyvQ #> 4      4 step      naomit    FALSE   FALSE naomit_vjF0H    #> 5      5 step      naomit    FALSE   TRUE  naomit_gF0fi  wf <- wf %>% adjust_epi_recipe(which_step = 3, ahead = 14) wf %>% adjust_epi_recipe(which_step = \"step_epi_ahead\", ahead = 14) # not overwrite r2 because same result #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_1_death_rate   lag_7_death_rate   #>          0.290875          -0.156658           0.054776          -0.348165   #> lag_14_death_rate    lag_0_case_rate    lag_1_case_rate    lag_2_case_rate   #>         -0.303906           0.009033          -0.009466          -0.005362   #>   lag_3_case_rate    lag_4_case_rate    lag_5_case_rate    lag_6_case_rate   #>         -0.006236           0.004849           0.005536          -0.013340   #>   lag_7_case_rate   lag_14_case_rate   #>          0.011320           0.011674 #> wf <- wf %>% adjust_epi_recipe(which_step = 2, lag = c(0, 1, 7, 14, 21))  extract_preprocessor(wf) #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Lagging: death_rate by 0, 1, 7, 14 #> 2. Lagging: case_rate by 0, 1, 7, 14, 21 #> 3. Leading: death_rate by 14 #> 4. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 5. ‚Ä¢ Removing rows with NA values in: all_outcomes() adjust_epi_recipe(r2, which_step = 2, lag = c(0, 1, 7, 14, 21)) # should be same result as above #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Lagging: death_rate by 0, 1, 7, 14 #> 2. Lagging: case_rate by 0, 1, 7, 14, 21 #> 3. Leading: death_rate by 7 #> 4. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 5. ‚Ä¢ Removing rows with NA values in: all_outcomes() r2 <- adjust_epi_recipe(r2, which_step = 2, lag = 0:21)  extract_preprocessor(wf) #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Lagging: death_rate by 0, 1, 7, 14 #> 2. Lagging: case_rate by 0, 1, 7, 14, 21 #> 3. Leading: death_rate by 14 #> 4. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 5. ‚Ä¢ Removing rows with NA values in: all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"adjust-a-single-layer-of-a-frosting","dir":"Articles","previous_headings":"","what":"Adjust a single layer of a frosting","title":"Using the add/update/remove and adjust functions","text":"Adjusting layer frosting object proceeds way adjusting step epi_recipe . want change single layer frosting (either standalone object part epi_workflow), can use adjust_frosting() function wherein layer adjusted indicated either number name which_layer parameter. addition, argument name update value must inputted .... Let‚Äôs work frosting object directly instead working epi_workflow simple, illustrative example. Recall frosting f2 following layers: Suppose decide change upper bound prediction threshold 10 instead Inf. can adjust layer frosting object setting which_layer layer number, 3 (can found inspecting f2 tidy(f2)): Alternatively, may adjust layer specifying full name, layer_threshold, which_layer, achieve result:","code":"f2 #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, Inf) #> 3. Adding forecast date: \"<calculated>\" #> 4. Adding target date: \"<calculated>\" f2 <- f2 %>% adjust_frosting(which_layer = 2, upper = 10)  f2 #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 10] #> 3. Adding forecast date: \"<calculated>\" #> 4. Adding target date: \"<calculated>\" f2 %>% adjust_frosting(which_layer = \"layer_threshold\", upper = 10) # not overwrite f2 because same result #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 10] #> 3. Adding forecast date: \"<calculated>\" #> 4. Adding target date: \"<calculated>\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/articles/update.html","id":"on-the-tidy-method-to-inspect-an-epi_recipe-or-a-frosting-object","dir":"Articles","previous_headings":"","what":"On the tidy method to inspect an epi_recipe or a frosting object","title":"Using the add/update/remove and adjust functions","text":"tidy method, used epi_recipe, return data frame contains specific overview information recipe including operation number, operation class (either ‚Äústep‚Äù ‚Äúcheck‚Äù), type method, boolean value indicate whether prep() used estimate operation, boolean value indicate whether step applied bake() called, id operation. contrast, printing epi_recipe object shows inputs (number roles variables) well ordering brief written summary operations: general structure persists compare output frosting object tidy tibble. However, longer output specific recipe roles recipe output trained skip columns tidy tibble . Thus, output frosting object tidy tibble simplified comparison epi_recipe.","code":"tidy(r2) #> # A tibble: 5 √ó 6 #>   number operation type      trained skip  id              #>    <int> <chr>     <chr>     <lgl>   <lgl> <chr>           #> 1      1 step      epi_lag   FALSE   FALSE epi_lag_9QeuR   #> 2      2 step      epi_lag   FALSE   FALSE epi_lag_8HfdV   #> 3      3 step      epi_ahead FALSE   FALSE epi_ahead_HIyvQ #> 4      4 step      naomit    FALSE   FALSE naomit_vjF0H    #> 5      5 step      naomit    FALSE   TRUE  naomit_gF0fi r2 #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations #> 1. Lagging: death_rate by 0, 1, 7, 14 #> 2. Lagging: case_rate by 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, #> 15, #> 3. 16, 17, 18,... #> 4. Leading: death_rate by 7 #> 5. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 6. ‚Ä¢ Removing rows with NA values in: all_outcomes() f #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers #> 1. Creating predictions: \"<calculated>\"  tidy(f) #> # A tibble: 1 √ó 4 #>   number operation type    id                    #>    <int> <chr>     <chr>   <chr>                 #> 1      1 layer     predict predict_default_qZ3vE"},{"path":"https://cmu-delphi.github.io/epipredict/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel J. McDonald. Author, maintainer. Ryan Tibshirani. Author. Dmitry Shemetov. Author. David Weber. Author. Delphi Research Group. Copyright holder, funder. Logan Brooks. Author. Rachel Lobay. Author. Maggie Liu. Contributor. Ken Mawer. Contributor. Chloe . Contributor. Jacob Bien. Contributor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"McDonald D, Tibshirani R, Shemetov D, Weber D, Brooks L, Lobay R (2025). epipredict: Basic epidemiology forecasting methods. R package version 0.1.13, https://cmu-delphi.github.io/epipredict, https://github.com/cmu-delphi/epipredict/.","code":"@Manual{,   title = {epipredict: Basic epidemiology forecasting methods},   author = {Daniel J. McDonald and Ryan Tibshirani and Dmitry Shemetov and David Weber and Logan Brooks and Rachel Lobay},   year = {2025},   note = {R package version 0.1.13,     https://cmu-delphi.github.io/epipredict},   url = {https://github.com/cmu-delphi/epipredict/}, }"},{"path":"https://cmu-delphi.github.io/epipredict/dev/index.html","id":"epipredict","dir":"","previous_headings":"","what":"Basic epidemiology forecasting methods","title":"Basic epidemiology forecasting methods","text":"Note: package currently development may work expected. Please file bug reports issues repo, best address quickly.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Basic epidemiology forecasting methods","text":"install (unless ‚Äôre making changes package, use stable version):","code":"# Stable version pak::pkg_install(\"cmu-delphi/epipredict@main\")  # Dev version pak::pkg_install(\"cmu-delphi/epipredict@dev\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Basic epidemiology forecasting methods","text":"can view documentation main branch https://cmu-delphi.github.io/epipredict.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/index.html","id":"goals-for-epipredict","dir":"","previous_headings":"","what":"Goals for epipredict","title":"Basic epidemiology forecasting methods","text":"hope provide: Baseline flatline forecaster Autoregressive forecaster Autoregressive classifier CDC FluSight flatline forecaster Preprocessor: things data model training Trainer: train model data, resulting fitted model object Predictor: make predictions, using fitted model object Postprocessor: things predictions returning Target audiences: Basic. data, calls forecaster default arguments. Intermediate. Wants examine changes arguments, take advantage built flexibility. Advanced. Wants write forecasters. Maybe willing build components. Advanced user find task relatively easy. Examples tasks illustrated vignettes articles. See also (progress) Forecasting Book.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/index.html","id":"intermediate-example","dir":"","previous_headings":"","what":"Intermediate example","title":"Basic epidemiology forecasting methods","text":"package comes built-historical data illustration, --date versions downloaded {epidatr} package processed using {epiprocess}.1 create train simple auto-regressive forecaster predict death rate two weeks future using past (lagged) deaths cases, use following function. case, used number different lags case rate, using 3 weekly lags death rate (predictors). result fitted model object used time future create different forecasts, well set predicted values (prediction intervals) location 14 days last available time value data. fitted model involved preprocessing data appropriately generate lagged predictors, estimating linear model stats::lm() postprocessing results meaningful epidemiological tasks. can also examine predictions. results show distributional forecast produced using data end 2021 14th January 2022. prediction death rate per 100K inhabitants available every state (geo_value) along 90% predictive interval.","code":"library(epipredict) covid_case_death_rates #> An `epi_df` object, 20,496 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 20,496 √ó 4 #>    geo_value time_value case_rate death_rate #>  * <chr>     <date>         <dbl>      <dbl> #>  1 ak        2020-12-31      35.9      0.158 #>  2 al        2020-12-31      65.1      0.438 #>  3 ar        2020-12-31      66.0      1.27  #>  4 as        2020-12-31       0        0     #>  5 az        2020-12-31      76.8      1.10  #>  6 ca        2020-12-31      95.9      0.755 #>  7 co        2020-12-31      37.8      0.376 #>  8 ct        2020-12-31      52.1      0.819 #>  9 dc        2020-12-31      31.0      0.601 #> 10 de        2020-12-31      64.3      0.912 #> # ‚Ñπ 20,486 more rows two_week_ahead <- arx_forecaster(   covid_case_death_rates,   outcome = \"death_rate\",   predictors = c(\"case_rate\", \"death_rate\"),   args_list = arx_args_list(     lags = list(c(0, 1, 2, 3, 7, 14), c(0, 7, 14)),     ahead = 14   ) ) two_week_ahead #> ‚ïê‚ïê A basic forecaster of type ARX Forecaster ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #>  #> This forecaster was fit on 2025-02-11 12:32:56. #>  #> Training data was an <epi_df> with: #> ‚Ä¢ Geography: state, #> ‚Ä¢ Time type: day, #> ‚Ä¢ Using data up-to-date as of: 2023-03-10. #> ‚Ä¢ With the last data available on 2021-12-31 #>  #> ‚îÄ‚îÄ Predictions ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> A total of 56 predictions are available for #> ‚Ä¢ 56 unique geographic regions, #> ‚Ä¢ At forecast date: 2021-12-31, #> ‚Ä¢ For target date: 2022-01-14, #> two_week_ahead$epi_workflow #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 6 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #> 6. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)    lag_0_case_rate    lag_1_case_rate    lag_2_case_rate   #>        -0.0071026          0.0040340          0.0007863          0.0003699   #>   lag_3_case_rate    lag_7_case_rate   lag_14_case_rate   lag_0_death_rate   #>         0.0012887          0.0011980          0.0002527          0.1348573   #>  lag_7_death_rate  lag_14_death_rate   #>         0.1479274          0.1067074 #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Frosting layers. #> 1. layer_predict() #> 2. layer_residual_quantiles() #> 3. layer_add_forecast_date() #> 4. layer_add_target_date() #> 5. layer_threshold() #> two_week_ahead$predictions #> # A tibble: 56 √ó 5 #>    geo_value .pred        .pred_distn forecast_date target_date #>    <chr>     <dbl>             <dist> <date>        <date>      #>  1 ak        0.450 quantiles(0.45)[7] 2021-12-31    2022-01-14  #>  2 al        0.602  quantiles(0.6)[7] 2021-12-31    2022-01-14  #>  3 ar        0.694 quantiles(0.69)[7] 2021-12-31    2022-01-14  #>  4 as        0        quantiles(0)[7] 2021-12-31    2022-01-14  #>  5 az        0.699  quantiles(0.7)[7] 2021-12-31    2022-01-14  #>  6 ca        0.592 quantiles(0.59)[7] 2021-12-31    2022-01-14  #>  7 co        1.47  quantiles(1.47)[7] 2021-12-31    2022-01-14  #>  8 ct        1.08  quantiles(1.08)[7] 2021-12-31    2022-01-14  #>  9 dc        2.14  quantiles(2.14)[7] 2021-12-31    2022-01-14  #> 10 de        1.13  quantiles(1.13)[7] 2021-12-31    2022-01-14  #> # ‚Ñπ 46 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a model to an epi_workflow ‚Äî Add_model","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"Add model epi_workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"","code":"Add_model(x, spec, ..., formula = NULL)  Remove_model(x)  Update_model(x, spec, ..., formula = NULL)  # S3 method for class 'epi_workflow' Add_model(x, spec, ..., formula = NULL)  # S3 method for class 'epi_workflow' Remove_model(x)  # S3 method for class 'epi_workflow' Update_model(x, spec, ..., formula = NULL)  # S3 method for class 'workflow' Add_model(x, spec, ..., formula = NULL)  # S3 method for class 'workflow' Remove_model(x)  # S3 method for class 'workflow' Update_model(x, spec, ..., formula = NULL)  add_model(x, spec, ..., formula = NULL)  remove_model(x)  update_model(x, spec, ..., formula = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"x epi_workflow. spec parsnip model specification. ... used. formula optional formula override specify terms model. Typically, terms extracted formula recipe preprocessing methods. However, models (like survival bayesian models) use formula preprocess, specify structure model. cases, formula specifying model structure must passed unchanged model call . argument used purposes.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"x, updated new, updated, removed model.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"behaviour workflows::add_model() also ensures returned object epi_workflow. family called Add_* / Update_* / Remove_* avoid masking related functions {workflows}. also provide aliases lower-case names. However, event {workflows} loaded {epipredict}, may fail function properly.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/Add_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a model to an epi_workflow ‚Äî Add_model","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7)  rf_model <- rand_forest(mode = \"regression\")  wf <- epi_workflow(r)  wf <- wf %>% Add_model(rf_model) wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: rand_forest() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 2 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Random Forest Model Specification (regression) #>  #> Computational engine: ranger  #>  #>   lm_model <- linear_reg()  wf <- Update_model(wf, lm_model) wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 2 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>  #>   wf <- Remove_model(wf) wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: None #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 2 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #>  #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"Add epi_recipe workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"","code":"add_epi_recipe(x, recipe, ..., blueprint = default_epi_recipe_blueprint())  remove_epi_recipe(x)  update_epi_recipe(x, recipe, ..., blueprint = default_epi_recipe_blueprint())"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"x workflow epi_workflow recipe epi recipe recipe ... used blueprint hardhat blueprint used fine tuning preprocessing default_epi_recipe_blueprint() used. Note preprocessing done separate preprocessing might done automatically underlying model.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"x, updated new recipe preprocessor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"add_epi_recipe behaviour workflows::add_recipe() sets different default blueprint automatically handle epiprocess::epi_df data.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_epi_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an epi_recipe to a workflow ‚Äî add_epi_recipe","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-08-01\")  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_naomit()  workflow <- epi_workflow() %>%   add_epi_recipe(r)  workflow #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: None #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #> 3. step_epi_lag() #> 4. step_naomit() #> 5. step_naomit() #>  #>   r2 <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7)  workflow <- update_epi_recipe(workflow, r2)  workflow <- remove_epi_recipe(workflow)  workflow #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: None #> Model: None #> Postprocessor: None #>  #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Add frosting to a workflow ‚Äî add_frosting","title":"Add frosting to a workflow ‚Äî add_frosting","text":"Add frosting workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add frosting to a workflow ‚Äî add_frosting","text":"","code":"add_frosting(x, frosting, ...)  remove_frosting(x)  update_frosting(x, frosting, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add frosting to a workflow ‚Äî add_frosting","text":"x workflow frosting frosting object created using frosting(). ... used.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add frosting to a workflow ‚Äî add_frosting","text":"x, updated new frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add frosting to a workflow ‚Äî add_frosting","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7)  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu) latest <- jhu %>%   filter(time_value >= max(time_value) - 14)  # Add frosting to a workflow and predict f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f) p1 <- predict(wf1, latest) p1 #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.312 #> 3 ny        2021-12-31 0.295  # Update frosting in a workflow and predict f2 <- frosting() %>% layer_predict() wf2 <- wf1 %>% update_frosting(f2) p2 <- predict(wf2, latest) p2 #> An `epi_df` object, 108 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 108 √ó 3 #>    geo_value time_value .pred #>    <chr>     <date>     <dbl> #>  1 ak        2021-12-10    NA #>  2 ca        2021-12-10    NA #>  3 ny        2021-12-10    NA #>  4 ak        2021-12-11    NA #>  5 ca        2021-12-11    NA #>  6 ny        2021-12-11    NA #>  7 ak        2021-12-12    NA #>  8 ca        2021-12-12    NA #>  9 ny        2021-12-12    NA #> 10 ak        2021-12-13    NA #> # ‚Ñπ 98 more rows  # Remove frosting from the workflow and predict wf3 <- wf2 %>% remove_frosting() p3 <- predict(wf3, latest) p3 #> An `epi_df` object, 108 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 108 √ó 3 #>    geo_value time_value .pred #>    <chr>     <date>     <dbl> #>  1 ak        2021-12-10    NA #>  2 ca        2021-12-10    NA #>  3 ny        2021-12-10    NA #>  4 ak        2021-12-11    NA #>  5 ca        2021-12-11    NA #>  6 ny        2021-12-11    NA #>  7 ak        2021-12-12    NA #>  8 ca        2021-12-12    NA #>  9 ny        2021-12-12    NA #> 10 ak        2021-12-13    NA #> # ‚Ñπ 98 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Add layer to a frosting object ‚Äî add_layer","title":"Add layer to a frosting object ‚Äî add_layer","text":"Add layer frosting object","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add layer to a frosting object ‚Äî add_layer","text":"","code":"add_layer(frosting, object)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add layer to a frosting object ‚Äî add_layer","text":"frosting frosting postprocessor object frosting layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add layer to a frosting object ‚Äî add_layer","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_shifted_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"backend for both bake.step_epi_ahead and bake.step_epi_lag, performs the checks missing in epi_shift_single ‚Äî add_shifted_columns","title":"backend for both bake.step_epi_ahead and bake.step_epi_lag, performs the checks missing in epi_shift_single ‚Äî add_shifted_columns","text":"backend bake.step_epi_ahead bake.step_epi_lag, performs checks missing epi_shift_single","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/add_shifted_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"backend for both bake.step_epi_ahead and bake.step_epi_lag, performs the checks missing in epi_shift_single ‚Äî add_shifted_columns","text":"","code":"add_shifted_columns(new_data, object)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"Make parameter adjustment step either epi_workflow epi_recipe object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"","code":"adjust_epi_recipe(   x,   which_step,   ...,   blueprint = default_epi_recipe_blueprint() )  # S3 method for class 'epi_workflow' adjust_epi_recipe(   x,   which_step,   ...,   blueprint = default_epi_recipe_blueprint() )  # S3 method for class 'epi_recipe' adjust_epi_recipe(   x,   which_step,   ...,   blueprint = default_epi_recipe_blueprint() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"x epi_workflow epi_recipe object which_step number name step adjust ... Used input parameter adjustment blueprint hardhat blueprint used fine tuning preprocessing.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"x, updated adjustment specified epi_recipe step.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"function can either adjust step epi_recipe object step epi_recipe object epi_workflow. step adjusted indicated either step number name (name used, must unique). either case, argument name update value must inputted .... See examples brief illustrations different types updates.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_epi_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust a step in an epi_workflow or epi_recipe ‚Äî adjust_epi_recipe","text":"","code":"library(workflows) #>  #> Attaching package: ‚Äòworkflows‚Äô #> The following objects are masked from ‚Äòpackage:epipredict‚Äô: #>  #>     add_model, remove_model, update_model  jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>% fit(jhu) latest <- jhu %>%   filter(time_value >= max(time_value) - 14)  # Adjust `step_epi_ahead` to have an ahead value of 14 # in the `epi_workflow` # Option 1. Using the step number: wf2 <- wf %>% adjust_epi_recipe(which_step = 2, ahead = 14) extract_preprocessor(wf2) #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Lagging: death_rate by 0, 7, 14 #> 2. Leading: death_rate by 14 #> 3. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 4. ‚Ä¢ Removing rows with NA values in: all_outcomes() # Option 2. Using the step name: wf3 <- wf %>% adjust_epi_recipe(which_step = \"step_epi_ahead\", ahead = 14) extract_preprocessor(wf3) #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Lagging: death_rate by 0, 7, 14 #> 2. Leading: death_rate by 14 #> 3. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 4. ‚Ä¢ Removing rows with NA values in: all_outcomes()  # Adjust `step_epi_ahead` to have an ahead value of 14 # in the `epi_recipe` # Option 1. Using the step number r2 <- r %>% adjust_epi_recipe(which_step = 2, ahead = 14) r2 #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Lagging: death_rate by 0, 7, 14 #> 2. Leading: death_rate by 14 #> 3. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 4. ‚Ä¢ Removing rows with NA values in: all_outcomes() # Option 2. Using the step name r3 <- r %>% adjust_epi_recipe(which_step = \"step_epi_ahead\", ahead = 14) r3 #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Lagging: death_rate by 0, 7, 14 #> 2. Leading: death_rate by 14 #> 3. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 4. ‚Ä¢ Removing rows with NA values in: all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"Make parameter adjustment layer either epi_workflow frosting object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"","code":"adjust_frosting(x, which_layer, ...)  # S3 method for class 'epi_workflow' adjust_frosting(x, which_layer, ...)  # S3 method for class 'frosting' adjust_frosting(x, which_layer, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"x epi_workflow frosting object which_layer number name layer adjust ... Used input parameter adjustment","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"x, updated adjustment specified frosting layer.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"function can either adjust layer frosting object layer frosting object epi_workflow. layer adjusted indicated either layer number name (name used, must unique). either case, argument name update value must inputted .... See examples brief illustrations different types updates.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/adjust_frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust a layer in an epi_workflow or frosting ‚Äî adjust_frosting","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  # in the frosting from the workflow f1 <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred)  wf2 <- wf %>% add_frosting(f1)  # Adjust `layer_threshold` to have an upper bound of 1 # in the `epi_workflow` # Option 1. Using the layer number: wf2 <- wf2 %>% adjust_frosting(which_layer = 2, upper = 1) extract_frosting(wf2) #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers  #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 1] # Option 2. Using the layer name: wf3 <- wf2 %>% adjust_frosting(which_layer = \"layer_threshold\", upper = 1) extract_frosting(wf3) #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers  #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 1]  # Adjust `layer_threshold` to have an upper bound of 5 # in the `frosting` object # Option 1. Using the layer number: f2 <- f1 %>% adjust_frosting(which_layer = 2, upper = 5) f2 #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers  #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 5] # Option 2. Using the layer name f3 <- f1 %>% adjust_frosting(which_layer = \"layer_threshold\", upper = 5) f3 #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers  #> 1. Creating predictions: \"<calculated>\" #> 2. Thresholding predictions: .pred to [0, 5]"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/apply_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply postprocessing to a fitted workflow ‚Äî apply_frosting","title":"Apply postprocessing to a fitted workflow ‚Äî apply_frosting","text":"function intended internal use. implements postprocessing inside predict() method fitted workflow.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/apply_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply postprocessing to a fitted workflow ‚Äî apply_frosting","text":"","code":"apply_frosting(workflow, ...)  # Default S3 method apply_frosting(workflow, components, ...)  # S3 method for class 'epi_workflow' apply_frosting(workflow, components, new_data, type = NULL, opts = list(), ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/apply_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply postprocessing to a fitted workflow ‚Äî apply_frosting","text":"workflow object class workflow ... additional arguments passed methods components list components containing model information. updated returned layer. mold - output calling hardhat::mold() workflow. contains information preprocessing, including recipe. forged - output calling hardhat::forge() workflow. predictors outcomes new_data. three components predictors, outcomes (new_data), extras (usually rest data, including keys). keys - put keys (time_value, geo_value, others) ease. new_data data frame containing new predictors preprocess predict type, opts forwarded (along ...) predict.model_fit() slather() supported layers","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ARX forecaster argument constructor ‚Äî arx_args_list","title":"ARX forecaster argument constructor ‚Äî arx_args_list","text":"Constructs list arguments arx_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARX forecaster argument constructor ‚Äî arx_args_list","text":"","code":"arx_args_list(   lags = c(0L, 7L, 14L),   ahead = 7L,   n_training = Inf,   forecast_date = NULL,   target_date = NULL,   adjust_latency = c(\"none\", \"extend_ahead\", \"extend_lags\", \"locf\"),   warn_latency = TRUE,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = character(0L),   check_enough_data_n = NULL,   check_enough_data_epi_keys = NULL,   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARX forecaster argument constructor ‚Äî arx_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models (days). default, unnamed list lags set correspond order predictors. ahead Integer. Number time steps ahead (days) forecast date forecasts produced. n_training Integer. upper limit number rows per key used training (time unit epi_df). forecast_date Date. date forecast occurring. default NULL determine automatically either maximum time value data latency adjustment (default case), as_of date epi_data adjust_latency non-NULL. target_date Date. date forecast. default NULL determine automatically forecast_date + ahead. adjust_latency Character. One methods step_adjust_latency(), \"none\" (case adjustment). forecast_date last day data, determines shift model account difference. options : \"none\" default, assumes forecast_date last day data \"extend_ahead\": increase ahead latency relative last day data. example, last day data 3 days ago, ahead becomes ahead+3. \"extend_lags\": increase lags relative actual forecast date. example, lags c(0, 7, 14) last day data 3 days ago, lags become c(3, 10, 17). warn_latency default, step_adjust_latency warns user latency large. FALSE, warning turned . quantile_levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . symmetrize Logical. default TRUE calculates symmetric prediction intervals. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. nonneg Logical. default TRUE enforces nonnegative predictions hard-thresholding 0. quantile_by_key Character vector. Groups residuals listed keys calculating residual quantiles. See by_key argument layer_residual_quantiles() information. default, character(0) performs grouping. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. check_enough_data_n Integer. lower limit number rows per epi_key required training. NULL, check ignored. check_enough_data_epi_keys Character vector. character vector column names group data check threshold within group. Useful training per group (example, per geo_value). ... Space handle future expansions (unused).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARX forecaster argument constructor ‚Äî arx_args_list","text":"list containing updated parameter choices class arx_flist.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARX forecaster argument constructor ‚Äî arx_args_list","text":"","code":"arx_args_list() #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ warn_latency : TRUE #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ quantile_by_key : \"_empty_\" #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\" arx_args_list(symmetrize = FALSE) #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ warn_latency : TRUE #> ‚Ä¢ symmetrize : FALSE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ quantile_by_key : \"_empty_\" #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\" arx_args_list(quantile_levels = c(.1, .3, .7, .9), n_training = 120) #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : 120 #> ‚Ä¢ quantile_levels : 0.1, 0.3, 0.7, and 0.9 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ warn_latency : TRUE #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ quantile_by_key : \"_empty_\" #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ARX classifier argument constructor ‚Äî arx_class_args_list","title":"ARX classifier argument constructor ‚Äî arx_class_args_list","text":"Constructs list arguments arx_classifier().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARX classifier argument constructor ‚Äî arx_class_args_list","text":"","code":"arx_class_args_list(   lags = c(0L, 7L, 14L),   ahead = 7L,   n_training = Inf,   forecast_date = NULL,   target_date = NULL,   adjust_latency = c(\"none\", \"extend_ahead\", \"extend_lags\", \"locf\"),   warn_latency = TRUE,   outcome_transform = c(\"growth_rate\", \"lag_difference\"),   breaks = 0.25,   horizon = 7L,   method = c(\"rel_change\", \"linear_reg\"),   log_scale = FALSE,   check_enough_data_n = NULL,   check_enough_data_epi_keys = NULL,   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARX classifier argument constructor ‚Äî arx_class_args_list","text":"lags Vector List. Positive integers enumerating lags use autoregressive-type models (days). default, unnamed list lags set correspond order predictors. ahead Integer. Number time steps ahead (days) forecast date forecasts produced. n_training Integer. upper limit number rows per key used training (time unit epi_df). forecast_date Date. date forecast occurring. default NULL determine automatically either maximum time value data latency adjustment (default case), as_of date epi_data adjust_latency non-NULL. target_date Date. date forecast. default NULL determine automatically forecast_date + ahead. adjust_latency Character. One methods step_adjust_latency(), \"none\" (case adjustment). forecast_date last day data, determines shift model account difference. options : \"none\" default, assumes forecast_date last day data \"extend_ahead\": increase ahead latency relative last day data. example, last day data 3 days ago, ahead becomes ahead+3. \"extend_lags\": increase lags relative actual forecast date. example, lags c(0, 7, 14) last day data 3 days ago, lags become c(3, 10, 17). warn_latency default, step_adjust_latency warns user latency large. FALSE, warning turned . outcome_transform Scalar character. Whether outcome created using growth rates (predictors ) lagged differences. second case closer requirements 2022-23 CDC Flusight Hospitalization Experimental Target. See Classification Vignette details create reasonable baseline case. Selecting \"growth_rate\" (default) uses epiprocess::growth_rate() create outcome using additional arguments . Choosing \"lag_difference\" instead simply uses change value selected horizon. breaks Vector. vector breaks turn real-valued growth rates discrete classes. default gives binary upswing classification McDonald, Bien, Green, Hu, et al.. coincides default trainer = parsnip::logistic_reg() argument arx_classifier(). However, multiclass classification also supported (e.g. breaks = c(-.2, .25)) provided trainer = parsnip::multinom_reg() (another multiclass trainer) used well. sliently expanded cover entire real line (default become breaks = c(-Inf, .25, Inf)) used discretize response. different behaviour recipes::step_cut() creates classes cover range training data. horizon Scalar integer. passed h argument epiprocess::growth_rate(). determines amount data used calculate growth rate. method Character. Options available growth rate calculation. log_scale Scalar logical. Whether compute growth rates log scale. check_enough_data_n Integer. lower limit number rows per epi_key required training. NULL, check ignored. check_enough_data_epi_keys Character vector. character vector column names group data check threshold within group. Useful training per group (example, per geo_value). ... Space handle future expansions (unused).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARX classifier argument constructor ‚Äî arx_class_args_list","text":"list containing updated parameter choices class arx_clist.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARX classifier argument constructor ‚Äî arx_class_args_list","text":"","code":"arx_class_args_list() #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ breaks : -Inf, 0.25, and Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ outcome_transform : \"growth_rate\" #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ horizon : 7 #> ‚Ä¢ method : \"rel_change\" #> ‚Ä¢ log_scale : FALSE #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\"  # 3-class classsification, # also needs arx_classifier(trainer = parsnip::multinom_reg()) arx_class_args_list(breaks = c(-.2, .25)) #> ‚Ä¢ lags : 0, 7, and 14 #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ breaks : -Inf, -0.2, 0.25, and Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ adjust_latency : \"none\" #> ‚Ä¢ outcome_transform : \"growth_rate\" #> ‚Ä¢ max_lags : 14 #> ‚Ä¢ horizon : 7 #> ‚Ä¢ method : \"rel_change\" #> ‚Ä¢ log_scale : FALSE #> ‚Ä¢ check_enough_data_n : \"NULL\" #> ‚Ä¢ check_enough_data_epi_keys : \"NULL\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","title":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","text":"function creates unfit workflow use arx_classifier(). useful want make small modifications classifier fitting predicting. Supplying trainer function may alter returned epi_workflow object can omitted.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","text":"","code":"arx_class_epi_workflow(   epi_data,   outcome,   predictors,   trainer = parsnip::logistic_reg(),   args_list = arx_class_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","text":"epi_data epi_df object outcome character (scalar) specifying outcome (epi_df). Note arx_forecaster(), expected real-valued. Conversion data unordered classes handled internally based breaks argument arx_class_args_list(). discrete classes already epi_df, recommended code classifier scratch using epi_recipe(). predictors character vector giving column(s) predictor variables. defaults outcome. However, manually specified, variables specifically mentioned used. (outcome added.) default, equals outcome. manually specified, add outcome variable, make sure specify . trainer {parsnip} model describing type estimation. now, enforce mode = \"classification\". Typical values parsnip::logistic_reg() parsnip::multinom_reg(). complicated trainers like parsnip::naive_Bayes() parsnip::rand_forest() can also used. May NULL like decide later. args_list list customization arguments determine type forecasting model. See arx_class_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","text":"unfit epi_workflow.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_class_epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a template arx_classifier workflow ‚Äî arx_class_epi_workflow","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\"))  arx_class_epi_workflow(jhu, \"death_rate\", c(\"case_rate\", \"death_rate\")) #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: logistic_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 8 Recipe steps. #> 1. step_growth_rate() #> 2. step_epi_lag() #> 3. step_epi_lag() #> 4. step_epi_ahead() #> 5. step_mutate() #> 6. step_naomit() #> 7. step_naomit() #> 8. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Logistic Regression Model Specification (classification) #>  #> Computational engine: glm  #>  #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 3 Frosting layers. #> 1. layer_predict() #> 2. layer_add_forecast_date() #> 3. layer_add_target_date() #>   arx_class_epi_workflow(   jhu,   \"death_rate\",   c(\"case_rate\", \"death_rate\"),   trainer = multinom_reg(),   args_list = arx_class_args_list(     breaks = c(-.05, .1), ahead = 14,     horizon = 14, method = \"linear_reg\"   ) ) #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: multinom_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 8 Recipe steps. #> 1. step_growth_rate() #> 2. step_epi_lag() #> 3. step_epi_lag() #> 4. step_epi_ahead() #> 5. step_mutate() #> 6. step_naomit() #> 7. step_naomit() #> 8. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Multinomial Regression Model Specification (classification) #>  #> Computational engine: nnet  #>  #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 3 Frosting layers. #> 1. layer_predict() #> 2. layer_add_forecast_date() #> 3. layer_add_target_date() #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_classifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","title":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","text":"autoregressive classification model epiprocess::epi_df data. \"direct\" forecasting, meaning estimates class particular target horizon.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_classifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","text":"","code":"arx_classifier(   epi_data,   outcome,   predictors,   trainer = logistic_reg(),   args_list = arx_class_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_classifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","text":"epi_data epi_df object outcome character (scalar) specifying outcome (epi_df). Note arx_forecaster(), expected real-valued. Conversion data unordered classes handled internally based breaks argument arx_class_args_list(). discrete classes already epi_df, recommended code classifier scratch using epi_recipe(). predictors character vector giving column(s) predictor variables. defaults outcome. However, manually specified, variables specifically mentioned used. (outcome added.) default, equals outcome. manually specified, add outcome variable, make sure specify . trainer {parsnip} model describing type estimation. now, enforce mode = \"classification\". Typical values parsnip::logistic_reg() parsnip::multinom_reg(). complicated trainers like parsnip::naive_Bayes() parsnip::rand_forest() can also used. args_list list customization arguments determine type forecasting model. See arx_class_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_classifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","text":"list (1) predictions epi_df predicted classes (2) epi_workflow, list encapsulates entire estimation workflow","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_classifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct autoregressive classifier with covariates ‚Äî arx_classifier","text":"","code":"tiny_geos <- c(\"as\", \"mp\", \"vi\", \"gu\", \"pr\") jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\"), !(geo_value %in% tiny_geos))  out <- arx_classifier(jhu, \"death_rate\", c(\"case_rate\", \"death_rate\")) #> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred  out <- arx_classifier(   jhu,   \"death_rate\",   c(\"case_rate\", \"death_rate\"),   trainer = parsnip::multinom_reg(),   args_list = arx_class_args_list(     breaks = c(-.05, .1), ahead = 14,     horizon = 14, method = \"linear_reg\"   ) )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_fcast_epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","title":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","text":"function creates unfit workflow use arx_forecaster(). useful want make small modifications forecaster fitting predicting. Supplying trainer function may alter returned epi_workflow object (e.g., intend use quantile_reg()) can omitted.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_fcast_epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","text":"","code":"arx_fcast_epi_workflow(   epi_data,   outcome,   predictors = outcome,   trainer = linear_reg(),   args_list = arx_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_fcast_epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","text":"epi_data epi_df object outcome character (scalar) specifying outcome (epi_df). predictors character vector giving column(s) predictor variables. defaults outcome. However, manually specified, variables specifically mentioned used. (outcome added.) default, equals outcome. manually specified, add outcome variable, make sure specify . trainer {parsnip} model describing type estimation. now, enforce mode = \"regression\". May NULL like decide later. args_list list customization arguments determine type forecasting model. See arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_fcast_epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","text":"unfitted epi_workflow.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_fcast_epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a template arx_forecaster workflow ‚Äî arx_fcast_epi_workflow","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-12-01\"))  arx_fcast_epi_workflow(   jhu, \"death_rate\",   c(\"case_rate\", \"death_rate\") ) #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 6 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #> 6. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>  #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Frosting layers. #> 1. layer_predict() #> 2. layer_residual_quantiles() #> 3. layer_add_forecast_date() #> 4. layer_add_target_date() #> 5. layer_threshold() #>   arx_fcast_epi_workflow(jhu, \"death_rate\",   c(\"case_rate\", \"death_rate\"),   trainer = quantile_reg(),   args_list = arx_args_list(quantile_levels = 1:9 / 10) ) #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: quantile_reg() #> Postprocessor: Frosting #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 6 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_lag() #> 3. step_epi_ahead() #> 4. step_naomit() #> 5. step_naomit() #> 6. step_training_window() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> quantile reg Model Specification (regression) #>  #> Main Arguments: #>   quantile_levels = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9) #>   method = br #>  #> Computational engine: rq  #>  #>  #> ‚îÄ‚îÄ Postprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 6 Frosting layers. #> 1. layer_predict() #> 2. layer_quantile_distn() #> 3. layer_point_from_distn() #> 4. layer_add_forecast_date() #> 5. layer_add_target_date() #> 6. layer_threshold() #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","title":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","text":"autoregressive forecasting model epiprocess::epi_df data. \"direct\" forecasting, meaning estimates model particular target horizon.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","text":"","code":"arx_forecaster(   epi_data,   outcome,   predictors = outcome,   trainer = linear_reg(),   args_list = arx_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","text":"epi_data epi_df object outcome character (scalar) specifying outcome (epi_df). predictors character vector giving column(s) predictor variables. defaults outcome. However, manually specified, variables specifically mentioned used. (outcome added.) default, equals outcome. manually specified, add outcome variable, make sure specify . trainer {parsnip} model describing type estimation. now, enforce mode = \"regression\". args_list list customization arguments determine type forecasting model. See arx_args_list().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","text":"list (1) predictions epi_df predicted values (2) epi_workflow, list encapsulates entire estimation workflow","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/arx_forecaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct autoregressive forecaster with covariates ‚Äî arx_forecaster","text":"","code":"jhu <- covid_case_death_rates %>%   dplyr::filter(time_value >= as.Date(\"2021-12-01\"))  out <- arx_forecaster(   jhu, \"death_rate\",   c(\"case_rate\", \"death_rate\") )  out <- arx_forecaster(jhu, \"death_rate\",   c(\"case_rate\", \"death_rate\"),   trainer = quantile_reg(),   args_list = arx_args_list(quantile_levels = 1:9 / 10) )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/augment.epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions ‚Äî augment.epi_workflow","title":"Augment data with predictions ‚Äî augment.epi_workflow","text":"Augment data predictions","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/augment.epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions ‚Äî augment.epi_workflow","text":"","code":"# S3 method for class 'epi_workflow' augment(x, new_data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/augment.epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions ‚Äî augment.epi_workflow","text":"x trained epi_workflow new_data epi_df predictors ... Arguments passed predict method.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/augment.epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions ‚Äî augment.epi_workflow","text":"new_data additional columns containing predicted values","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/autoplot-epipred.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically plot an epi_workflow or canned_epipred object ‚Äî autoplot-epipred","title":"Automatically plot an epi_workflow or canned_epipred object ‚Äî autoplot-epipred","text":"fit workflow, training data displayed, response default. predictions NULL point interval forecasts shown well. Unfit workflows result error, (can simply call autoplot() original epi_df).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/autoplot-epipred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically plot an epi_workflow or canned_epipred object ‚Äî autoplot-epipred","text":"","code":"# S3 method for class 'epi_workflow' autoplot(   object,   predictions = NULL,   .levels = c(0.5, 0.8, 0.9),   ...,   .color_by = c(\"all_keys\", \"geo_value\", \"other_keys\", \".response\", \"all\", \"none\"),   .facet_by = c(\".response\", \"other_keys\", \"all_keys\", \"geo_value\", \"all\", \"none\"),   .base_color = \"dodgerblue4\",   .point_pred_color = \"orange\",   .max_facets = Inf )  # S3 method for class 'canned_epipred' autoplot(   object,   ...,   .color_by = c(\"all_keys\", \"geo_value\", \"other_keys\", \".response\", \"all\", \"none\"),   .facet_by = c(\".response\", \"other_keys\", \"all_keys\", \"geo_value\", \"all\", \"none\"),   .base_color = \"dodgerblue4\",   .point_pred_color = \"orange\",   .max_facets = Inf )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/autoplot-epipred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically plot an epi_workflow or canned_epipred object ‚Äî autoplot-epipred","text":"object epi_workflow predictions data frame predictions. NULL, original data shown. .levels numeric vector levels plot prediction bands. 3 levels begins difficult see. ... Ignored .color_by variables determine color(s) used plot lines. Options include: all_keys - default uses interaction key variables including geo_value geo_value - geo_value other_keys - available keys geo_value .response - numeric variables (y-axis) - uses interaction keys numeric variables none - coloring aesthetic applied .facet_by Similar .color_by except default display response. .base_color available, prediction bands shown color. .point_pred_color available, point forecasts shown color. .max_facets Cut number facets displayed. Especially useful testing many geo_value's keys.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/autoplot-epipred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically plot an epi_workflow or canned_epipred object ‚Äî autoplot-epipred","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_naomit()  f <- frosting() %>%   layer_residual_quantiles() %>%   layer_threshold(starts_with(\".pred\")) %>%   layer_add_target_date()  wf <- epi_workflow(r, linear_reg(), f) %>% fit(jhu)  autoplot(wf)   latest <- jhu %>% filter(time_value >= max(time_value) - 14) preds <- predict(wf, latest) autoplot(wf, preds, .max_facets = 4)   # ------- Show multiple horizons  p <- lapply(c(7, 14, 21, 28), function(h) {   r <- epi_recipe(jhu) %>%     step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%     step_epi_ahead(death_rate, ahead = h) %>%     step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%     step_epi_naomit()   ewf <- epi_workflow(r, linear_reg(), f) %>% fit(jhu)   forecast(ewf) })  p <- do.call(rbind, p) autoplot(wf, p, .max_facets = 4)   # ------- Plotting canned forecaster output  jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\")) flat <- flatline_forecaster(jhu, \"death_rate\") autoplot(flat, .max_facets = 4) #> Warning: Removed 7 rows containing missing values or values outside the scale range #> (`geom_line()`).   arx <- arx_forecaster(jhu, \"death_rate\", c(\"case_rate\", \"death_rate\"),   args_list = arx_args_list(ahead = 14L) ) autoplot(arx, .max_facets = 6)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","title":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","text":"Constructs list arguments cdc_baseline_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","text":"","code":"cdc_baseline_args_list(   data_frequency = \"1 week\",   aheads = 1:5,   n_training = Inf,   forecast_date = NULL,   quantile_levels = c(0.01, 0.025, 1:19/20, 0.975, 0.99),   nsims = 100000L,   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = \"geo_value\",   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","text":"data_frequency Integer string. describes frequency input epi_df. typical FluSight forecasts, \"1 week\". Allowable arguments integers (taken mean numbers days) string like \"7 days\" \"2 weeks\". Currently, periods (days weeks) result error. aheads Integer vector. Unlike arx_forecaster(), effect predicted values. Predictions always recent observation. determines set prediction horizons layer_cdc_flatline_quantiles(). interacts data_frequencyargument. , example, data daily want forecasts 1:4 days ahead, use1:4. However, want one-week predictions, set c(7, 14, 21, 28). data_frequencyis\"1 week\", set 1:4`. n_training Integer. upper limit number rows per key used training (time unit epi_df). forecast_date Date. date forecast occurring. default NULL determine automatically either maximum time value data latency adjustment (default case), as_of date epi_data adjust_latency non-NULL. quantile_levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . nsims Positive integer. number draws empirical CDF. samples spaced evenly (0, 1) scale, F_X(x) resulting linear interpolation X scale. achieved stats::quantile() Type 7 (default function). symmetrize Logical. default TRUE calculates symmetric prediction intervals. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. nonneg Logical. Force predictive intervals non-negative. non-negativity forced propagating forward, slightly different behaviour occur using layer_threshold(). quantile_by_key Character vector. Groups residuals listed keys calculating residual quantiles. See by_key argument layer_residual_quantiles() information. default, character(0) performs grouping. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. ... Space handle future expansions (unused).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","text":"list containing updated parameter choices class cdc_flat_fcast.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC baseline forecaster argument constructor ‚Äî cdc_baseline_args_list","text":"","code":"cdc_baseline_args_list() #> ‚Ä¢ data_frequency : 7 #> ‚Ä¢ aheads : 1, 2, 3, 4, and 5 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.01, 0.025, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, #>   0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, ‚Ä¶, 0.975, and 0.99 #> ‚Ä¢ nsims : 100000 #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"geo_value\" cdc_baseline_args_list(symmetrize = FALSE) #> ‚Ä¢ data_frequency : 7 #> ‚Ä¢ aheads : 1, 2, 3, 4, and 5 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.01, 0.025, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, #>   0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, ‚Ä¶, 0.975, and 0.99 #> ‚Ä¢ nsims : 100000 #> ‚Ä¢ symmetrize : FALSE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"geo_value\" cdc_baseline_args_list(quantile_levels = c(.1, .3, .7, .9), n_training = 120) #> ‚Ä¢ data_frequency : 7 #> ‚Ä¢ aheads : 1, 2, 3, 4, and 5 #> ‚Ä¢ n_training : 120 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.1, 0.3, 0.7, and 0.9 #> ‚Ä¢ nsims : 100000 #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"geo_value\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"simple forecasting model epiprocess::epi_df data. uses recent observation forecast future date, produces intervals shuffling quantiles residuals \"flatline\" forecast incrementing forward available training data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"","code":"cdc_baseline_forecaster(   epi_data,   outcome,   args_list = cdc_baseline_args_list() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"epi_data epiprocess::epi_df outcome scalar character column name wish predict. args_list list additional arguments created cdc_baseline_args_list() constructor function.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"data frame point interval forecasts aheads (unique horizons) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"default, predictive intervals computed separately combination geo_value epi_data argument. forecaster meant produce exactly CDC Baseline used COVID19ForecastHub","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/cdc_baseline_forecaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the future with the most recent value ‚Äî cdc_baseline_forecaster","text":"","code":"library(dplyr) #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union library(epiprocess) #>  #> Attaching package: ‚Äòepiprocess‚Äô #> The following object is masked from ‚Äòpackage:stats‚Äô: #>  #>     filter weekly_deaths <- covid_case_death_rates %>%   select(geo_value, time_value, death_rate) %>%   left_join(state_census %>% select(pop, abbr), by = c(\"geo_value\" = \"abbr\")) %>%   mutate(deaths = pmax(death_rate / 1e5 * pop * 7, 0)) %>%   select(-pop, -death_rate) %>%   group_by(geo_value) %>%   epi_slide(~ sum(.$deaths), .window_size = 7, .new_col_name = \"deaths_7dsum\") %>%   ungroup() %>%   filter(weekdays(time_value) == \"Saturday\")  cdc <- cdc_baseline_forecaster(weekly_deaths, \"deaths_7dsum\") preds <- pivot_quantiles_wider(cdc$predictions, .pred_distn)  library(ggplot2) #>  #> Attaching package: ‚Äòggplot2‚Äô #> The following object is masked from ‚Äòpackage:epipredict‚Äô: #>  #>     layer forecast_date <- unique(preds$forecast_date) four_states <- c(\"ca\", \"pa\", \"wa\", \"ny\") preds %>%   filter(geo_value %in% four_states) %>%   ggplot(aes(target_date)) +   geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), fill = blues9[3]) +   geom_ribbon(aes(ymin = `0.25`, ymax = `0.75`), fill = blues9[6]) +   geom_line(aes(y = .pred), color = \"orange\") +   geom_line(     data = weekly_deaths %>% filter(geo_value %in% four_states),     aes(x = time_value, y = deaths_7dsum)   ) +   scale_x_date(limits = c(forecast_date - 90, forecast_date + 30)) +   labs(x = \"Date\", y = \"Weekly deaths\") +   facet_wrap(~geo_value, scales = \"free_y\") +   theme_bw() +   geom_vline(xintercept = forecast_date) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_line()`). #> Warning: Removed 39 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_enough_train_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","title":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","text":"check_enough_train_data creates specification recipe operation check variables contain enough data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_enough_train_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","text":"","code":"check_enough_train_data(   recipe,   ...,   n = NULL,   epi_keys = NULL,   drop_na = TRUE,   role = NA,   trained = FALSE,   columns = NULL,   skip = TRUE,   id = rand_id(\"enough_train_data\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_enough_train_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","text":"recipe recipe object. check added sequence operations recipe. ... One selector functions choose variables check. See selections() details. usually want use recipes::all_predictors() . n minimum number data points required training. NULL, total number predictors used. epi_keys character vector column names group data check threshold within group. Useful forecaster trains per group (example, per geo_value). drop_na logical whether count NA values valid rows. role used check since new variables created. trained logical whether selectors ... resolved prep(). columns internal argument tracks columns evaluated check. used user. skip logical. check skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique check identify .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_enough_train_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","text":"check break bake function checked columns enough non-NA values. check passes, nothing changed data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_enough_train_data.html","id":"tidy-results","dir":"Reference","previous_headings":"","what":"tidy() results","title":"Check the dataset contains enough data points. ‚Äî check_enough_train_data","text":"tidy() check, tibble column terms (selectors variables selected) returned.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_interminable_latency.html","id":null,"dir":"Reference","previous_headings":"","what":"warn when the latency is larger than would be reasonable ‚Äî check_interminable_latency","title":"warn when the latency is larger than would be reasonable ‚Äî check_interminable_latency","text":"warn latency larger reasonable","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_interminable_latency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"warn when the latency is larger than would be reasonable ‚Äî check_interminable_latency","text":"","code":"check_interminable_latency(   dataset,   latency_table,   target_columns,   forecast_date,   call = caller_env() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/check_interminable_latency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"warn when the latency is larger than would be reasonable ‚Äî check_interminable_latency","text":"dataset epi_df latency_table whole collection latencies target_columns names columns adjusting, whether unreasonably latent","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/clean_f_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Create short function names ‚Äî clean_f_name","title":"Create short function names ‚Äî clean_f_name","text":"Create short function names","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/clean_f_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create short function names ‚Äî clean_f_name","text":"","code":"clean_f_name(.f, max_length = 20L)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/clean_f_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create short function names ‚Äî clean_f_name","text":".f function, character string, lambda. example, mean, \"mean\", ~ mean(.x) \\(x) mean(x, na.rm = TRUE). max_length integer determining long names can ","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/clean_f_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create short function names ‚Äî clean_f_name","text":"character string length max_length (partially) describes function.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/clean_f_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create short function names ‚Äî clean_f_name","text":"","code":"clean_f_name(mean) #> [1] \"mean\" clean_f_name(\"mean\") #> [1] \"mean\" clean_f_name(~ mean(.x, na.rm = TRUE)) #> [1] \"mean(.x, na.rm = ...\" clean_f_name(\\(x) mean(x, na.rm = TRUE)) #> [1] \"[ ]{mean(x, na.r...}\" clean_f_name(function(x) mean(x, na.rm = TRUE, trim = 0.2357862)) #> [1] \"[ ]{mean(x, na.r...}\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climate_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Climatological forecaster argument constructor ‚Äî climate_args_list","title":"Climatological forecaster argument constructor ‚Äî climate_args_list","text":"Climatological forecaster argument constructor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climate_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climatological forecaster argument constructor ‚Äî climate_args_list","text":"","code":"climate_args_list(   forecast_date = NULL,   forecast_horizon = 0:4,   time_type = c(\"epiweek\", \"week\", \"month\", \"day\"),   center_method = c(\"median\", \"mean\"),   window_size = 3L,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   symmetrize = FALSE,   nonneg = TRUE,   quantile_by_key = character(0L),   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climate_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climatological forecaster argument constructor ‚Äî climate_args_list","text":"forecast_date Date. date forecast occurring. default NULL determine automatically either maximum time value data latency adjustment (default case), as_of date epi_data adjust_latency non-NULL. forecast_horizon Vector integers giving number time steps, units time_type, reference_date predictions produced. time_type duration time aggregation performed. center_method measure center calculated time window. window_size Scalar integer. many time units side included. example, window_size = 3 time_type = \"day\", day data, center calculated using 3 days three days . , case, operates like weekly rolling average, centered day. quantile_levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . symmetrize Logical. default TRUE calculates symmetric prediction intervals. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. nonneg Logical. default TRUE enforces nonnegative predictions hard-thresholding 0. quantile_by_key Character vector. Groups residuals listed keys calculating residual quantiles. See by_key argument layer_residual_quantiles() information. default, character(0) performs grouping. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. ... arguments passed methods (currently used).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climate_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climatological forecaster argument constructor ‚Äî climate_args_list","text":"list containing updated parameter choices class climate_alist.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climate_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climatological forecaster argument constructor ‚Äî climate_args_list","text":"","code":"climate_args_list() #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ forecast_horizon : 0, 1, 2, 3, and 4 #> ‚Ä¢ time_type : \"epiweek\" #> ‚Ä¢ center_method : \"median\" #> ‚Ä¢ window_size : 3 #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ symmetrize : FALSE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"_empty_\" climate_args_list(   forecast_horizon = 0:10,   quantile_levels = c(.01, .025, 1:19 / 20, .975, .99) ) #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ forecast_horizon : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10 #> ‚Ä¢ time_type : \"epiweek\" #> ‚Ä¢ center_method : \"median\" #> ‚Ä¢ window_size : 3 #> ‚Ä¢ quantile_levels : 0.01, 0.025, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, #>   0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, ‚Ä¶, 0.975, and 0.99 #> ‚Ä¢ symmetrize : FALSE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"_empty_\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Climatological forecaster ‚Äî climatological_forecaster","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"another \"baseline\" type forecaster, especially appropriate strongly seasonal diseases (e.g., influenza). idea predict \"typical season\" summarizing available history epi_data. analogous \"climate\" forecast rather \"weather\" forecast, essentially predicting \"typical January\" behavior relying long history periods rather heavily using recent data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"","code":"climatological_forecaster(epi_data, outcome, args_list = climate_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"epi_data epiprocess::epi_df outcome scalar character column name wish predict. args_list list additional arguments created climate_args_list() constructor function.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"data frame point interval) forecasts horizons unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"point forecast either mean median outcome small window around target period, computed entire available history, separately key epi_df (geo_value additional keys). forecast quantiles computed residuals point prediction. default, residuals ungrouped, meaning every key shape distribution (though different centers). Note data comparable scales across keys, default likely inappropriate. case, can choose keys quantiles computed using climate_args_list(quantile_by_key = ...).","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/climatological_forecaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Climatological forecaster ‚Äî climatological_forecaster","text":"","code":"cases <- cases_deaths_subset # set as_of to the last day in the data # \"case_rate_7d_av\" is on the same scale for all geographies attr(cases, \"metadata\")$as_of <- as.Date(\"2021-12-31\") fcast <- climatological_forecaster(cases, \"case_rate_7d_av\") autoplot(fcast)   # Compute quantiles separately by location, and a backcast # \"cases\" is on different scales by geography, due to population size # so, it is better to compute quantiles separately backcast <- climatological_forecaster(   cases, \"case_rate_7d_av\",   climate_args_list(     quantile_by_key = \"geo_value\",     forecast_date = as.Date(\"2021-06-01\")   ) ) autoplot(backcast)   # compute the climate \"daily\" rather than \"weekly\" # use a two week window (on both sides) # \"cases\" is on different scales by geography, due to population size daily_fcast <- climatological_forecaster(   cases, \"cases\",   climate_args_list(     quantile_by_key = \"geo_value\",     time_type = \"day\",     window_size = 14L,     forecast_horizon = 0:30   ) ) autoplot(daily_fcast) +   ggplot2::coord_cartesian(xlim = c(as.Date(\"2021-10-01\"), NA))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/construct_shift_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"create a table of the columns to modify, their shifts, and their prefixes ‚Äî construct_shift_tibble","title":"create a table of the columns to modify, their shifts, and their prefixes ‚Äî construct_shift_tibble","text":"create table columns modify, shifts, prefixes","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/construct_shift_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a table of the columns to modify, their shifts, and their prefixes ‚Äî construct_shift_tibble","text":"","code":"construct_shift_tibble(terms_used, recipe, rel_step_type, shift_name)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/count_single_column.html","id":null,"dir":"Reference","previous_headings":"","what":"get the location of the last real value ‚Äî count_single_column","title":"get the location of the last real value ‚Äî count_single_column","text":"get location last real value","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/count_single_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the location of the last real value ‚Äî count_single_column","text":"","code":"count_single_column(col)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/count_single_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the location of the last real value ‚Äî count_single_column","text":"col relevant column","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/dist_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A distribution parameterized by a set of quantiles ‚Äî dist_quantiles","text":"","code":"dist_quantiles(values, quantile_levels)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/dist_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A distribution parameterized by a set of quantiles ‚Äî dist_quantiles","text":"values vector (list vectors) values. quantile_levels vector (list vectors) probabilities corresponding values. creating multiple sets values/quantile_levels resulting different distributions, sizes must match. See examples .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/dist_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A distribution parameterized by a set of quantiles ‚Äî dist_quantiles","text":"vector class \"distribution\".","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/dist_quantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A distribution parameterized by a set of quantiles ‚Äî dist_quantiles","text":"function deprecated. recommended alternative hardhat::quantile_pred().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/drop_ignored_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"given a list named by key columns, remove any matching key values keys_to_ignore should have the form list(col_name = c(","title":"given a list named by key columns, remove any matching key values keys_to_ignore should have the form list(col_name = c(","text":"given list named key columns, remove matching key values keys_to_ignore form list(col_name = c(\"value_to_ignore\", \"other_value_to_ignore\"))","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/drop_ignored_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"given a list named by key columns, remove any matching key values keys_to_ignore should have the form list(col_name = c(","text":"","code":"drop_ignored_keys(training, keys_to_ignore)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","title":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","text":"recipe description steps applied data set order prepare data analysis. loose wrapper around recipes::recipe() properly handle additional columns present epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","text":"","code":"epi_recipe(x, ...)  # S3 method for class 'epi_df' epi_recipe(   x,   reference_date = NULL,   formula = NULL,   ...,   vars = NULL,   roles = NULL )  # S3 method for class 'formula' epi_recipe(formula, data, reference_date = NULL, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","text":"x, data epi_df template data set (see ). ... arguments passed methods (currently used). reference_date Either date class time_value column epi_df NULL. date, gives date operations relative. Typically, real-time tasks date model created (presumably trained). forecasting, often recent date data availability, data \"latent\" (reported date corresponds), performing nowcast, reference_date may later . Setting reference_date value recent data true \"forecast\", future data used create model, may reasonable model building, nowcasting (predicting finalized values preliminary data), producing backcast. NULL, set as_of date epi_df. formula model formula. -line functions used (e.g. log(x), x:y, etc.) minus signs allowed. types transformations enacted using step functions package. Dots allowed simple multivariate outcome terms (.e. need cbind; see Examples). vars character string column names corresponding variables used context (see ) roles character string (length vars) describes single role variable take. value anything common roles \"outcome\", \"predictor\", \"time_value\", \"geo_value\"","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","text":"object class recipe sub-objects: var_info tibble containing information original data set columns. term_info tibble contains current set terms data set. initially defaults data contained var_info. steps list step check objects define sequence preprocessing operations applied data. default value NULL. template tibble data. initialized data given data argument can different recipe trained.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_recipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a epi_recipe for preprocessing data ‚Äî epi_recipe","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-08-01\")  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_naomit()  r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Lagging: death_rate by 0, 7, 14 #> 2. Leading: death_rate by 7 #> 3. Lagging: case_rate by 0, 7, 14 #> 4. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 5. ‚Ä¢ Removing rows with NA values in: all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_shift_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift predictors while maintaining grouping and time_value ordering ‚Äî epi_shift_single","title":"Shift predictors while maintaining grouping and time_value ordering ‚Äî epi_shift_single","text":"lower-level function. performs error checking.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_shift_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift predictors while maintaining grouping and time_value ordering ‚Äî epi_shift_single","text":"","code":"epi_shift_single(x, col, shift_val, newname, key_cols)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_shift_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift predictors while maintaining grouping and time_value ordering ‚Äî epi_shift_single","text":"x Data frame. shift_val single integer. Negative values produce leads. newname name newly shifted column key_cols vector, NULL. Additional grouping vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_shift_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift predictors while maintaining grouping and time_value ordering ‚Äî epi_shift_single","text":"list tibbles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_slide_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to handle epi_slide particulars ‚Äî epi_slide_wrapper","title":"Wrapper to handle epi_slide particulars ‚Äî epi_slide_wrapper","text":"simplify somewhat future can run epi_slide columns. Surprisingly, lapply several orders magnitude faster using roughly equivalent tidy select style.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_slide_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to handle epi_slide particulars ‚Äî epi_slide_wrapper","text":"","code":"epi_slide_wrapper(   new_data,   .window_size,   .align,   columns,   fns,   fn_names,   group_keys,   name_prefix )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_slide_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to handle epi_slide particulars ‚Äî epi_slide_wrapper","text":"fns vector functions, even length 1. group_keys keys group . likely epi_keys (without time_value)","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an epi_workflow ‚Äî epi_workflow","title":"Create an epi_workflow ‚Äî epi_workflow","text":"container object unifies preprocessing, fitting, prediction, postprocessing predictive modeling epidemiological data. extends functionality workflows::workflow() handle typical panel data structures found field. extension handled completely internally, invisible user. intents purposes, operates exactly like workflows::workflow(). details numerous examples, see .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an epi_workflow ‚Äî epi_workflow","text":"","code":"epi_workflow(preprocessor = NULL, spec = NULL, postprocessor = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an epi_workflow ‚Äî epi_workflow","text":"preprocessor optional preprocessor add workflow. One : formula, passed add_formula(). recipe, passed add_recipe(). workflow_variables() object, passed add_variables(). spec optional parsnip model specification add workflow. Passed add_model(). postprocessor optional postprocessor add workflow. Currently frosting allowed using, add_frosting().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an epi_workflow ‚Äî epi_workflow","text":"new epi_workflow object.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an epi_workflow ‚Äî epi_workflow","text":"","code":"jhu <- covid_case_death_rates  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg())  wf #>  #> ‚ïê‚ïê Epi Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 5 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #> 3. step_epi_lag() #> 4. step_naomit() #> 5. step_naomit() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>  #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epiweek_leap.html","id":null,"dir":"Reference","previous_headings":"","what":"epiweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî epiweek_leap","title":"epiweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî epiweek_leap","text":"epiweek, assigns week 53 value 999 instead mirrors assignments yday_leap","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/epiweek_leap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epiweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî epiweek_leap","text":"","code":"epiweek_leap(time_value)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_argument.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","title":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","text":"Extract argument made frosting layer recipe step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_argument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","text":"","code":"extract_argument(x, name, arg, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_argument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","text":"x epi_workflow, epi_recipe, frosting, step, layer object name name layer arg name argument ... used","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_argument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","text":"object originally passed argument layer step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_argument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract an argument made to a frosting layer or recipe step ‚Äî extract_argument","text":"","code":"f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(symmetrize = FALSE) %>%   layer_naomit(.pred)  extract_argument(f, \"layer_residual_quantiles\", \"symmetrize\") #> [1] FALSE"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the frosting object from a workflow ‚Äî extract_frosting","title":"Extract the frosting object from a workflow ‚Äî extract_frosting","text":"Extract frosting object workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the frosting object from a workflow ‚Äî extract_frosting","text":"","code":"extract_frosting(x, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the frosting object from a workflow ‚Äî extract_frosting","text":"x epi_workflow object ... used","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extract_frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the frosting object from a workflow ‚Äî extract_frosting","text":"frosting object","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extrapolate_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","title":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","text":"function takes quantile_pred vector returns type object, expanded include additional quantiles computed probs. want behaviour similar stats::quantile(), quantile(x,...) may appropriate.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extrapolate_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","text":"","code":"extrapolate_quantiles(x, probs, replace_na = TRUE, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extrapolate_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","text":"x vector class quantile_pred. probs vector probabilities calculate quantiles replace_na logical. x contains NA's, imputed possible (TRUE) retained (FALSE). ... additional arguments passed quantile method","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extrapolate_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","text":"quantile_pred vector. element x now superset original quantile_values (union probs).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/extrapolate_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a distribution with a set of quantiles ‚Äî extrapolate_quantiles","text":"","code":"dstn <- quantile_pred(rbind(1:4, 8:11), c(.2, .4, .6, .8)) # extra quantiles are appended as_tibble(extrapolate_quantiles(dstn, probs = c(.25, 0.5, .75))) #> # A tibble: 14 √ó 3 #>    .pred_quantile .quantile_levels  .row #>             <dbl>            <dbl> <int> #>  1           1                0.2      1 #>  2           1.25             0.25     1 #>  3           2                0.4      1 #>  4           2.5              0.5      1 #>  5           3                0.6      1 #>  6           3.75             0.75     1 #>  7           4                0.8      1 #>  8           8                0.2      2 #>  9           8.25             0.25     2 #> 10           9                0.4      2 #> 11           9.5              0.5      2 #> 12          10                0.6      2 #> 13          10.8              0.75     2 #> 14          11                0.8      2"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/fit-epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an epi_workflow object ‚Äî fit-epi_workflow","title":"Fit an epi_workflow object ‚Äî fit-epi_workflow","text":"fit() method epi_workflow object estimates parameters given model set data. Fitting epi_workflow involves two main steps, preprocessing data fitting underlying parsnip model.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/fit-epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an epi_workflow object ‚Äî fit-epi_workflow","text":"","code":"# S3 method for class 'epi_workflow' fit(object, data, ..., control = workflows::control_workflow())"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/fit-epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an epi_workflow object ‚Äî fit-epi_workflow","text":"object epi_workflow object data epi_df predictors outcomes use fitting epi_workflow ... used control workflows::control_workflow() object","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/fit-epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an epi_workflow object ‚Äî fit-epi_workflow","text":"epi_workflow object, updated fit parsnip model object$fit$fit slot.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/fit-epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit an epi_workflow object ‚Äî fit-epi_workflow","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7)  wf <- epi_workflow(r, parsnip::linear_reg()) %>% fit(jhu) wf #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 2 Recipe steps. #> 1. step_epi_lag() #> 2. step_epi_ahead() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>           0.32709           -0.01822           -0.02096           -0.05793   #>  #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline.html","id":null,"dir":"Reference","previous_headings":"","what":"(Internal) implementation of the flatline forecaster ‚Äî flatline","title":"(Internal) implementation of the flatline forecaster ‚Äî flatline","text":"internal function used create parsnip::linear_reg() model. somewhat odd behaviour (see ).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Internal) implementation of the flatline forecaster ‚Äî flatline","text":"","code":"flatline(formula, data)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Internal) implementation of the flatline forecaster ‚Äî flatline","text":"formula lhs single variable. standard usage, actually observed time series shifted forward forecast horizon. right hand side must contain keys (locations) panel data separated plus. observed time series must come last. example   Note function shifting, done outside. data data frame containing least variables used formula. must also contain column time_value giving observed time points.","code":"form <- as.formula(lead7_y ~ state + age + y)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(Internal) implementation of the flatline forecaster ‚Äî flatline","text":"S3 object class flatline two components: residuals - tibble keys .resid column contains forecast errors. .pred - tibble keys .pred column containing predictions future data (last observed outcome combination keys.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Internal) implementation of the flatline forecaster ‚Äî flatline","text":"","code":"tib <- data.frame(   y = runif(100),   expand.grid(k = letters[1:4], j = letters[5:9], time_value = 1:5) ) %>%   dplyr::group_by(k, j) %>%   dplyr::mutate(y2 = dplyr::lead(y, 2)) # predict 2 steps ahead flat <- flatline(y2 ~ j + k + y, tib) # predictions for 20 locations sum(!is.na(flat$residuals$.resid)) # 100 residuals, but 40 are NA #> [1] 60"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatline forecaster argument constructor ‚Äî flatline_args_list","title":"Flatline forecaster argument constructor ‚Äî flatline_args_list","text":"Constructs list arguments flatline_forecaster().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatline forecaster argument constructor ‚Äî flatline_args_list","text":"","code":"flatline_args_list(   ahead = 7L,   n_training = Inf,   forecast_date = NULL,   target_date = NULL,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   symmetrize = TRUE,   nonneg = TRUE,   quantile_by_key = character(0L),   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatline forecaster argument constructor ‚Äî flatline_args_list","text":"ahead Integer. Unlike arx_forecaster(), effect predicted values. Predictions always recent observation. However, impact residuals stored object. Residuals calculated based number mimic badly done. example, ahead = 7 create residuals comparing values 7 days apart. n_training Integer. upper limit number rows per key used training (time unit epi_df). forecast_date Date. date forecast occurring. default NULL determine automatically either maximum time value data latency adjustment (default case), as_of date epi_data adjust_latency non-NULL. target_date Date. date forecast. default NULL determine automatically forecast_date + ahead. quantile_levels Vector NULL. vector probabilities produce prediction intervals. created computing quantiles training residuals. NULL value result point forecasts . symmetrize Logical. default TRUE calculates symmetric prediction intervals. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. nonneg Logical. default TRUE enforces nonnegative predictions hard-thresholding 0. quantile_by_key Character vector. Groups residuals listed keys calculating residual quantiles. See by_key argument layer_residual_quantiles() information. default, character(0) performs grouping. argument applies residual quantiles used. applicable trainer = quantile_reg(), example. ... Space handle future expansions (unused).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatline forecaster argument constructor ‚Äî flatline_args_list","text":"list containing updated parameter choices class flatline_alist.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_args_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatline forecaster argument constructor ‚Äî flatline_args_list","text":"","code":"flatline_args_list() #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"_empty_\" flatline_args_list(symmetrize = FALSE) #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : Inf #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, and 0.95 #> ‚Ä¢ symmetrize : FALSE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"_empty_\" flatline_args_list(quantile_levels = c(.1, .3, .7, .9), n_training = 120) #> ‚Ä¢ ahead : 7 #> ‚Ä¢ n_training : 120 #> ‚Ä¢ forecast_date : \"NULL\" #> ‚Ä¢ target_date : \"NULL\" #> ‚Ä¢ quantile_levels : 0.1, 0.3, 0.7, and 0.9 #> ‚Ä¢ symmetrize : TRUE #> ‚Ä¢ nonneg : TRUE #> ‚Ä¢ quantile_by_key : \"_empty_\""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict the future with today's value ‚Äî flatline_forecaster","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"simple forecasting model epiprocess::epi_df data. uses recent observation forecast future date, produces intervals based quantiles residuals \"flatline\" forecast available training data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"","code":"flatline_forecaster(epi_data, outcome, args_list = flatline_args_list())"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"epi_data epiprocess::epi_df outcome scalar character column name wish predict. args_list list additional arguments created flatline_args_list() constructor function.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"data frame point (optionally interval) forecasts single ahead (unique horizon) unique combination key_vars.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"default, predictive intervals computed separately combination key values (geo_value + additional keys) epi_data argument. forecaster similar used COVID19ForecastHub","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flatline_forecaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict the future with today's value ‚Äî flatline_forecaster","text":"","code":"jhu <- covid_case_death_rates %>%   dplyr::filter(time_value >= as.Date(\"2021-12-01\"))  out <- flatline_forecaster(jhu, \"death_rate\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flusight_hub_formatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","title":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","text":"function converts predictions included forecasters format (nearly) ready submission 2023-24 FluSight-forecast-hub. See documentation required columns. Currently, \"quantile\" forcasts supported, intention support \"quantile\" \"pmf\". reason, adding output_type column done via ... argument. See examples . specific required format forecast task .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flusight_hub_formatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","text":"","code":"flusight_hub_formatter(object, ..., .fcast_period = c(\"daily\", \"weekly\"))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flusight_hub_formatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","text":"object data.frame predictions object class canned_epipred created , e.g., arx_forecaster() ... <dynamic-dots> Name = value pairs constant columns (mutations) perform results. See examples. .fcast_period Control whether horizon represent days weeks. Depending whether forecaster output target dates layer_add_target_date() , may need compute horizon /target_end_date available columns predictions. ahead target_date available, ignored. ahead aheads exists, target date may need multiplied ahead represents weekly forecasts. Alternatively, , target_date available, horizon days, unless argument \"weekly\". Note can adjusted later ... argument.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flusight_hub_formatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","text":"tibble::tibble. ... empty, result contain columns reference_date, horizon, target_end_date, location, output_type_id, value. ... can perform mutations .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/flusight_hub_formatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format predictions for submission to FluSight forecast Hub ‚Äî flusight_hub_formatter","text":"","code":"library(dplyr) library(epiprocess) weekly_deaths <- covid_case_death_rates %>%   filter(     time_value >= as.Date(\"2021-09-01\"),     geo_value %in% c(\"ca\", \"ny\", \"dc\", \"ga\", \"vt\")   ) %>%   select(geo_value, time_value, death_rate) %>%   left_join(state_census %>% select(pop, abbr), by = c(\"geo_value\" = \"abbr\")) %>%   mutate(deaths = pmax(death_rate / 1e5 * pop * 7, 0)) %>%   select(-pop, -death_rate) %>%   group_by(geo_value) %>%   epi_slide(~ sum(.$deaths), .window_size = 7, .new_col_name = \"deaths_7dsum\") %>%   ungroup() %>%   filter(weekdays(time_value) == \"Saturday\")  cdc <- cdc_baseline_forecaster(weekly_deaths, \"deaths_7dsum\") flusight_hub_formatter(cdc) #> # A tibble: 575 √ó 7 #>    reference_date horizon target_end_date location output_type_id value .pred #>    <date>           <int> <date>          <chr>             <dbl> <dbl> <dbl> #>  1 2021-12-25           1 2022-01-01      06                0.01  2147. 3166. #>  2 2021-12-25           1 2022-01-01      06                0.025 2165. 3166. #>  3 2021-12-25           1 2022-01-01      06                0.05  2215. 3166. #>  4 2021-12-25           1 2022-01-01      06                0.1   2277. 3166. #>  5 2021-12-25           1 2022-01-01      06                0.15  2594. 3166. #>  6 2021-12-25           1 2022-01-01      06                0.2   2847. 3166. #>  7 2021-12-25           1 2022-01-01      06                0.25  2886. 3166. #>  8 2021-12-25           1 2022-01-01      06                0.3   2931. 3166. #>  9 2021-12-25           1 2022-01-01      06                0.35  2977. 3166. #> 10 2021-12-25           1 2022-01-01      06                0.4   3001. 3166. #> # ‚Ñπ 565 more rows flusight_hub_formatter(cdc, target = \"wk inc covid deaths\") #> # A tibble: 575 √ó 8 #>    reference_date horizon target_end_date location output_type_id value .pred #>    <date>           <int> <date>          <chr>             <dbl> <dbl> <dbl> #>  1 2021-12-25           1 2022-01-01      06                0.01  2147. 3166. #>  2 2021-12-25           1 2022-01-01      06                0.025 2165. 3166. #>  3 2021-12-25           1 2022-01-01      06                0.05  2215. 3166. #>  4 2021-12-25           1 2022-01-01      06                0.1   2277. 3166. #>  5 2021-12-25           1 2022-01-01      06                0.15  2594. 3166. #>  6 2021-12-25           1 2022-01-01      06                0.2   2847. 3166. #>  7 2021-12-25           1 2022-01-01      06                0.25  2886. 3166. #>  8 2021-12-25           1 2022-01-01      06                0.3   2931. 3166. #>  9 2021-12-25           1 2022-01-01      06                0.35  2977. 3166. #> 10 2021-12-25           1 2022-01-01      06                0.4   3001. 3166. #> # ‚Ñπ 565 more rows #> # ‚Ñπ 1 more variable: target <chr> flusight_hub_formatter(cdc, target = paste(horizon, \"wk inc covid deaths\")) #> # A tibble: 575 √ó 8 #>    reference_date horizon target_end_date location output_type_id value .pred #>    <date>           <int> <date>          <chr>             <dbl> <dbl> <dbl> #>  1 2021-12-25           1 2022-01-01      06                0.01  2147. 3166. #>  2 2021-12-25           1 2022-01-01      06                0.025 2165. 3166. #>  3 2021-12-25           1 2022-01-01      06                0.05  2215. 3166. #>  4 2021-12-25           1 2022-01-01      06                0.1   2277. 3166. #>  5 2021-12-25           1 2022-01-01      06                0.15  2594. 3166. #>  6 2021-12-25           1 2022-01-01      06                0.2   2847. 3166. #>  7 2021-12-25           1 2022-01-01      06                0.25  2886. 3166. #>  8 2021-12-25           1 2022-01-01      06                0.3   2931. 3166. #>  9 2021-12-25           1 2022-01-01      06                0.35  2977. 3166. #> 10 2021-12-25           1 2022-01-01      06                0.4   3001. 3166. #> # ‚Ñπ 565 more rows #> # ‚Ñπ 1 more variable: target <chr> flusight_hub_formatter(cdc, target = \"wk inc covid deaths\", output_type = \"quantile\") #> # A tibble: 575 √ó 9 #>    reference_date horizon target_end_date location output_type_id value .pred #>    <date>           <int> <date>          <chr>             <dbl> <dbl> <dbl> #>  1 2021-12-25           1 2022-01-01      06                0.01  2147. 3166. #>  2 2021-12-25           1 2022-01-01      06                0.025 2165. 3166. #>  3 2021-12-25           1 2022-01-01      06                0.05  2215. 3166. #>  4 2021-12-25           1 2022-01-01      06                0.1   2277. 3166. #>  5 2021-12-25           1 2022-01-01      06                0.15  2594. 3166. #>  6 2021-12-25           1 2022-01-01      06                0.2   2847. 3166. #>  7 2021-12-25           1 2022-01-01      06                0.25  2886. 3166. #>  8 2021-12-25           1 2022-01-01      06                0.3   2931. 3166. #>  9 2021-12-25           1 2022-01-01      06                0.35  2977. 3166. #> 10 2021-12-25           1 2022-01-01      06                0.4   3001. 3166. #> # ‚Ñπ 565 more rows #> # ‚Ñπ 2 more variables: target <chr>, output_type <chr>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/forecast.epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a forecast from an epi workflow ‚Äî forecast.epi_workflow","title":"Produce a forecast from an epi workflow ‚Äî forecast.epi_workflow","text":"Produce forecast epi workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/forecast.epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a forecast from an epi workflow ‚Äî forecast.epi_workflow","text":"","code":"# S3 method for class 'epi_workflow' forecast(object, ..., n_recent = NULL, forecast_date = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/forecast.epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a forecast from an epi workflow ‚Äî forecast.epi_workflow","text":"object epi workflow. ... used. n_recent Integer NULL. filling missing data locf = TRUE, far back willing tolerate missing data? Larger values allow filling. default NULL determine recipe. example, suppose n_recent = 3, 3 recent observations geo_value NA‚Äôs, won‚Äôt able fill anything, error message thrown. (See details.) forecast_date default, set maximum time_value x. data latency recent NA's filled, may last available time_value.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/forecast.epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a forecast from an epi workflow ‚Äî forecast.epi_workflow","text":"forecast tibble.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/format_varnames.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"Designed give good output interpolated cli. Main purpose add backticks around variable names necessary, something empty string length 0.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/format_varnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"format_varnames(x, empty = \"*none*\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/format_varnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"x chr; e.g., colnames data frame empty string; output x length 0?","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/format_varnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"","text":"chr","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Create frosting for postprocessing predictions ‚Äî frosting","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"generates postprocessing container (much like recipes::recipe()) hold steps postprocessing predictions.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"","code":"frosting(layers = NULL, requirements = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"layers Must NULL. requirements Must NULL.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"frosting object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"arguments currently placeholders must NULL","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create frosting for postprocessing predictions ‚Äî frosting","text":"","code":"# Toy example to show that frosting can be created and added for postprocessing f <- frosting() wf <- epi_workflow() %>% add_frosting(f)  # A more realistic example jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>% fit(jhu)  f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred)  wf1 <- wf %>% add_frosting(f)  p <- forecast(wf1) p #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.312 #> 3 ny        2021-12-31 0.295"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_forecast_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the as_of for the forecast date, and make sure there's nothing very off about it. ‚Äî get_forecast_date","title":"Extract the as_of for the forecast date, and make sure there's nothing very off about it. ‚Äî get_forecast_date","text":"Extract as_of forecast date, make sure nothing .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_forecast_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the as_of for the forecast date, and make sure there's nothing very off about it. ‚Äî get_forecast_date","text":"","code":"get_forecast_date(new_data, info, epi_keys_checked, latency, columns = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_forecast_date_in_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"get the target date while in a layer ‚Äî get_forecast_date_in_layer","title":"get the target date while in a layer ‚Äî get_forecast_date_in_layer","text":"get target date layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_forecast_date_in_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get the target date while in a layer ‚Äî get_forecast_date_in_layer","text":"","code":"get_forecast_date_in_layer(this_recipe, workflow_max_time_value, new_data)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_forecast_date_in_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get the target date while in a layer ‚Äî get_forecast_date_in_layer","text":"this_recipe recipe check step_adjust_latency workflow_max_time_value max_time value coming fit workflow (maximal time value potentially different dataset) new_data data currently working , take potentially different max_time_value","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_latency.html","id":null,"dir":"Reference","previous_headings":"","what":"the latency is also the amount the shift is off by ‚Äî get_latency","title":"the latency is also the amount the shift is off by ‚Äî get_latency","text":"latency also amount shift ","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_latency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"the latency is also the amount the shift is off by ‚Äî get_latency","text":"","code":"get_latency(new_data, forecast_date, column, sign_shift, epi_keys_checked)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_latency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"the latency is also the amount the shift is off by ‚Äî get_latency","text":"sign_shift integer. 1 lag -1 ahead. represent need shift data bring 3 day lagged value today.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_latency_table.html","id":null,"dir":"Reference","previous_headings":"","what":"create the latency table This is a table of column names and the latency adjustment necessary for that column. An example: ‚Äî get_latency_table","title":"create the latency table This is a table of column names and the latency adjustment necessary for that column. An example: ‚Äî get_latency_table","text":"col_name   latency  1 case_rate        5 2 death_rate       5","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_latency_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create the latency table This is a table of column names and the latency adjustment necessary for that column. An example: ‚Äî get_latency_table","text":"","code":"get_latency_table(   training,   columns,   forecast_date,   latency,   sign_shift,   epi_keys_checked,   keys_to_ignore,   info,   terms )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_sign.html","id":null,"dir":"Reference","previous_headings":"","what":"lags move columns forward to bring the past up to today, while aheads drag the future back to today ‚Äî get_sign","title":"lags move columns forward to bring the past up to today, while aheads drag the future back to today ‚Äî get_sign","text":"lags move columns forward bring past today, aheads drag future back today","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_sign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lags move columns forward to bring the past up to today, while aheads drag the future back to today ‚Äî get_sign","text":"","code":"get_sign(object)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get test data for prediction based on longest lag period ‚Äî get_test_data","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"Based longest lag period recipe, get_test_data() creates epi_df columns geo_value, time_value variables original dataset, used create features necessary produce forecasts.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"","code":"get_test_data(recipe, x)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"recipe recipe object. x epi_df. typical usage pass data used fitting recipe.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"object type x columns geo_value, time_value, additional keys, well variables original dataset.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"minimum required (recent) data produce forecast equal maximum lag requested (predictor) plus longest horizon used growth rate calculations requested recipe. calculated internally.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/get_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get test data for prediction based on longest lag period ‚Äî get_test_data","text":"","code":"# create recipe rec <- epi_recipe(covid_case_death_rates) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) get_test_data(recipe = rec, x = covid_case_death_rates) #> An `epi_df` object, 840 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 840 √ó 4 #>    geo_value time_value case_rate death_rate #>    <chr>     <date>         <dbl>      <dbl> #>  1 ak        2021-12-17      23.1      1.19  #>  2 al        2021-12-17      15.6      0.290 #>  3 ar        2021-12-17      23.4      0.467 #>  4 as        2021-12-17       0        0     #>  5 az        2021-12-17      41.2      1.04  #>  6 ca        2021-12-17      16.8      0.158 #>  7 co        2021-12-17      31.8      0.371 #>  8 ct        2021-12-17      64.8      0.120 #>  9 dc        2021-12-17      50.4      0.140 #> 10 de        2021-12-17      67.9      0.333 #> # ‚Ñπ 830 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/grf_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Random quantile forests via grf ‚Äî grf_quantiles","title":"Random quantile forests via grf ‚Äî grf_quantiles","text":"grf::quantile_forest() fits random forests way makes easy calculate quantile forests. Currently, engine provided , since quantile regression typical use-case.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/grf_quantiles.html","id":"tuning-parameters","dir":"Reference","previous_headings":"","what":"Tuning Parameters","title":"Random quantile forests via grf ‚Äî grf_quantiles","text":"model 3 tuning parameters: mtry: # Randomly Selected Predictors (type: integer, default: see ) trees: # Trees (type: integer, default: 2000L) min_n: Minimal Node Size (type: integer, default: 5) mtry depends number columns design matrix. default grf::quantile_forest() min(ceiling(sqrt(ncol(X)) + 20), ncol(X)). categorical predictors, one-hot encoding always used. makes splitting efficient, implications mtry choice. factor many levels become large number columns design matrix means may selected frequently potential splits. different implementations random forest. details, see grf discussion.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/grf_quantiles.html","id":"translation-from-parsnip-to-the-original-package","dir":"Reference","previous_headings":"","what":"Translation from parsnip to the original package","title":"Random quantile forests via grf ‚Äî grf_quantiles","text":"","code":"rand_forest(   mode = \"regression\", # you must specify the `mode = regression`   mtry = integer(1),   trees = integer(1),   min_n = integer(1) ) %>%   set_engine(\"grf_quantiles\") %>%   translate() #> Random Forest Model Specification (regression) #> #> Main Arguments: #>   mtry = integer(1) #>   trees = integer(1) #>   min_n = integer(1) #> #> Computational engine: grf_quantiles #> #> Model fit template: #> grf::quantile_forest(X = missing_arg(), Y = missing_arg(), mtry = min_cols(~integer(1), #>     x), num.trees = integer(1), min.node.size = min_rows(~integer(1), #>     x), quantiles = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95), #>     num.threads = 1L, seed = stats::runif(1, 0, .Machine$integer.max))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/grf_quantiles.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Random quantile forests via grf ‚Äî grf_quantiles","text":"Case weights supported.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/grf_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random quantile forests via grf ‚Äî grf_quantiles","text":"","code":"library(grf) tib <- data.frame(   y = rnorm(100), x = rnorm(100), z = rnorm(100),   f = factor(sample(letters[1:3], 100, replace = TRUE)) ) spec <- rand_forest(engine = \"grf_quantiles\", mode = \"regression\") out <- fit(spec, formula = y ~ x + z, data = tib) predict(out, new_data = tib[1:5, ]) %>%   pivot_quantiles_wider(.pred) #> # A tibble: 5 √ó 7 #>   `0.05` `0.1` `0.25`   `0.5` `0.75` `0.9` `0.95` #>    <dbl> <dbl>  <dbl>   <dbl>  <dbl> <dbl>  <dbl> #> 1  -1.78 -1.34 -0.650 -0.323   0.305 0.894  0.958 #> 2  -2.04 -1.78 -0.668 -0.284   0.265 1.06   1.09  #> 3  -2.04 -1.78 -0.668 -0.284   0.360 0.976  1.09  #> 4  -1.38 -1.22 -0.653 -0.0308  0.740 1.08   1.33  #> 5  -1.38 -1.28 -0.644 -0.0308  0.659 1.32   1.75   # -- adjusting the desired quantiles  spec <- rand_forest(mode = \"regression\") %>%   set_engine(engine = \"grf_quantiles\", quantiles = c(1:9 / 10)) out <- fit(spec, formula = y ~ x + z, data = tib) predict(out, new_data = tib[1:5, ]) %>%   pivot_quantiles_wider(.pred) #> # A tibble: 5 √ó 9 #>   `0.1`  `0.2`  `0.3`  `0.4`   `0.5`   `0.6` `0.7` `0.8` `0.9` #>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> <dbl> <dbl> <dbl> #> 1 -1.34 -1.03  -0.580 -0.372 -0.323   0.205  0.291 0.579 0.894 #> 2 -1.53 -1.03  -0.620 -0.503 -0.284  -0.0144 0.249 0.537 0.976 #> 3 -1.53 -1.03  -0.620 -0.503 -0.284   0.0701 0.249 0.538 0.976 #> 4 -1.22 -0.668 -0.620 -0.372 -0.0826  0.269  0.597 0.775 1.08  #> 5 -1.28 -0.790 -0.448 -0.279 -0.0308  0.230  0.538 0.750 1.32   # -- a more complicated task  dat <- covid_case_death_rates %>%   filter(time_value > as.Date(\"2021-10-01\")) rec <- epi_recipe(dat) %>%   step_epi_lag(case_rate, death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit() frost <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred) spec <- rand_forest(mode = \"regression\") %>%   set_engine(engine = \"grf_quantiles\", quantiles = c(.25, .5, .75))  ewf <- epi_workflow(rec, spec, frost) %>%   fit(dat) %>%   forecast() ewf %>%   rename(forecast_date = time_value) %>%   mutate(target_date = forecast_date + 7L) %>%   pivot_quantiles_wider(.pred) #> # A tibble: 56 √ó 6 #>    geo_value forecast_date target_date `0.25` `0.5` `0.75` #>    <chr>     <date>        <date>       <dbl> <dbl>  <dbl> #>  1 ak        2021-12-31    2022-01-07  0.196  0.282  0.445 #>  2 al        2021-12-31    2022-01-07  0.146  0.201  0.298 #>  3 ar        2021-12-31    2022-01-07  0.449  0.516  0.609 #>  4 as        2021-12-31    2022-01-07  0      0      0     #>  5 az        2021-12-31    2022-01-07  0.504  0.668  0.872 #>  6 ca        2021-12-31    2022-01-07  0.174  0.222  0.267 #>  7 co        2021-12-31    2022-01-07  0.337  0.480  0.635 #>  8 ct        2021-12-31    2022-01-07  0.334  0.420  0.462 #>  9 dc        2021-12-31    2022-01-07  0.0811 0.229  0.473 #> 10 de        2021-12-31    2022-01-07  0.251  0.387  0.530 #> # ‚Ñπ 46 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_recipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for epi_recipe ‚Äî is_epi_recipe","title":"Test for epi_recipe ‚Äî is_epi_recipe","text":"Test epi_recipe","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_recipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for epi_recipe ‚Äî is_epi_recipe","text":"","code":"is_epi_recipe(x)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_recipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for epi_recipe ‚Äî is_epi_recipe","text":"x object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_recipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for epi_recipe ‚Äî is_epi_recipe","text":"TRUE object inherits epi_recipe.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for an epi_workflow ‚Äî is_epi_workflow","title":"Test for an epi_workflow ‚Äî is_epi_workflow","text":"Test epi_workflow","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for an epi_workflow ‚Äî is_epi_workflow","text":"","code":"is_epi_workflow(x)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for an epi_workflow ‚Äî is_epi_workflow","text":"x object.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/is_epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for an epi_workflow ‚Äî is_epi_workflow","text":"TRUE object inherits epi_workflow.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/isoweek_leap.html","id":null,"dir":"Reference","previous_headings":"","what":"isoweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî isoweek_leap","title":"isoweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî isoweek_leap","text":"isoweek, assigns week 53 value 999 instead mirrors assignments yday_leap","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/isoweek_leap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"isoweek, but it assigns week 53 the value of 999 instead so it mirrors the assignments in yday_leap ‚Äî isoweek_leap","text":"","code":"isoweek_leap(time_value)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer-processors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","title":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","text":"functions mainly internal. can access validate different layers frosting.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer-processors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","text":"","code":"extract_layers(x, ...)  # S3 method for class 'frosting' extract_layers(x, ...)  # S3 method for class 'workflow' extract_layers(x, ...)  is_layer(x)  validate_layer(x, ..., arg = rlang::caller_arg(x), call = caller_env())  detect_layer(x, name, ...)  # S3 method for class 'frosting' detect_layer(x, name, ...)  # S3 method for class 'workflow' detect_layer(x, name, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer-processors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","text":"x epi_workflow, frosting, layer object ... additional arguments possible future methods arg name input (error reporting) call environment (error reporting) name layer name detect","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer-processors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","text":"logical validators/detectors list layers extractors","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer-processors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract, validate, or detect layers of frosting ‚Äî extract_layers","text":"","code":"f <- frosting() %>% layer_predict() wf <- epi_workflow(postprocessor = f)  is_layer(layer(\"what_the_what\")) #> Error: Can't create layer without a stat. detect_layer(f, \"layer_predict\") #> [1] TRUE detect_layer(wf, \"layer_predict\") #> [1] TRUE  extract_layers(f) #> [[1]] #> Creating predictions: \"<calculated>\" #>  extract_layers(wf) #> [[1]] #> Creating predictions: \"<calculated>\" #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer.html","id":null,"dir":"Reference","previous_headings":"","what":"layer sets the class of the layer ‚Äî layer","title":"layer sets the class of the layer ‚Äî layer","text":"layer sets class layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"layer sets the class of the layer ‚Äî layer","text":"","code":"layer(subclass, ..., .prefix = \"layer_\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"layer sets the class of the layer ‚Äî layer","text":"subclass character string resulting class. example, subclass = \"blah\" layer object returned class layer_blah. ... arguments operator returned. .prefix Prefix subclass created.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"layer sets the class of the layer ‚Äî layer","text":"updated layer new class","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"Postprocessing step add forecast date","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"","code":"layer_add_forecast_date(   frosting,   forecast_date = NULL,   id = rand_id(\"add_forecast_date\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"frosting frosting postprocessor forecast_date forecast date add column epi_df. cases, specified form \"yyyy-mm-dd\". Note forecast date left unspecified, set one two values.  step_adjust_latency step present, uses forecast_date set function. Otherwise, uses maximum time_value across data used pre-processing, fitting model, postprocessing. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"use function, either specify forecast date leave forecast date unspecifed . latter case, forecast date set maximum time value data used pre-processing, fitting model, postprocessing. case, forecast date less maximum as_of value (data used pre-processing, model fitting, postprocessing), appropriate warning thrown.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_forecast_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Postprocessing step to add the forecast date ‚Äî layer_add_forecast_date","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit() wf <- epi_workflow(r, linear_reg()) %>% fit(jhu) latest <- jhu %>%   filter(time_value >= max(time_value) - 14)  # Don't specify `forecast_date` (by default, this should be last date in latest) f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred) wf0 <- wf %>% add_frosting(f) p0 <- predict(wf0, latest) p0 #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.312 #> 3 ny        2021-12-31 0.295  # Specify a `forecast_date` that is greater than or equal to `as_of` date f <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date(forecast_date = \"2022-05-31\") %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p1 <- predict(wf1, latest) p1 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred forecast_date #>   <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2022-05-31    #> 2 ca        2021-12-31 0.312 2022-05-31    #> 3 ny        2021-12-31 0.295 2022-05-31     # Specify a `forecast_date` that is less than `as_of` date f2 <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date(forecast_date = \"2021-12-31\") %>%   layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- predict(wf2, latest) p2 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred forecast_date #>   <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2021-12-31    #> 2 ca        2021-12-31 0.312 2021-12-31    #> 3 ny        2021-12-31 0.295 2021-12-31     # Do not specify a forecast_date f3 <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date() %>%   layer_naomit(.pred) wf3 <- wf %>% add_frosting(f3)  p3 <- predict(wf3, latest) p3 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred forecast_date #>   <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2021-12-31    #> 2 ca        2021-12-31 0.312 2021-12-31    #> 3 ny        2021-12-31 0.295 2021-12-31"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessing step to add the target date ‚Äî layer_add_target_date","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"Postprocessing step add target date","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"","code":"layer_add_target_date(   frosting,   target_date = NULL,   id = rand_id(\"add_target_date\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"frosting frosting postprocessor target_date target date add column epi_df. forecast date specified upstream (either step_adjust_latency layer_forecast_date), forecast date plus ahead (step_epi_ahead epi_recipe). Otherwise, maximum time_value (data used pre-processing, fitting model, postprocessing) plus ahead, ahead specified preprocessing. user may override specifying target date (form \"yyyy-mm-dd\"). id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"default, function assumes value ahead specified preprocessing step (likely step_epi_ahead). , ahead added forecast_date test data get target date. forecast_date can set 3 ways: step_adjust_latency, typically uses training epi_df's as_of layer_add_forecast_date, inherits 1 manually specifed none case, simply maximum time_value every dataset used (prep, training, prediction).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_add_target_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Postprocessing step to add the target date ‚Äî layer_add_target_date","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  # Use ahead + forecast date f <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date(forecast_date = as.Date(\"2022-05-31\")) %>%   layer_add_target_date() %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- forecast(wf1) p #> An `epi_df` object, 3 x 5 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 5 #>   geo_value time_value .pred forecast_date target_date #>   <chr>     <date>     <dbl> <date>        <date>      #> 1 ak        2021-12-31 0.245 2022-05-31    2022-06-07  #> 2 ca        2021-12-31 0.312 2022-05-31    2022-06-07  #> 3 ny        2021-12-31 0.295 2022-05-31    2022-06-07   # Use ahead + forecast_date from adjust_latency # setting the `as_of` to something realistic attributes(jhu)$metadata$as_of <- max(jhu$time_value) + 3 r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_adjust_latency(method = \"extend_ahead\") %>%   step_epi_naomit() #> Warning: If `method` is \"extend_ahead\", then the previous `step_epi_ahead` won't be #> modified. f2 <- frosting() %>%   layer_predict() %>%   layer_add_target_date() %>%   layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- forecast(wf2) p2 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred target_date #>   <chr>     <date>     <dbl> <date>      #> 1 ak        2021-12-31 0.245 2022-01-07  #> 2 ca        2021-12-31 0.312 2022-01-07  #> 3 ny        2021-12-31 0.295 2022-01-07   # Use ahead + max time value from pre, fit, post # which is the same if include `layer_add_forecast_date()` f3 <- frosting() %>%   layer_predict() %>%   layer_add_target_date() %>%   layer_naomit(.pred) wf3 <- wf %>% add_frosting(f3)  p3 <- forecast(wf2) p2 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred target_date #>   <chr>     <date>     <dbl> <date>      #> 1 ak        2021-12-31 0.245 2022-01-07  #> 2 ca        2021-12-31 0.312 2022-01-07  #> 3 ny        2021-12-31 0.295 2022-01-07   # Specify own target date f4 <- frosting() %>%   layer_predict() %>%   layer_add_target_date(target_date = \"2022-01-08\") %>%   layer_naomit(.pred) wf4 <- wf %>% add_frosting(f4)  p4 <- forecast(wf4) p4 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred target_date #>   <chr>     <date>     <dbl> <date>      #> 1 ak        2021-12-31 0.245 2022-01-08  #> 2 ca        2021-12-31 0.312 2022-01-08  #> 3 ny        2021-12-31 0.295 2022-01-08"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"layer creates quantile forecasts taking sample interpolated CDF flatline residuals, shuffling . added point prediction.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"","code":"layer_cdc_flatline_quantiles(   frosting,   ...,   aheads = 1:4,   quantile_levels = c(0.01, 0.025, 1:19/20, 0.975, 0.99),   nsims = 1000,   by_key = \"geo_value\",   symmetrize = FALSE,   nonneg = TRUE,   id = rand_id(\"cdc_baseline_bands\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"frosting frosting postprocessor ... Unused, include consistency layers. aheads Numeric vector desired forecast horizons. given \"units training data\". , example, data typically observed daily (possibly missing values), weekly forecast targets, use c(7, 14, 21, 28). weekly data, use 1:4. quantile_levels Numeric vector probabilities values (0,1) referring desired predictive intervals. default standard set COVID Forecast Hub. nsims Positive integer. number draws empirical CDF. samples spaced evenly (0, 1) scale, F_X(x) resulting linear interpolation X scale. achieved stats::quantile() Type 7 (default function). by_key character vector keys group residuals calculating quantiles. default, c() performs grouping. symmetrize Scalar logical. TRUE, two things: () forces \"empirical\" CDF residuals symmetric pretending every actually-observed residual X also observed another residual -X, (ii) ahead, forces median simulated value equal point prediction adding subtracting amount every simulated value. Adjustments (ii) take place propagating forward simulating next ahead. forces 1-ahead predictive intervals symmetric point prediction, encourages larger aheads symmetric. nonneg Scalar logical. Force predictive intervals non-negative. non-negativity forced propagating forward, slightly different behaviour occur using layer_threshold(). Thresholding ahead takes place shifting symmetrize. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"updated frosting postprocessor. Calling predict() result additional <list-col> named .pred_distn_all containing 2-column tibble::tibble()'s. desired combination key's, tibble contain one row per ahead associated quantile_pred().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"layer intended used concert flatline(). can also used anything else. long residuals available fitted model, layer useful. Like layer_residual_quantiles() uses residuals fitted model object. However, propagates forward aheads, iteratively shuffling (randomly), adding previous set. contrast happens flatline_forecaster(). using flatline() underlying engine (), result predictions (recent observed value), model calculates separate residuals ahead comparing observations future. version continues use set residuals, adds produce wider intervals ahead increases.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_cdc_flatline_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC Flatline Forecast Quantiles ‚Äî layer_cdc_flatline_quantiles","text":"","code":"library(recipes) #>  #> Attaching package: ‚Äòrecipes‚Äô #> The following object is masked from ‚Äòpackage:stats‚Äô: #>  #>     step r <- epi_recipe(covid_case_death_rates) %>%   # data is \"daily\", so we fit this to 1 ahead, the result will contain   # 1 day ahead residuals   step_epi_ahead(death_rate, ahead = 1L, skip = TRUE) %>%   update_role(death_rate, new_role = \"predictor\") %>%   add_role(time_value, geo_value, new_role = \"predictor\")  forecast_date <- max(covid_case_death_rates$time_value)  f <- frosting() %>%   layer_predict() %>%   layer_cdc_flatline_quantiles(aheads = c(7, 14, 21, 28), symmetrize = TRUE)  eng <- linear_reg(engine = \"flatline\")  wf <- epi_workflow(r, eng, f) %>% fit(covid_case_death_rates) preds <- forecast(wf) %>%   select(-time_value) %>%   mutate(forecast_date = forecast_date) preds #> # A tibble: 56 √ó 4 #>    geo_value  .pred .pred_distn_all  forecast_date #>    <chr>      <dbl> <list>           <date>        #>  1 ak        0.0395 <tibble [4 √ó 2]> 2021-12-31    #>  2 al        0.107  <tibble [4 √ó 2]> 2021-12-31    #>  3 ar        0.490  <tibble [4 √ó 2]> 2021-12-31    #>  4 as        0      <tibble [4 √ó 2]> 2021-12-31    #>  5 az        0.608  <tibble [4 √ó 2]> 2021-12-31    #>  6 ca        0.139  <tibble [4 √ó 2]> 2021-12-31    #>  7 co        0.551  <tibble [4 √ó 2]> 2021-12-31    #>  8 ct        0.333  <tibble [4 √ó 2]> 2021-12-31    #>  9 dc        0.0802 <tibble [4 √ó 2]> 2021-12-31    #> 10 de        0.217  <tibble [4 √ó 2]> 2021-12-31    #> # ‚Ñπ 46 more rows  preds <- preds %>%   tidyr::unnest(.pred_distn_all) %>%   pivot_quantiles_wider(.pred_distn) %>%   mutate(target_date = forecast_date + ahead)  library(ggplot2) four_states <- c(\"ca\", \"pa\", \"wa\", \"ny\") preds %>%   filter(geo_value %in% four_states) %>%   ggplot(aes(target_date)) +   geom_ribbon(aes(ymin = `0.1`, ymax = `0.9`), fill = blues9[3]) +   geom_ribbon(aes(ymin = `0.25`, ymax = `0.75`), fill = blues9[6]) +   geom_line(aes(y = .pred), color = \"orange\") +   geom_line(     data = covid_case_death_rates %>% filter(geo_value %in% four_states),     aes(x = time_value, y = death_rate)   ) +   scale_x_date(limits = c(forecast_date - 90, forecast_date + 30)) +   labs(x = \"Date\", y = \"Death rate\") +   facet_wrap(~geo_value, scales = \"free_y\") +   theme_bw() +   geom_vline(xintercept = forecast_date) #> Warning: Removed 275 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_naomit.html","id":null,"dir":"Reference","previous_headings":"","what":"Omit NAs from predictions or other columns ‚Äî layer_naomit","title":"Omit NAs from predictions or other columns ‚Äî layer_naomit","text":"Omit NAs predictions columns","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_naomit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Omit NAs from predictions or other columns ‚Äî layer_naomit","text":"","code":"layer_naomit(frosting, ..., id = rand_id(\"naomit\"))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_naomit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Omit NAs from predictions or other columns ‚Äî layer_naomit","text":"frosting frosting postprocessor ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. Typical usage .pred remove rows NA predictions. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_naomit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Omit NAs from predictions or other columns ‚Äî layer_naomit","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_naomit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Omit NAs from predictions or other columns ‚Äî layer_naomit","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7)  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred)  wf1 <- wf %>% add_frosting(f)  p <- forecast(wf1) p #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.312 #> 3 ny        2021-12-31 0.295"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_point_from_distn.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","title":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","text":"function adds postprocessing layer extract point forecast distributional forecast. NOTE: default arguments, remove information, one usually call layer_quantile_distn() set name argument something specific.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_point_from_distn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","text":"","code":"layer_point_from_distn(   frosting,   ...,   type = c(\"median\", \"mean\"),   name = NULL,   id = rand_id(\"point_from_distn\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_point_from_distn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","text":"frosting frosting postprocessor ... Unused, include consistency layers. type character. Either mean median. name character. name output column. default NULL overwrite .pred column, removing distribution information. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_point_from_distn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","text":"updated frosting postprocessor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_point_from_distn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts distributional forecasts to point forecasts ‚Äî layer_point_from_distn","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, quantile_reg(quantile_levels = c(.25, .5, .75))) %>%   fit(jhu)  f1 <- frosting() %>%   layer_predict() %>%   layer_quantile_distn() %>% # puts the other quantiles in a different col   layer_point_from_distn() %>% # mutate `.pred` to contain only a point prediction   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f1)  p1 <- forecast(wf1) p1 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value  .pred .pred_distn #>   <chr>     <date>      <dbl>   <qtls(7)> #> 1 ak        2021-12-31 0.0580     [0.058] #> 2 ca        2021-12-31 0.179      [0.179] #> 3 ny        2021-12-31 0.274      [0.274]  f2 <- frosting() %>%   layer_predict() %>%   layer_point_from_distn() %>% # mutate `.pred` to contain only a point prediction   layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- forecast(wf2) p2 #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value  .pred #>   <chr>     <date>      <dbl> #> 1 ak        2021-12-31 0.0580 #> 2 ca        2021-12-31 0.179  #> 3 ny        2021-12-31 0.274"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_population_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","title":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","text":"layer_population_scaling creates specification frosting layer \"undo\" per-capita scaling. Typical usage load dataset contains state-level population, use convert predictions made rate-scale model raw scale multiplying population. Although, worth noting nothing special \"population\". function can used scale variable. Population standard use case epidemiology forecasting scenario. value passed multiply selected variables rate_rescaling argument common divisor selected variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_population_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","text":"","code":"layer_population_scaling(   frosting,   ...,   df,   by = NULL,   df_pop_col,   rate_rescaling = 1,   create_new = TRUE,   suffix = \"_scaled\",   id = rand_id(\"population_scaling\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_population_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","text":"frosting frosting postprocessor. layer added sequence operations frosting. ... One selector functions scale variables step. See recipes::selections() details. df data frame contains population data used inverting existing scaling. (possibly named) character vector variables join . NULL, default, function try infer reasonable set columns. First, try join variables test data roles \"geo_value\", \"key\", \"time_value\" also appear df; roles automatically set using epi_df, can use, e.g., update_role. roles set, try perform natural join, using variables common training/test data population data. columns training/testing data df name (included ), .df suffix added one user-provided data disambiguate. join different variables epi_df df, use named vector. example, = c(\"geo_value\" = \"states\") match epi_df$geo_value df$states. join multiple variables, use vector length > 1. example, = c(\"geo_value\" = \"states\", \"county\" = \"county\") match epi_df$geo_value df$states epi_df$county df$county. See dplyr::left_join() details. df_pop_col name column data frame df contains population data used scaling. rate_rescaling Sometimes rates \"per 100K\" \"per 1M\" rather \"per person\". Adjustments can made . example, original rate \"per 100K\", set rate_rescaling = 1e5 get counts back. create_new TRUE create new column keep original column epi_df. suffix character. suffix added column name create_new = TRUE. Default \"_scaled\". id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_population_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_population_scaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert per-capita predictions to raw scale ‚Äî layer_population_scaling","text":"","code":"jhu <- cases_deaths_subset %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ca\", \"ny\")) %>%   select(geo_value, time_value, cases)  pop_data <- data.frame(states = c(\"ca\", \"ny\"), value = c(20000, 30000))  r <- epi_recipe(jhu) %>%   step_population_scaling(     df = pop_data,     df_pop_col = \"value\",     by = c(\"geo_value\" = \"states\"),     cases, suffix = \"_scaled\"   ) %>%   step_epi_lag(cases_scaled, lag = c(0, 7, 14)) %>%   step_epi_ahead(cases_scaled, ahead = 7, role = \"outcome\") %>%   step_epi_naomit()  f <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred) %>%   layer_naomit(.pred) %>%   layer_population_scaling(.pred,     df = pop_data,     by = c(\"geo_value\" = \"states\"),     df_pop_col = \"value\"   )  wf <- epi_workflow(r, linear_reg()) %>%   fit(jhu) %>%   add_frosting(f)  forecast(wf) #> An `epi_df` object, 2 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2024-03-20 #>  #> # A tibble: 2 √ó 4 #>   geo_value time_value .pred .pred_scaled #>   <chr>     <date>     <dbl>        <dbl> #> 1 ca        2021-12-31  4.25       84938. #> 2 ny        2021-12-31  5.93      177766."},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction layer for postprocessing ‚Äî layer_predict","title":"Prediction layer for postprocessing ‚Äî layer_predict","text":"Implements prediction fitted epi_workflow. One may want different types prediction, potentially apply amount postprocessing. typically first layer frosting postprocessor.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction layer for postprocessing ‚Äî layer_predict","text":"","code":"layer_predict(   frosting,   type = NULL,   opts = list(),   ...,   id = rand_id(\"predict_default\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction layer for postprocessing ‚Äî layer_predict","text":"frosting frosting object type single character value NULL. Possible values \"numeric\", \"class\", \"prob\", \"conf_int\", \"pred_int\", \"quantile\", \"time\", \"hazard\", \"survival\", \"raw\". NULL, predict() choose appropriate value based model's mode. opts list optional arguments underlying predict function used type = \"raw\". list include options model object new data predicted. ... Additional parsnip-related options, depending value type. Arguments underlying model's prediction function passed (use opts argument instead). Possible arguments : interval: type equal \"survival\" \"quantile\", interval estimates added, available? Options \"none\" \"confidence\". level: type equal \"conf_int\", \"pred_int\", \"survival\", parameter tail area intervals (e.g. confidence level confidence intervals). Default value 0.95. std_error: type equal \"conf_int\" \"pred_int\", add standard error fit prediction (scale linear predictors). Default value FALSE. quantile: type equal quantile, quantiles distribution. Default (1:9)/10. eval_time: type equal \"survival\" \"hazard\", time points survival probability hazard estimated. id string identifying layer","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction layer for postprocessing ‚Äî layer_predict","text":"updated frosting object","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction layer for postprocessing ‚Äî layer_predict","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu) latest <- jhu %>% filter(time_value >= max(time_value) - 14)  # Predict layer alone f <- frosting() %>% layer_predict() wf1 <- wf %>% add_frosting(f)  p1 <- predict(wf1, latest) p1 #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-12-31 0.245 #> 2 ca        2021-12-31 0.312 #> 3 ny        2021-12-31 0.295  # Prediction with interval f <- frosting() %>% layer_predict(type = \"pred_int\") wf2 <- wf %>% add_frosting(f)  p2 <- predict(wf2, latest) p2 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred_lower .pred_upper #>   <chr>     <date>           <dbl>       <dbl> #> 1 ak        2021-12-31      -0.366       0.857 #> 2 ca        2021-12-31      -0.285       0.909 #> 3 ny        2021-12-31      -0.302       0.891"},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predictive_distn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns predictive distributions ‚Äî layer_predictive_distn","text":"","code":"layer_predictive_distn(   frosting,   ...,   dist_type = c(\"gaussian\", \"student_t\"),   truncate = c(-Inf, Inf),   name = \".pred_distn\",   id = rand_id(\"predictive_distn\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predictive_distn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns predictive distributions ‚Äî layer_predictive_distn","text":"frosting frosting postprocessor ... Unused, include consistency layers. dist_type Gaussian Student's t predictive intervals truncate truncate distribution interval name character. name output column. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predictive_distn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns predictive distributions ‚Äî layer_predictive_distn","text":"updated frosting postprocessor additional columns residual quantiles added prediction","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_predictive_distn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns predictive distributions ‚Äî layer_predictive_distn","text":"function calculates approximation parametric predictive distribution. Predictive distributions linear models require x* (X'X)^{-1} x* along degrees freedom. function approximates . reasonably accurate models fit using lm new point x* far bulk data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns predictive quantiles ‚Äî layer_quantile_distn","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"function calculates quantiles prediction distributional.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"","code":"layer_quantile_distn(   frosting,   ...,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   truncate = c(-Inf, Inf),   name = \".pred_distn\",   id = rand_id(\"quantile_distn\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"frosting frosting postprocessor ... Unused, include consistency layers. quantile_levels vector probabilities extract truncate truncate distribution interval name character. name output column. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"updated frosting postprocessor. additional column predictive quantiles added predictions.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"Currently, distributional modes/engines quantile_reg() smooth_quantile_reg() rand_forest(mode = \"regression\") %>% set_engine(\"grf_quantiles\") engines used, layer grab estimated (extrapolated) quantiles requested quantile values.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_quantile_distn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns predictive quantiles ‚Äî layer_quantile_distn","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, quantile_reg(quantile_levels = c(.25, .5, .75))) %>%   fit(jhu)  f <- frosting() %>%   layer_predict() %>%   layer_quantile_distn() %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- forecast(wf1) p #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value     .pred .pred_distn #>   <chr>     <date>     <qtls(3)>   <qtls(7)> #> 1 ak        2021-12-31   [0.058]     [0.058] #> 2 ca        2021-12-31   [0.179]     [0.179] #> 3 ny        2021-12-31   [0.274]     [0.274]"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_residual_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","title":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","text":"Creates predictions based residual quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_residual_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","text":"","code":"layer_residual_quantiles(   frosting,   ...,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   symmetrize = TRUE,   by_key = character(0L),   name = \".pred_distn\",   id = rand_id(\"residual_quantiles\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_residual_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","text":"frosting frosting postprocessor ... Unused, include consistency layers. quantile_levels numeric vector probabilities values (0,1) referring desired quantile. Note 0.5 always included even left user. symmetrize logical. TRUE interval symmetric. by_key character vector keys group residuals calculating quantiles. default, c() performs grouping. name character. name output column. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_residual_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","text":"updated frosting postprocessor additional columns residual quantiles added prediction","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_residual_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates predictions based on residual quantiles ‚Äî layer_residual_quantiles","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  f <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(     quantile_levels = c(0.025, 0.975),     symmetrize = FALSE   ) %>%   layer_naomit(.pred) wf1 <- wf %>% add_frosting(f)  p <- forecast(wf1)  f2 <- frosting() %>%   layer_predict() %>%   layer_residual_quantiles(     quantile_levels = c(0.3, 0.7),     by_key = \"geo_value\"   ) %>%   layer_naomit(.pred) wf2 <- wf %>% add_frosting(f2)  p2 <- forecast(wf2) #> Warning: Some grouping keys are not in data.frame returned by the `residuals()` method. #> Groupings may not be correct."},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","title":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","text":"postprocessing step used set prediction values smaller lower threshold higher upper threshold equal threshold values.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","text":"","code":"layer_threshold(   frosting,   ...,   lower = 0,   upper = Inf,   id = rand_id(\"threshold\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","text":"frosting frosting postprocessor ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. Typical usage .pred threshold predictions range (say, nonnegative). lower Lower threshold prediction values. , predictions less lower bound set . Default value 0. upper Upper threshold prediction values. , predictions greater upper bound set . Default value Inf. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","text":"updated frosting postprocessor","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lower and upper thresholds for predicted values ‚Äî layer_threshold","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value < \"2021-03-08\", geo_value %in% c(\"ak\", \"ca\", \"ar\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit() wf <- epi_workflow(r, linear_reg()) %>% fit(jhu)  f <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred, lower = 0.180, upper = 0.310) wf <- wf %>% add_frosting(f) p <- forecast(wf) p #> An `epi_df` object, 3 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 3 #>   geo_value time_value .pred #>   <chr>     <date>     <dbl> #> 1 ak        2021-03-07  0.18 #> 2 ar        2021-03-07  0.18 #> 3 ca        2021-03-07  0.31"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_unnest.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest prediction list-cols ‚Äî layer_unnest","title":"Unnest prediction list-cols ‚Äî layer_unnest","text":"Unnest prediction list-cols","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_unnest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest prediction list-cols ‚Äî layer_unnest","text":"","code":"layer_unnest(frosting, ..., id = rand_id(\"unnest\"))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_unnest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest prediction list-cols ‚Äî layer_unnest","text":"frosting frosting postprocessor ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame, expressions like x:y can used select range variables. id random id string","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/layer_unnest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest prediction list-cols ‚Äî layer_unnest","text":"updated frosting postprocessor","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/nested_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a vector of quantile distributions into a list-col ‚Äî nested_quantiles","text":"","code":"nested_quantiles(x)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/nested_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a vector of quantile distributions into a list-col ‚Äî nested_quantiles","text":"x distribution containing dist_quantiles","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/nested_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a vector of quantile distributions into a list-col ‚Äî nested_quantiles","text":"list-col","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/nested_quantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a vector of quantile distributions into a list-col ‚Äî nested_quantiles","text":"function deprecated. recommended alternative hardhat::quantile_pred() tibble::as_tibble()","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/nested_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a vector of quantile distributions into a list-col ‚Äî nested_quantiles","text":"","code":"pred_quantile <- quantile_pred(matrix(rnorm(20), 5), c(.2, .4, .6, .8)) nested_quantiles(pred_quantile) #> Warning: `nested_quantiles()` was deprecated in epipredict 0.1.11. #> ‚Ñπ Please use `hardhat::quantile_pred()` instead. #> # A tibble: 5 √ó 1 #>   data             #>   <list>           #> 1 <tibble [4 √ó 2]> #> 2 <tibble [4 √ó 2]> #> 3 <tibble [4 √ó 2]> #> 4 <tibble [4 √ó 2]> #> 5 <tibble [4 √ó 2]>  pred_quantile %>%   as_tibble() %>%   tidyr::nest(.by = .row) %>%   dplyr::select(-.row) #> # A tibble: 5 √ó 1 #>   data             #>   <list>           #> 1 <tibble [4 √ó 2]> #> 2 <tibble [4 √ó 2]> #> 3 <tibble [4 √ó 2]> #> 4 <tibble [4 √ó 2]> #> 5 <tibble [4 √ó 2]>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/new_epi_recipe_blueprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","title":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","text":"Used simplicity. See hardhat::new_recipe_blueprint() hardhat::default_recipe_blueprint() details.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/new_epi_recipe_blueprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","text":"","code":"new_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\",   ptypes = NULL,   recipe = NULL,   ...,   subclass = character() )  epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\" )  default_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\" )  new_default_epi_recipe_blueprint(   intercept = FALSE,   allow_novel_levels = FALSE,   fresh = TRUE,   composition = \"tibble\",   ptypes = NULL,   recipe = NULL,   extra_role_ptypes = NULL,   ...,   subclass = character() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/new_epi_recipe_blueprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","text":"intercept logical. intercept included processed data? information used process function mold forge function list. allow_novel_levels logical. novel factor levels allowed prediction time? information used clean function forge function list, passed scream(). fresh already trained operations re-trained prep() called? composition Either \"tibble\", \"matrix\", \"dgCMatrix\" format processed predictors. \"matrix\" \"dgCMatrix\" chosen, predictors must numeric preprocessing method applied; otherwise error thrown. ptypes Either NULL, named list 2 elements, predictors outcomes, 0-row tibbles. ptypes generated automatically mold() time used validate new_data prediction time. recipe Either NULL, unprepped recipe. argument set automatically mold() time. ... Name-value pairs additional elements blueprints subclass blueprint. subclass character vector. subclasses blueprint. extra_role_ptypes named list. names unique non-standard recipe roles (.e. everything except \"predictors\" \"outcomes\"). values prototypes original columns role. used validation forge().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/new_epi_recipe_blueprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","text":"recipe blueprint.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/new_epi_recipe_blueprint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recipe blueprint that accounts for epi_df panel data ‚Äî new_epi_recipe_blueprint","text":"bake_dependent_roles automatically set epi_df defaults.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pad_to_end.html","id":null,"dir":"Reference","previous_headings":"","what":"pad every group at the right interval ‚Äî pad_to_end","title":"pad every group at the right interval ‚Äî pad_to_end","text":"Perform last observation carried forward group group basis. uses guess_period find appropriate interval fill-forward . maintains grouping structure recieves. fill \"interior\" NA values occurring data beforehand.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pad_to_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pad every group at the right interval ‚Äî pad_to_end","text":"","code":"pad_to_end(x, groups, end_date, columns_to_complete = NULL)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pad_to_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pad every group at the right interval ‚Äî pad_to_end","text":"x epi_df filled forward. groups grouping fill forward columns_to_complete columns apply completion . default every non-key column epi_df","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_longer.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","title":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","text":"column contains quantile_pred \"lengthened\" quantile levels serving 1 column values another. multiple columns selected, prefixed column name.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_longer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","text":"","code":"pivot_quantiles_longer(.data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_longer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","text":".data data frame, data frame extension tibble epi_df. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame. Note one variable can selected operation.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_longer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","text":"object class .data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_longer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a column containing quantile_pred longer ‚Äî pivot_quantiles_longer","text":"","code":"d1 <- quantile_pred(rbind(1:3, 2:4), 1:3 / 4) d2 <- quantile_pred(rbind(2:4, 3:5), 2:4 / 5) tib <- tibble(g = c(\"a\", \"b\"), d1 = d1, d2 = d2)  pivot_quantiles_longer(tib, \"d1\") #> # A tibble: 6 √ó 4 #>   g            d2 d1_value d1_quantile_level #>   <chr> <qtls(3)>    <int>             <dbl> #> 1 a         [2.5]        1              0.25 #> 2 a         [2.5]        2              0.5  #> 3 a         [2.5]        3              0.75 #> 4 b         [3.5]        2              0.25 #> 5 b         [3.5]        3              0.5  #> 6 b         [3.5]        4              0.75 pivot_quantiles_longer(tib, dplyr::ends_with(\"1\")) #> # A tibble: 6 √ó 4 #>   g            d2 d1_value d1_quantile_level #>   <chr> <qtls(3)>    <int>             <dbl> #> 1 a         [2.5]        1              0.25 #> 2 a         [2.5]        2              0.5  #> 3 a         [2.5]        3              0.75 #> 4 b         [3.5]        2              0.25 #> 5 b         [3.5]        3              0.5  #> 6 b         [3.5]        4              0.75 pivot_quantiles_longer(tib, d2) #> # A tibble: 6 √ó 4 #>   g            d1 d2_value d2_quantile_level #>   <chr> <qtls(3)>    <int>             <dbl> #> 1 a           [2]        2               0.4 #> 2 a           [2]        3               0.6 #> 3 a           [2]        4               0.8 #> 4 b           [3]        3               0.4 #> 5 b           [3]        4               0.6 #> 6 b           [3]        5               0.8"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_wider.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","title":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","text":"selected columns contain quantile_pred \"widened\" \"taus\" (quantile) serving names values data frame. pivoting multiple columns, original column name used prefix.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_wider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","text":"","code":"pivot_quantiles_wider(.data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_wider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","text":".data data frame, data frame extension tibble epi_df. ... <tidy-select> One unquoted expressions separated commas. Variable names can used positions data frame. Note one variable can selected operation.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_wider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","text":"object class .data","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/pivot_quantiles_wider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot a column containing quantile_pred wider ‚Äî pivot_quantiles_wider","text":"","code":"d1 <- quantile_pred(rbind(1:3, 2:4), 1:3 / 4) d2 <- quantile_pred(rbind(2:4, 3:5), 2:4 / 5) tib <- tibble(g = c(\"a\", \"b\"), d1 = d1, d2 = d2)  pivot_quantiles_wider(tib, \"d1\") #> # A tibble: 2 √ó 5 #>   g            d2 `0.25` `0.5` `0.75` #>   <chr> <qtls(3)>  <int> <int>  <int> #> 1 a         [2.5]      1     2      3 #> 2 b         [3.5]      2     3      4 pivot_quantiles_wider(tib, dplyr::ends_with(\"2\")) #> # A tibble: 2 √ó 5 #>   g            d1 `0.4` `0.6` `0.8` #>   <chr> <qtls(3)> <int> <int> <int> #> 1 a           [2]     2     3     4 #> 2 b           [3]     3     4     5 pivot_quantiles_wider(tib, d2) #> # A tibble: 2 √ó 5 #>   g            d1 `0.4` `0.6` `0.8` #>   <chr> <qtls(3)> <int> <int> <int> #> 1 a           [2]     2     3     4 #> 2 b           [3]     3     4     5"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/predict-epi_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from an epi_workflow ‚Äî predict-epi_workflow","title":"Predict from an epi_workflow ‚Äî predict-epi_workflow","text":"predict() method fit epi_workflow object. nice thing predicting epi_workflow : Preprocess new_data using preprocessing method specified workflow created fit. accomplished using hardhat::forge(), apply formula preprocessing call recipes::bake() recipe supplied. Call parsnip::predict.model_fit() using underlying fit parsnip model. Ensure returned object epiprocess::epi_df possible. Specifically, output time_value geo_value columns well prediction.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/predict-epi_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from an epi_workflow ‚Äî predict-epi_workflow","text":"","code":"# S3 method for class 'epi_workflow' predict(object, new_data, type = NULL, opts = list(), ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/predict-epi_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from an epi_workflow ‚Äî predict-epi_workflow","text":"object epi_workflow fit workflows::fit.workflow() new_data data frame containing new predictors preprocess predict type single character value NULL. Possible values \"numeric\", \"class\", \"prob\", \"conf_int\", \"pred_int\", \"quantile\", \"time\", \"hazard\", \"survival\", \"raw\". NULL, predict() choose appropriate value based model's mode. opts list optional arguments underlying predict function used type = \"raw\". list include options model object new data predicted. ... Additional parsnip-related options, depending value type. Arguments underlying model's prediction function passed (use opts argument instead). Possible arguments : interval: type equal \"survival\" \"quantile\", interval estimates added, available? Options \"none\" \"confidence\". level: type equal \"conf_int\", \"pred_int\", \"survival\", parameter tail area intervals (e.g. confidence level confidence intervals). Default value 0.95. std_error: type equal \"conf_int\" \"pred_int\", add standard error fit prediction (scale linear predictors). Default value FALSE. quantile: type equal quantile, quantiles distribution. Default (1:9)/10. eval_time: type equal \"survival\" \"hazard\", time points survival probability hazard estimated.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/predict-epi_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from an epi_workflow ‚Äî predict-epi_workflow","text":"data frame model predictions, many rows new_data . new_data epi_df data frame time_value geo_value columns, result well.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/predict-epi_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from an epi_workflow ‚Äî predict-epi_workflow","text":"","code":"jhu <- covid_case_death_rates  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(case_rate, lag = c(0, 7, 14)) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>% fit(jhu) latest <- jhu %>% dplyr::filter(time_value >= max(time_value) - 14)  preds <- predict(wf, latest) preds #> An `epi_df` object, 56 x 3 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 56 √ó 3 #>    geo_value time_value   .pred #>    <chr>     <date>       <dbl> #>  1 ak        2021-12-31 0.362   #>  2 al        2021-12-31 0.255   #>  3 ar        2021-12-31 0.431   #>  4 as        2021-12-31 0.00105 #>  5 az        2021-12-31 0.647   #>  6 ca        2021-12-31 0.276   #>  7 co        2021-12-31 0.718   #>  8 ct        2021-12-31 0.614   #>  9 dc        2021-12-31 1.00    #> 10 de        2021-12-31 0.709   #> # ‚Ñπ 46 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile.quantile_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantiles from a distribution ‚Äî quantile.quantile_pred","title":"Quantiles from a distribution ‚Äî quantile.quantile_pred","text":"Given hardhat::quantile_pred object, users may wish compute additional quantile_levels part object. function attempts estimate quantities assumptions. Interior probabilities, contained within existing probabilities interpolated manner controled middle argument. outside existing probabilities extrapolated assumption tails distribution decays exponentially. Optionally, one may constrain quantiles within support (say, [0, Inf)).","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile.quantile_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantiles from a distribution ‚Äî quantile.quantile_pred","text":"","code":"# S3 method for class 'quantile_pred' quantile(   x,   probs = seq(0, 1, 0.25),   na.rm = FALSE,   lower = -Inf,   upper = Inf,   middle = c(\"cubic\", \"linear\"),   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile.quantile_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantiles from a distribution ‚Äî quantile.quantile_pred","text":"x numeric vector whose sample quantiles wanted,     object class method defined (see also     ‚Äòdetails‚Äô). NA NaN values     allowed numeric vectors unless na.rm TRUE. probs numeric vector probabilities values     \\([0,1]\\).  (Values 2e-14 outside     range accepted moved nearby endpoint.) na.rm logical; true, NA NaN's     removed x quantiles computed. lower Scalar. Optional lower bound. upper Scalar. Optional upper bound. middle Controls extrapolation \"interior\" probabilities performed. \"cubic\" attempts use stats::splinefun() \"linear\" uses stats::approx(). \"linear\" method used fallback \"cubic\" fail reason. ... unused","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile.quantile_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantiles from a distribution ‚Äî quantile.quantile_pred","text":"matrix one row entry x one column value probs","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile.quantile_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantiles from a distribution ‚Äî quantile.quantile_pred","text":"","code":"qp <- quantile_pred(matrix(1:8, nrow = 2, byrow = TRUE), 1:4 / 5) quantile(qp) #>      [,1] [,2] [,3] [,4] [,5] #> [1,] -Inf 1.25  2.5 3.75  Inf #> [2,] -Inf 5.25  6.5 7.75  Inf quantile(qp, lower = 0) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0 1.25  2.5 3.75  Inf #> [2,]    0 5.25  6.5 7.75  Inf quantile(qp, probs = 0.5) #>      [,1] #> [1,]  2.5 #> [2,]  6.5 quantile(qp, probs = 1:9 / 10) #>           [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]     [,9] #> [1,] 0.2477407    1  1.5    2  2.5    3  3.5    4 4.752259 #> [2,] 4.2477407    5  5.5    6  6.5    7  7.5    8 8.752259"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile regression ‚Äî quantile_reg","title":"Quantile regression ‚Äî quantile_reg","text":"quantile_reg() generates quantile regression model specification tidymodels framework. Currently, supported engines \"rq\", uses quantreg::rq(). Quantile regression also possible combining parsnip::rand_forest() grf engine. See grf_quantiles.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile regression ‚Äî quantile_reg","text":"","code":"quantile_reg(   mode = \"regression\",   engine = \"rq\",   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   method = \"br\" )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile regression ‚Äî quantile_reg","text":"mode single character string type model. possible value model \"regression\". engine Character string naming fitting function. Currently, \"rq\" \"grf\" supported. quantile_levels scalar vector values (0, 1) determine quantiles estimate (default set 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95). method fitting method used quantreg::rq(). See documentation list options.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/quantile_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile regression ‚Äî quantile_reg","text":"","code":"library(quantreg) #> Loading required package: SparseM tib <- data.frame(y = rnorm(100), x1 = rnorm(100), x2 = rnorm(100)) rq_spec <- quantile_reg(quantile_levels = c(.2, .8)) %>% set_engine(\"rq\") ff <- rq_spec %>% fit(y ~ ., data = tib) predict(ff, new_data = tib) #> # A tibble: 100 √ó 1 #>        .pred #>    <qtls(2)> #>  1   [0.291] #>  2  [-0.452] #>  3   [0.162] #>  4 [-0.0806] #>  5  [-0.375] #>  6  [-0.251] #>  7  [-0.284] #>  8  [0.0113] #>  9  [-0.136] #> 10  [-0.474] #> # ‚Ñπ 90 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. dplyr filter, mutate, rename, select epiprocess as_epi_df, key_colnames generics fit, fit, forecast, forecast, tidy, tidy ggplot2 autoplot hardhat extract_quantile_levels, extract_quantile_levels, quantile_pred, quantile_pred recipes bake, bake, prep, prep, rand_id, rand_id tibble as_tibble, as_tibble, tibble, tibble tidyr pivot_longer, pivot_wider, unnest","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/roll_modular_multivec.html","id":null,"dir":"Reference","previous_headings":"","what":"group col by .idx values and sum windows around each .idx value ‚Äî roll_modular_multivec","title":"group col by .idx values and sum windows around each .idx value ‚Äî roll_modular_multivec","text":"group col .idx values sum windows around .idx value","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/roll_modular_multivec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"group col by .idx values and sum windows around each .idx value ‚Äî roll_modular_multivec","text":"","code":"roll_modular_multivec(col, .idx, weights, aggr, window_size, modulus)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/roll_modular_multivec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"group col by .idx values and sum windows around each .idx value ‚Äî roll_modular_multivec","text":"col list values indexed .idx .idx relevant periodic part time value, e.g. week number weights much weigh particular datapoint aggr aggregation function, probably Quantile, mean median window_size number .idx entries include aggregation modulus maximum value .idx","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/seq_forward.html","id":null,"dir":"Reference","previous_headings":"","what":"seq, but returns null if from is larger ‚Äî seq_forward","title":"seq, but returns null if from is larger ‚Äî seq_forward","text":"seq, returns null larger","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/seq_forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"seq, but returns null if from is larger ‚Äî seq_forward","text":"","code":"seq_forward(from, to, by)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/slather.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread a layer of frosting on a fitted workflow ‚Äî slather","title":"Spread a layer of frosting on a fitted workflow ‚Äî slather","text":"Slathering frosting means implement postprocessing layer. creating new postprocessing layer, must implement S3 method function","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/slather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread a layer of frosting on a fitted workflow ‚Äî slather","text":"","code":"slather(object, components, workflow, new_data, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/slather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread a layer of frosting on a fitted workflow ‚Äî slather","text":"object workflow frosting postprocessing steps components list components containing model information. updated returned layer. mold - output calling hardhat::mold() workflow. contains information preprocessing, including recipe. forged - output calling hardhat::forge() workflow. predictors outcomes new_data. three components predictors, outcomes (new_data), extras (usually rest data, including keys). keys - put keys (time_value, geo_value, others) ease. workflow object class workflow new_data data frame containing new predictors preprocess predict ... additional arguments used methods. Currently unused.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/slather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread a layer of frosting on a fitted workflow ‚Äî slather","text":"components list. format applying updates.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/smooth_quantile_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooth quantile regression ‚Äî smooth_quantile_reg","title":"Smooth quantile regression ‚Äî smooth_quantile_reg","text":"smooth_quantile_reg() generates quantile regression model specification tidymodels framework. Currently, supported engine smoothqr::smooth_qr().","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/smooth_quantile_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooth quantile regression ‚Äî smooth_quantile_reg","text":"","code":"smooth_quantile_reg(   mode = \"regression\",   engine = \"smoothqr\",   outcome_locations = NULL,   quantile_levels = c(0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95),   degree = 3L )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/smooth_quantile_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooth quantile regression ‚Äî smooth_quantile_reg","text":"mode single character string type model. possible value model \"regression\". engine Character string naming fitting function. Currently, \"rq\" \"grf\" supported. outcome_locations Defaults vector 1:ncol(y) responses observed different spacing (appear different order), information used . argument mapped ahead argument smoothqr::smooth_qr(). quantile_levels scalar vector values (0, 1) determine quantiles estimate (default set 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95). degree number polynomials used response smoothing. Must number responses.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/smooth_quantile_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooth quantile regression ‚Äî smooth_quantile_reg","text":"","code":"library(smoothqr) tib <- data.frame(   y1 = rnorm(100), y2 = rnorm(100), y3 = rnorm(100),   y4 = rnorm(100), y5 = rnorm(100), y6 = rnorm(100),   x1 = rnorm(100), x2 = rnorm(100) ) qr_spec <- smooth_quantile_reg(quantile_levels = c(.2, .5, .8), outcome_locations = 1:6) ff <- qr_spec %>% fit(cbind(y1, y2, y3, y4, y5, y6) ~ ., data = tib) p <- predict(ff, new_data = tib)  x <- -99:99 / 100 * 2 * pi y <- sin(x) + rnorm(length(x), sd = .1) fd <- x[length(x) - 20] XY <- smoothqr::lagmat(y[1:(length(y) - 20)], c(-20:20)) XY <- as_tibble(XY) qr_spec <- smooth_quantile_reg(quantile_levels = c(.2, .5, .8), outcome_locations = 20:1) tt <- qr_spec %>% fit_xy(x = XY[, 21:41], y = XY[, 1:20])  pl <- predict(   object = tt,   new_data = XY[max(which(complete.cases(XY[, 21:41]))), 21:41] ) pl <- pl %>%   unnest(.pred) %>%   pivot_quantiles_wider(distn) %>%   mutate(     x = x[length(x) - 20] + ahead / 100 * 2 * pi,     ahead = NULL   ) plot(x, y, pch = 16, xlim = c(pi, 2 * pi), col = \"lightgrey\") curve(sin(x), add = TRUE) abline(v = fd, lty = 2) lines(pl$x, pl$`0.2`, col = \"blue\") lines(pl$x, pl$`0.8`, col = \"blue\") lines(pl$x, pl$`0.5`, col = \"red\")   library(ggplot2) ggplot(data.frame(x = x, y = y), aes(x)) +   geom_ribbon(data = pl, aes(ymin = `0.2`, ymax = `0.8`), fill = \"cornflowerblue\") +   geom_point(aes(y = y), colour = \"grey\") + # observed data   geom_function(fun = sin, colour = \"black\") + # truth   geom_vline(xintercept = fd, linetype = \"dashed\") + # end of training data   geom_line(data = pl, aes(y = `0.5`), colour = \"orange\") + # median prediction   theme_bw() +   coord_cartesian(xlim = c(0, NA)) +   ylab(\"y\")"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/snap.html","id":null,"dir":"Reference","previous_headings":"","what":"restrict various objects to the interval [lower, upper] ‚Äî snap","title":"restrict various objects to the interval [lower, upper] ‚Äî snap","text":"restrict various objects interval [lower, upper]","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/snap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"restrict various objects to the interval [lower, upper] ‚Äî snap","text":"","code":"snap(x, lower, upper, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/snap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"restrict various objects to the interval [lower, upper] ‚Äî snap","text":"x object restrict lower numeric, lower bound upper numeric, upper bound ... unused","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapt the model to latent data ‚Äî step_adjust_latency","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"standard case, arx models assume last observation also day forecast made. data latency, may wish adjust predictors (lags) /outcome (ahead) compensate. useful realtime pseudo-prospective forecasting data delay event occurring event reported.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"","code":"step_adjust_latency(   recipe,   ...,   method = c(\"extend_ahead\", \"locf\", \"extend_lags\"),   epi_keys_checked = NULL,   keys_to_ignore = c(),   fixed_latency = NULL,   fixed_forecast_date = NULL,   check_latency_length = TRUE,   id = rand_id(\"adjust_latency\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See selections() details. method character. Determines method forecast handles latency. options : \"extend_ahead\": Lengthen ahead forecasting last observation results forecast ahead forecast_date date. E.g. 3 days latency last observation forecast_date date 4 day ahead forecast, ahead used practice actually 7. \"locf\": carries forward last observed value(s) forecast date. \"extend_lags\": per epi_key predictor, adjusts lag shortest lag predict time last observation. E.g. lags c(0,7,14) data 3 days latent, actual lags used become c(3,10,17). epi_keys_checked character vector. list keys group finding max_time_value (last day data), defaulting geo_value. Different locations may different latencies; produce forecast every location, need guarantee data every location using largest latency across every location; means taking max_time_value minimum max_time_values set key values (earliest date).  NULL empty character vector, take maximum across values, irrespective keys. Note separate concern different latencies across different data columns, handled choice method. keys_to_ignore list character vectors. Set avoid using specific key values epi_keys_checked set latency. example, say two locations pr gu useful training data, stopped providing --date information, longer part test set. Setting keys_to_ignore = list(geo_value = c(\"pr\", \"gu\")) exclude latency calculation. fixed_latency either positive integer, labeled positive integer vector. set time fixed_forecast_date. non-NULL, amount offset ahead lag . single integer, used columns; labeled vector, labels must correspond base column names (lags/aheads).  NULL, latency distance epi_df's max_time_value forecast_date. fixed_forecast_date either date kind used epi_df, NULL. Exclusive fixed_latency. date, gives date forecast actually occurring. NULL, forecast_date determined either via fixed_latency, set epi_df's as_of value fixed_latency also NULL. check_latency_length bool, determines whether warn latency unusually high. Turn know forecast going far future. id character string unique step identify .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"step allows user create models recent data, automatically accounting latency patterns. Instead using last observation date, step_adjust_latency uses as_of date epi_df forecast_date, adjusts model data available. demonstrate subtleties, consider toy dataset:   looking predict value 15th, forecasting 14th (as_of date ), two issues need address: \"ca\" latent 2 days, whereas \"ma\" latent 1 want use b exogenous variable, \"ma\" latent 3 days instead just 1. Regardless method, epi_keys_checked=\"geo_value\" guarantees difference \"ma\" \"ca\" accounted making  latency adjustment least 2. comparison, various methods :","code":"toy_df <- tribble(  ~geo_value, ~time_value, ~a, ~b,  \"ma\", as.Date(\"2015-01-11\"), 20, 6,  \"ma\", as.Date(\"2015-01-12\"), 23, NA,  \"ma\", as.Date(\"2015-01-13\"), 25, NA,  \"ca\", as.Date(\"2015-01-11\"), 100, 5,  \"ca\", as.Date(\"2015-01-12\"), 103, 10, ) %>%    as_epi_df(as_of = as.Date(\"2015-01-14\"))"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"locf","dir":"Reference","previous_headings":"","what":"locf","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"Short \"last observation carried forward\", locf assumes every day last observation forecast day exactly . straightforward assumption, wrecks features depend changes value time, growth rate, even adjacent lags. robust version falls heading nowcasting, eventual aim package. toy dataset, matter day trying predict, since just fills forward forecast_date:","code":"toy_recipe <- epi_recipe(toy_df) %>%   step_adjust_latency(has_role(\"raw\"), method=\"locf\")  toy_recipe %>%   prep(toy_df) %>%   bake(toy_df) %>%   arrange(geo_value, time_value) #> An `epi_df` object, 8 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2015-01-14 #> #> # A tibble: 8 x 4 #>   geo_value time_value     a     b #> * <chr>     <date>     <dbl> <dbl> #> 1 ca        2015-01-11   100     5 #> 2 ca        2015-01-12   103    10 #> 3 ca        2015-01-13   103    10 #> 4 ca        2015-01-14   103    10 #> 5 ma        2015-01-11    20     6 #> 6 ma        2015-01-12    23     6 #> 7 ma        2015-01-13    25     6 #> 8 ma        2015-01-14    25     6"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"extend-lags","dir":"Reference","previous_headings":"","what":"extend_lags","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"extend_lags increases lags guaranteed data. advantage applicable per-column basis; cases deaths reported different latencies, lags adjusted separately. toy example:   maximum latency column 2 days, lag increased 3, max latency column b 3, lag increased 4; changes reflected column names. Meanwhile ahead uneffected. side-note, lag/ahead can somewhat ambiguous direction. , values brought forward time, given row, column lag_3_a represents value 3 days .","code":"toy_recipe <- epi_recipe(toy_df) %>%   step_adjust_latency(has_role(\"raw\"), method = \"extend_lags\") %>%   step_epi_lag(a, lag=1) %>%   step_epi_lag(b, lag=1) %>%   step_epi_ahead(a, ahead=1)  toy_recipe %>%   prep(toy_df) %>%   bake(toy_df) %>%   arrange(geo_value, time_value) #> An `epi_df` object, 21 x 7 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2015-01-14 #> #> # A tibble: 21 x 7 #>    geo_value time_value     a     b lag_3_a lag_4_b ahead_1_a #>  * <chr>     <date>     <dbl> <dbl>   <dbl>   <dbl>     <dbl> #>  1 ca        2015-01-10    NA    NA      NA      NA       100 #>  2 ca        2015-01-11   100     5      NA      NA       103 #>  3 ca        2015-01-12   103    10      NA      NA        NA #>  4 ca        2015-01-13    NA    NA      NA      NA        NA #>  5 ca        2015-01-14    NA    NA     100      NA        NA #>  6 ca        2015-01-15    NA    NA     103       5        NA #>  7 ca        2015-01-16    NA    NA      NA      10        NA #>  8 ca        2015-01-17    NA    NA      NA      NA        NA #>  9 ca        2015-01-18    NA    NA      NA      NA        NA #> 10 ca        2015-01-19    NA    NA      NA      NA        NA #> # i 11 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"extend-ahead","dir":"Reference","previous_headings":"","what":"extend_ahead","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"extend_ahead increases ahead, turning 3 day ahead forecast 7 day one; advantage simplicity reflective actual modelling task, potentially leaves information unused different data sources different latencies; must use latency latent data insure data available. toy example:   Even though 1 day ahead forecast, worst latency 3 days column b's \"ma\" data, outcome column ahead_4_a (4 days ahead). want ignore latency column b, need explicitly set columns consider adjusting like : step_adjust_latency(, method=\"extend_ahead\").","code":"toy_recipe <- epi_recipe(toy_df) %>%   step_adjust_latency(has_role(\"raw\"), method=\"extend_ahead\") %>%   step_epi_lag(a, lag=0) %>%   step_epi_ahead(a, ahead=1)  toy_recipe %>%   prep(toy_df) %>%   bake(toy_df) %>%   arrange(geo_value, time_value) #> An `epi_df` object, 10 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2015-01-14 #> #> # A tibble: 10 x 6 #>    geo_value time_value     a     b lag_0_a ahead_3_a #>  * <chr>     <date>     <dbl> <dbl>   <dbl>     <dbl> #>  1 ca        2015-01-08    NA    NA      NA       100 #>  2 ca        2015-01-09    NA    NA      NA       103 #>  3 ca        2015-01-11   100     5     100        NA #>  4 ca        2015-01-12   103    10     103        NA #>  5 ma        2015-01-08    NA    NA      NA        20 #>  6 ma        2015-01-09    NA    NA      NA        23 #>  7 ma        2015-01-10    NA    NA      NA        25 #>  8 ma        2015-01-11    20     6      20        NA #>  9 ma        2015-01-12    23    NA      23        NA #> 10 ma        2015-01-13    25    NA      25        NA"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"programmatic-details","dir":"Reference","previous_headings":"","what":"Programmatic details","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"step_adjust_latency uses metadata, time_type as_of, epi_df used initial prep step, rather baking prediction. means reusing forecaster new data advised, though typically advised general. latency adjustment applies columns created step, step go step_epi_ahead step_epi_lag. work:   :   create columns apply lags (step_growth_rate()), created step_adjust_latency, subseqent latency can addressed.","code":"toy_recipe <- epi_recipe(toy_df) %>%    # non-lag steps    step_adjust_latency(a, method = \"extend_lags\") %>%    step_epi_lag(a, lag=0) # other steps toy_recipe <- epi_recipe(toy_df) %>%    step_epi_lag(a, lag=0) %>%    step_adjust_latency(a, method = \"extend_lags\") #> Warning: If `method` is \"extend_lags\" or \"locf\", then the previous `step_epi_lag`s won't #> work with modified data."},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adapt the model to latent data ‚Äî step_adjust_latency","text":"","code":"rates <- covid_case_death_rates %>%   dplyr::filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) # setting the `as_of` to something realistic attributes(rates)$metadata$as_of <- max(rates$time_value) + 3  r <- epi_recipe(rates) %>%   step_adjust_latency(recipes::has_role(\"raw\"), method = \"extend_ahead\") %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Adj. extend_ahead: recipes::has_role(\"raw\") latency TBD at train time #> 2. Leading: death_rate by 7 #> 3. Lagging: death_rate by 0, 7, 14  rates_fit <- epi_workflow() %>%   add_epi_recipe(r) %>%   add_model(linear_reg()) %>%   fit(data = rates) rates_fit #>  #> ‚ïê‚ïê Epi Workflow [trained] ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Recipe #> Model: linear_reg() #> Postprocessor: None #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> 3 Recipe steps. #> 1. step_adjust_latency() #> 2. step_epi_ahead() #> 3. step_epi_lag() #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> Call: #> stats::lm(formula = ..y ~ ., data = data) #>  #> Coefficients: #>       (Intercept)   lag_0_death_rate   lag_7_death_rate  lag_14_death_rate   #>            0.3806            -0.2208            -0.0403            -0.0394   #>  #>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"checks: the recipe type, whether a previous step is the relevant epi_shift, that either fixed_latency or fixed_forecast_date is non-null, and that fixed_latency only references columns that exist at the time of the step inclusion ‚Äî step_adjust_latency_checks","title":"checks: the recipe type, whether a previous step is the relevant epi_shift, that either fixed_latency or fixed_forecast_date is non-null, and that fixed_latency only references columns that exist at the time of the step inclusion ‚Äî step_adjust_latency_checks","text":"checks: recipe type, whether previous step relevant epi_shift, either fixed_latency fixed_forecast_date non-null, fixed_latency references columns exist time step inclusion","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_adjust_latency_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks: the recipe type, whether a previous step is the relevant epi_shift, that either fixed_latency or fixed_forecast_date is non-null, and that fixed_latency only references columns that exist at the time of the step inclusion ‚Äî step_adjust_latency_checks","text":"","code":"step_adjust_latency_checks(   id,   method,   recipe,   fixed_latency,   fixed_forecast_date,   call = caller_env() )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a climatological variable based on the history ‚Äî step_climate","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"step_climate() creates specification recipe step generate one new columns derived data. step examines available seasons training data calculates measure center \"typical\" season. Think like weather: predict temperature January Pittsburgh, PA, might look previous January's record, average temperatures, include model. important align forecast horizon climate. step work best added step_epi_ahead(), strictly required. See details information.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"","code":"step_climate(   recipe,   ...,   forecast_ahead = \"detect\",   role = \"predictor\",   time_type = c(\"detect\", \"epiweek\", \"week\", \"month\", \"day\"),   center_method = c(\"median\", \"mean\"),   window_size = 3L,   epi_keys = NULL,   prefix = \"climate_\",   skip = FALSE,   id = rand_id(\"climate\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. forecast_ahead forecast horizon. default, step try detect whether forecast horizon already specified step_epi_ahead(). Alternatively, one can specify explicit horizon scalar integer. Auto-detection possible time type epi_df used create epi_recipe aggregation time_type specified step (say, daily weekly). , example, daily data used monthly time aggregation, auto-detection possible (may fact lead strange behaviour even forecast_ahead specified integer). See details . role role assigned variables created step? \"predictor\" likely choice. time_type duration time aggregation performed. center_method measure center calculated time window. window_size Scalar integer. many time units side included. example, window_size = 3 time_type = \"day\", day data, center calculated using 3 days three days . , case, operates like weekly rolling average, centered day. epi_keys Character vector NULL. columns mentioned grouped performing center calculation. example, given state-level data, national climate calculated NULL, passing epi_keys = \"geo_value\" calculate climate separately state. prefix character string prefixed new column. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"Construction climate predictor can helpful strongly seasonal data. utility greatest estimated \"climate\" aligned forecast horizon. example, today December 1, want make prediction December 15, want know climate week December 15 use model. also want align rest training data climate 2 weeks dates. accomplish , daily data, use time_type = \"week\" forecast_ahead = 2. climate predictor created taking averages week (window weeks , determined window_size), aligning appropriate dates training data time_value \"see\" typical climate 2 weeks future. Alternatively, scenario, use time_type = \"day\" forecast_ahead = 14. climate predictor created taking averages small window around day, aligning appropriate dates training data time_value \"see\" climate 14 days future. differences options type averaging performed historical data. first case, days week get value climate predictor (looking weekly windows), second case, every day data average climate day happens 14 days future. Autodetecting forecast horizon can guaranteed work correctly time types : example using daily data training daily climate calculations. However, using weekly data, predicting 4 weeks ahead, setting time_type = \"month\" perfectly reasonable. just climate calculated months (January, February, March, etc.) properly align producing forecast 5th week year challenging. scenarios like , may best approximately match times forecast_ahead = 1, example.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_climate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a climatological variable based on the history ‚Äî step_climate","text":"","code":"# automatically detects the horizon r <- epi_recipe(covid_case_death_rates) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_climate(death_rate, time_type = \"day\") r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Leading: death_rate by 7 #> 2. Calculating climate_predictor for: death_rate by day using the median  r %>%   prep(covid_case_death_rates) %>%   bake(new_data = NULL) #> An `epi_df` object, 20,888 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 20,888 √ó 6 #>    geo_value time_value case_rate death_rate ahead_7_death_rate #>  * <chr>     <date>         <dbl>      <dbl>              <dbl> #>  1 ak        2020-12-24        NA         NA              0.158 #>  2 al        2020-12-24        NA         NA              0.438 #>  3 ar        2020-12-24        NA         NA              1.27  #>  4 as        2020-12-24        NA         NA              0     #>  5 az        2020-12-24        NA         NA              1.10  #>  6 ca        2020-12-24        NA         NA              0.755 #>  7 co        2020-12-24        NA         NA              0.376 #>  8 ct        2020-12-24        NA         NA              0.819 #>  9 dc        2020-12-24        NA         NA              0.601 #> 10 de        2020-12-24        NA         NA              0.912 #> # ‚Ñπ 20,878 more rows #> # ‚Ñπ 1 more variable: climate_death_rate <dbl>  # same idea, but using weekly climate r <- epi_recipe(covid_case_death_rates) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_climate(death_rate,     forecast_ahead = 1, time_type = \"epiweek\",     window_size = 1L   ) r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Leading: death_rate by 7 #> 2. Calculating climate_predictor for: death_rate by epiweek using the median  r %>%   prep(covid_case_death_rates) %>%   bake(new_data = NULL) #> An `epi_df` object, 20,888 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 20,888 √ó 6 #>    geo_value time_value case_rate death_rate ahead_7_death_rate #>  * <chr>     <date>         <dbl>      <dbl>              <dbl> #>  1 ak        2020-12-24        NA         NA              0.158 #>  2 al        2020-12-24        NA         NA              0.438 #>  3 ar        2020-12-24        NA         NA              1.27  #>  4 as        2020-12-24        NA         NA              0     #>  5 az        2020-12-24        NA         NA              1.10  #>  6 ca        2020-12-24        NA         NA              0.755 #>  7 co        2020-12-24        NA         NA              0.376 #>  8 ct        2020-12-24        NA         NA              0.819 #>  9 dc        2020-12-24        NA         NA              0.601 #> 10 de        2020-12-24        NA         NA              0.912 #> # ‚Ñπ 20,878 more rows #> # ‚Ñπ 1 more variable: climate_death_rate <dbl>  # switching the order is possible if you specify `forecast_ahead` r <- epi_recipe(covid_case_death_rates) %>%   step_climate(death_rate, forecast_ahead = 7, time_type = \"day\") %>%   step_epi_ahead(death_rate, ahead = 7) r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Calculating climate_predictor for: death_rate by day using the median #> 2. Leading: death_rate by 7  r %>%   prep(covid_case_death_rates) %>%   bake(new_data = NULL) #> An `epi_df` object, 20,888 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 20,888 √ó 6 #>    geo_value time_value case_rate death_rate climate_death_rate #>  * <chr>     <date>         <dbl>      <dbl>              <dbl> #>  1 ak        2020-12-24        NA         NA                 NA #>  2 al        2020-12-24        NA         NA                 NA #>  3 ar        2020-12-24        NA         NA                 NA #>  4 as        2020-12-24        NA         NA                 NA #>  5 az        2020-12-24        NA         NA                 NA #>  6 ca        2020-12-24        NA         NA                 NA #>  7 co        2020-12-24        NA         NA                 NA #>  8 ct        2020-12-24        NA         NA                 NA #>  9 dc        2020-12-24        NA         NA                 NA #> 10 de        2020-12-24        NA         NA                 NA #> # ‚Ñπ 20,878 more rows #> # ‚Ñπ 1 more variable: ahead_7_death_rate <dbl>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_naomit.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","title":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","text":"Unified NA omission wrapper function recipes","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_naomit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","text":"","code":"step_epi_naomit(recipe)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_naomit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","text":"recipe Recipe used omission steps","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_naomit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","text":"Omits NA's predictors outcomes training time fit model. Also omits associated predictors outcomes prediction time due lack response avoidance data loss.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_naomit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unified NA omission wrapper function for recipes ‚Äî step_epi_naomit","text":"","code":"covid_case_death_rates %>%   epi_recipe() %>%   step_epi_naomit() #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 2. ‚Ä¢ Removing rows with NA values in: all_outcomes()"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a shifted predictor ‚Äî step_epi_lag","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"step_epi_lag step_epi_ahead create specification recipe step add new columns shifted data. former created lag column, latter create lead column. Shifted data default include NA values shift induced. can properly removed step_epi_naomit(), may specify alternative filler value default argument.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"","code":"step_epi_lag(   recipe,   ...,   lag,   role = \"predictor\",   prefix = \"lag_\",   default = NA,   skip = FALSE,   id = rand_id(\"epi_lag\") )  step_epi_ahead(   recipe,   ...,   ahead,   role = \"outcome\",   prefix = \"ahead_\",   default = NA,   skip = FALSE,   id = rand_id(\"epi_ahead\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. lag, ahead vector integers. specified column lag lead value vector. Lag integers must nonnegative, ahead integers must positive. role model terms created step, analysis role assigned? lag default predictor ahead outcome. prefix character string prefixed new column. default Determines fills empty rows left leading/lagging (defaults NA). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"step assumes data already proper sequential order shifting. prefix id arguments unchangeable ensure code runs properly avoid inconsistency naming. step_epi_ahead, always set \"ahead_\" \"epi_ahead\" respectively, step_epi_lag, set \"lag_\" \"epi_lag, respectively.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a shifted predictor ‚Äî step_epi_lag","text":"","code":"r <- epi_recipe(covid_case_death_rates) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Leading: death_rate by 7 #> 2. Lagging: death_rate by 0, 7, 14"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_slide.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a rolling window transformation ‚Äî step_epi_slide","title":"Calculate a rolling window transformation ‚Äî step_epi_slide","text":"step_epi_slide() creates specification recipe step generate one new columns derived data \"sliding\" computation along existing data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_slide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a rolling window transformation ‚Äî step_epi_slide","text":"","code":"step_epi_slide(   recipe,   ...,   .f,   .window_size = NULL,   .align = c(\"right\", \"center\", \"left\"),   role = \"predictor\",   prefix = \"epi_slide_\",   f_name = clean_f_name(.f),   skip = FALSE,   id = rand_id(\"epi_slide\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_slide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a rolling window transformation ‚Äî step_epi_slide","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. .f function one following formats: unquoted function name arguments, e.g., mean character string name function, e.g., \"mean\". Note can difficult examine mistakes (misspelling \"maen\" produce error try actually fit model) base R lambda function, e.g., function(x) mean(x, na.rm = TRUE) new-style base R lambda function, e.g., \\(x) mean(x, na.rm = TRUE) one-sided formula like ~ mean(.x, na.rm = TRUE). Note cases 3 4, x can variable name like (example \\(dog) mean(dog, na.rm = TRUE) work). case 5, argument must named .x. common, though difficult debug error using something like function(x) mean. work returns function mean, rather mean(x) .window_size size sliding window, required. Usually non-negative integer suffice (e.g. data indexed date, restrictive time_type cases (see epiprocess::epi_slide() details). example, set 7 7-day window. .align character string indicating window aligned. default, \"right\", meaning slide_window anchored right end point reference date. (see epiprocess::epi_slide() details). role model terms created step, analysis role assigned? lag default predictor ahead outcome. prefix character string prefixed new column. f_name character string 20 characters describes function. combined prefix columns ... name result using {prefix}{f_name}_{column}. default determined automatically using clean_f_name(). skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_slide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a rolling window transformation ‚Äî step_epi_slide","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_epi_slide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a rolling window transformation ‚Äî step_epi_slide","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-01-01\"), geo_value %in% c(\"ca\", \"ny\")) rec <- epi_recipe(jhu) %>%   step_epi_slide(case_rate, death_rate,     .f = \\(x) mean(x, na.rm = TRUE),     .window_size = 7L   ) bake(prep(rec, jhu), new_data = NULL) #> An `epi_df` object, 730 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 730 √ó 6 #>    geo_value time_value case_rate death_rate epi_slide__.f_case_rate #>  * <chr>     <date>         <dbl>      <dbl>                   <dbl> #>  1 ca        2021-01-01      104.      0.854                    104. #>  2 ca        2021-01-02      102.      0.861                    103. #>  3 ca        2021-01-03      102.      0.864                    103. #>  4 ca        2021-01-04      102.      0.914                    103. #>  5 ca        2021-01-05      101.      0.913                    102. #>  6 ca        2021-01-06      108.      0.897                    103. #>  7 ca        2021-01-07      106.      0.943                    104. #>  8 ca        2021-01-08      106.      1.02                     104. #>  9 ca        2021-01-09      107.      1.11                     105. #> 10 ca        2021-01-10      110.      1.23                     106. #> # ‚Ñπ 720 more rows #> # ‚Ñπ 1 more variable: epi_slide__.f_death_rate <dbl>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_growth_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a growth rate ‚Äî step_growth_rate","title":"Calculate a growth rate ‚Äî step_growth_rate","text":"step_growth_rate() creates specification recipe step generate one new columns derived data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_growth_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a growth rate ‚Äî step_growth_rate","text":"","code":"step_growth_rate(   recipe,   ...,   role = \"predictor\",   horizon = 7,   method = c(\"rel_change\", \"linear_reg\"),   log_scale = FALSE,   na_rm = TRUE,   replace_Inf = NA,   prefix = \"gr_\",   skip = FALSE,   id = rand_id(\"growth_rate\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_growth_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a growth rate ‚Äî step_growth_rate","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. role model terms created step, analysis role assigned? lag default predictor ahead outcome. horizon Bandwidth sliding window, method \"rel_change\" \"linear_reg\". See epiprocess::growth_rate() details. method Either \"rel_change\" \"linear_reg\", indicating method use growth rate calculation. local methods: run sliding fashion sequence (order estimate derivatives hence growth rates). See epiprocess::growth_rate() details. log_scale growth rates estimated using parameterization log scale? See details explanation. Default FALSE. na_rm missing values removed computation? Default FALSE. replace_Inf Sometimes, growth rate calculation can result infinite values (denominator zero, example). case, prediction methods fail. argument specifies potential replacement values. default (NA) likely result rows removed data. Alternatively, specify arbitrary large values, perhaps zero. Setting argument NULL result replacement. prefix character string prefixed new column. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_growth_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a growth rate ‚Äî step_growth_rate","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_growth_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a growth rate ‚Äî step_growth_rate","text":"","code":"tiny_geos <- c(\"as\", \"mp\", \"vi\", \"gu\", \"pr\") rates <- covid_case_death_rates %>%   filter(time_value >= as.Date(\"2021-11-01\"), !(geo_value %in% tiny_geos))  r <- epi_recipe(rates) %>%   step_growth_rate(case_rate, death_rate) r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Calculating growth_rate for: case_rate death_rate by rel_change  r %>%   prep(rates) %>%   bake(new_data = NULL) #> An `epi_df` object, 3,111 x 6 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3,111 √ó 6 #>    geo_value time_value case_rate death_rate gr_7_rel_change_case_rate #>  * <chr>     <date>         <dbl>      <dbl>                     <dbl> #>  1 ak        2021-11-01     87.9       0.494                        NA #>  2 al        2021-11-01     34.7       0.482                        NA #>  3 ar        2021-11-01     13.9       0.434                        NA #>  4 az        2021-11-01     40.4       0.566                        NA #>  5 ca        2021-11-01     15.6       0.241                        NA #>  6 co        2021-11-01     51.0       0.590                        NA #>  7 ct        2021-11-01      9.20      0.108                        NA #>  8 dc        2021-11-01     11.8       0.100                        NA #>  9 de        2021-11-01     26.0       0.391                        NA #> 10 fl        2021-11-01      7.99      0.484                        NA #> # ‚Ñπ 3,101 more rows #> # ‚Ñπ 1 more variable: gr_7_rel_change_death_rate <dbl>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_lag_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a lagged difference ‚Äî step_lag_difference","title":"Calculate a lagged difference ‚Äî step_lag_difference","text":"step_lag_difference() creates specification recipe step generate one new columns derived data.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_lag_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a lagged difference ‚Äî step_lag_difference","text":"","code":"step_lag_difference(   recipe,   ...,   role = \"predictor\",   horizon = 7,   prefix = \"lag_diff_\",   skip = FALSE,   id = rand_id(\"lag_diff\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_lag_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a lagged difference ‚Äî step_lag_difference","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. role model terms created step, analysis role assigned? lag default predictor ahead outcome. horizon Scalar vector. Time period(s) calculate differences. prefix character string prefixed new column. skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_lag_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a lagged difference ‚Äî step_lag_difference","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_lag_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a lagged difference ‚Äî step_lag_difference","text":"","code":"r <- epi_recipe(covid_case_death_rates) %>%   step_lag_difference(case_rate, death_rate, horizon = c(7, 14)) %>%   step_epi_naomit() r #>  #> ‚îÄ‚îÄ Epi Recipe ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Inputs  #> Number of variables by role #> raw:        2 #> geo_value:  1 #> time_value: 1 #>  #> ‚îÄ‚îÄ Operations  #> 1. Calculating lag_difference for: case_rate death_rate by 7, 14 #> 2. ‚Ä¢ Removing rows with NA values in: all_predictors() #> 3. ‚Ä¢ Removing rows with NA values in: all_outcomes()  r %>%   prep(covid_case_death_rates) %>%   bake(new_data = NULL) #> An `epi_df` object, 19,712 x 8 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 19,712 √ó 8 #>    geo_value time_value case_rate death_rate lag_diff_7_case_rate #>  * <chr>     <date>         <dbl>      <dbl>                <dbl> #>  1 ak        2021-01-14      37.4     0.0988               -4.07  #>  2 al        2021-01-14      73.6     2.51                 -7.70  #>  3 ar        2021-01-14      87.7     1.42                -10.3   #>  4 as        2021-01-14       0       0                     0     #>  5 az        2021-01-14     124.      2.14                  0.117 #>  6 ca        2021-01-14     108.      1.22                  2.38  #>  7 co        2021-01-14      31.7     0.354                -9.62  #>  8 ct        2021-01-14      75.4     1.07                  6.97  #>  9 dc        2021-01-14      41.5     0.681                 6.07  #> 10 de        2021-01-14      74.1     0.955                -5.46  #> # ‚Ñπ 19,702 more rows #> # ‚Ñπ 3 more variables: lag_diff_14_case_rate <dbl>, lag_diff_7_death_rate <dbl>, #> #   lag_diff_14_death_rate <dbl>"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_population_scaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","title":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","text":"step_population_scaling creates specification recipe step perform per-capita scaling. Typical usage load dataset contains state-level population, use convert predictions made raw scale model rate-scale dividing population. Although, worth noting nothing special \"population\". function can used scale variable. Population standard use case epidemiology forecasting scenario. value passed divide selected variables rate_rescaling argument common multiplier selected variables.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_population_scaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","text":"","code":"step_population_scaling(   recipe,   ...,   role = \"raw\",   df,   by = NULL,   df_pop_col,   rate_rescaling = 1,   create_new = TRUE,   suffix = \"_scaled\",   skip = FALSE,   id = rand_id(\"population_scaling\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_population_scaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables step. See recipes::selections() details. role model terms created step, analysis role assigned? lag default predictor ahead outcome. df data frame contains population data used inverting existing scaling. (possibly named) character vector variables join . NULL, default, function try infer reasonable set columns. First, try join variables training/test data roles \"geo_value\", \"key\", \"time_value\" also appear df; roles automatically set using epi_df, can use, e.g., update_role. roles set, try perform natural join, using variables common training/test data population data. columns training/testing data df name (included ), .df suffix added one user-provided data disambiguate. join different variables epi_df df, use named vector. example, = c(\"geo_value\" = \"states\") match epi_df$geo_value df$states. join multiple variables, use vector length > 1. example, = c(\"geo_value\" = \"states\", \"county\" = \"county\") match epi_df$geo_value df$states epi_df$county df$county. See dplyr::inner_join() details. df_pop_col name column data frame df contains population data used scaling. one column. rate_rescaling Sometimes raw scales \"per 100K\" \"per 1M\". Adjustments can made . example, original scale \"per 100K\", set rate_rescaling = 1e5 get rates. create_new TRUE create new column keep original column epi_df suffix character. suffix added column name create_new = TRUE. Default \"_scaled\". skip logical. step skipped recipe baked bake()? operations baked prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_population_scaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","text":"Scales raw data population","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_population_scaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw scale predictions to per-capita ‚Äî step_population_scaling","text":"","code":"jhu <- cases_deaths_subset %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ca\", \"ny\")) %>%   select(geo_value, time_value, cases)  pop_data <- data.frame(states = c(\"ca\", \"ny\"), value = c(20000, 30000))  r <- epi_recipe(jhu) %>%   step_population_scaling(     df = pop_data,     df_pop_col = \"value\",     by = c(\"geo_value\" = \"states\"),     cases, suffix = \"_scaled\"   ) %>%   step_epi_lag(cases_scaled, lag = c(0, 7, 14)) %>%   step_epi_ahead(cases_scaled, ahead = 7, role = \"outcome\") %>%   step_epi_naomit()  f <- frosting() %>%   layer_predict() %>%   layer_threshold(.pred) %>%   layer_naomit(.pred) %>%   layer_population_scaling(.pred,     df = pop_data,     by = c(\"geo_value\" = \"states\"),     df_pop_col = \"value\"   )  wf <- epi_workflow(r, linear_reg()) %>%   fit(jhu) %>%   add_frosting(f)  forecast(wf) #> An `epi_df` object, 2 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2024-03-20 #>  #> # A tibble: 2 √ó 4 #>   geo_value time_value .pred .pred_scaled #>   <chr>     <date>     <dbl>        <dbl> #> 1 ca        2021-12-31  4.25       84938. #> 2 ny        2021-12-31  5.93      177766."},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"step_training_window creates specification recipe step limits size training window n_recent recent observations time_value per group, groups formed based remaining epi_keys.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"","code":"step_training_window(   recipe,   role = NA,   n_recent = 50,   epi_keys = NULL,   id = rand_id(\"training_window\") )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"recipe recipe object. step added sequence operations recipe. role model terms created step, analysis role assigned? lag default predictor ahead outcome. n_recent integer value represents number recent observations kept training window per key default value 50. epi_keys optional character vector specifying \"key\" variables group . default, NULL, ensures every key combination limited. id unique identifier step","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"Note step_epi_lead() step_epi_lag() come filtering step.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/step_training_window.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limits the size of the training window to the most recent observations ‚Äî step_training_window","text":"","code":"tib <- tibble(   x = 1:10,   y = 1:10,   time_value = rep(seq(as.Date(\"2020-01-01\"), by = 1, length.out = 5), 2),   geo_value = rep(c(\"ca\", \"hi\"), each = 5) ) %>%   as_epi_df()  epi_recipe(y ~ x, data = tib) %>%   step_training_window(n_recent = 3) %>%   prep(tib) %>%   bake(new_data = NULL) #> An `epi_df` object, 6 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2025-03-13 17:34:14.55305 #>  #> # A tibble: 6 √ó 4 #>   geo_value time_value     x     y #> * <chr>     <date>     <int> <int> #> 1 ca        2020-01-03     3     3 #> 2 ca        2020-01-04     4     4 #> 3 ca        2020-01-05     5     5 #> 4 hi        2020-01-03     8     8 #> 5 hi        2020-01-04     9     9 #> 6 hi        2020-01-05    10    10  epi_recipe(y ~ x, data = tib) %>%   step_epi_naomit() %>%   step_training_window(n_recent = 3) %>%   prep(tib) %>%   bake(new_data = NULL) #> An `epi_df` object, 6 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2025-03-13 17:34:14.55305 #>  #> # A tibble: 6 √ó 4 #>   geo_value time_value     x     y #> * <chr>     <date>     <int> <int> #> 1 ca        2020-01-03     3     3 #> 2 ca        2020-01-04     4     4 #> 3 ca        2020-01-05     5     5 #> 4 hi        2020-01-03     8     8 #> 5 hi        2020-01-04     9     9 #> 6 hi        2020-01-05    10    10"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/tidy.frosting.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy the result of a frosting object ‚Äî tidy.frosting","title":"Tidy the result of a frosting object ‚Äî tidy.frosting","text":"tidy return data frame contains information regarding frosting operation within frosting (tidy method operation exists). Note modified version tidy method recipe.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/tidy.frosting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy the result of a frosting object ‚Äî tidy.frosting","text":"","code":"# S3 method for class 'frosting' tidy(x, number = NA, id = NA, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/tidy.frosting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy the result of a frosting object ‚Äî tidy.frosting","text":"x frosting layer object number integer NA. missing, id provided, return value list operations frosting. number given, tidy method executed operation frosting (exists). number must provided id . id character string NA. missing number provided, return value list operations frosting. character string given, tidy method executed operation frosting (exists). id must provided number . ... currently used.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/tidy.frosting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy the result of a frosting object ‚Äî tidy.frosting","text":"tibble columns vary depending tidy method executed. number, id NA, tibble columns number (operation iteration), operation (\"layer\"), type (method, e.g. \"predict\", \"naomit\"), character column id.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/tidy.frosting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy the result of a frosting object ‚Äî tidy.frosting","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\"))  r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit()  wf <- epi_workflow(r, parsnip::linear_reg()) %>% fit(jhu) latest <- get_test_data(recipe = r, x = jhu)  f <- frosting() %>%   layer_predict() %>%   layer_naomit(.pred)  tidy(f) #> # A tibble: 2 √ó 4 #>   number operation type    id                    #>    <int> <chr>     <chr>   <chr>                 #> 1      1 layer     predict predict_default_z0teD #> 2      2 layer     naomit  naomit_UUgBX"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/update.layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Update post-processing layer ‚Äî update.layer","title":"Update post-processing layer ‚Äî update.layer","text":"layer method update() takes named arguments ... whose values replace elements name actual post-processing layer. Analogous update.step() recipes package.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/update.layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update post-processing layer ‚Äî update.layer","text":"","code":"# S3 method for class 'layer' update(object, ...)"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/update.layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update post-processing layer ‚Äî update.layer","text":"object post-processing layer. ... Key-value pairs keys match names elements layer, values new values update layer .","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/update.layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update post-processing layer ‚Äî update.layer","text":"","code":"jhu <- covid_case_death_rates %>%   filter(time_value > \"2021-11-01\", geo_value %in% c(\"ak\", \"ca\", \"ny\")) r <- epi_recipe(jhu) %>%   step_epi_lag(death_rate, lag = c(0, 7, 14)) %>%   step_epi_ahead(death_rate, ahead = 7) %>%   step_epi_naomit() wf <- epi_workflow(r, linear_reg()) %>% fit(jhu) latest <- jhu %>% filter(time_value >= max(time_value) - 14)  # Specify a `forecast_date` that is greater than or equal to `as_of` date f <- frosting() %>%   layer_predict() %>%   layer_add_forecast_date(forecast_date = \"2022-05-31\") %>%   layer_naomit(.pred)  wf1 <- wf %>% add_frosting(f)  p1 <- predict(wf1, latest) p1 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred forecast_date #>   <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2022-05-31    #> 2 ca        2021-12-31 0.312 2022-05-31    #> 3 ny        2021-12-31 0.295 2022-05-31     # Update forecast date f$layers[[2]] <- update(f$layers[[2]], forecast_date = \"2021-06-01\")  # Need to still update workflow if only update a layer in frosting wf2 <- wf %>% add_frosting(f) wf2$post # Check that wf1 has update #> $actions #> $actions$frosting #> $frosting #>  #> ‚îÄ‚îÄ Frosting ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #>  #> ‚îÄ‚îÄ Layers  #> 1. Creating predictions: \"<calculated>\" #> 2. Adding forecast date: \"2021-06-01\" #> 3. Removing na predictions from: .pred #>  #> attr(,\"class\") #> [1] \"action_post\" \"action\"      #>  #>  #> attr(,\"class\") #> [1] \"stage_post\" \"stage\"      p1 <- predict(wf2, latest) p1 #> An `epi_df` object, 3 x 4 with metadata: #> * geo_type  = state #> * time_type = day #> * as_of     = 2023-03-10 #>  #> # A tibble: 3 √ó 4 #>   geo_value time_value .pred forecast_date #>   <chr>     <date>     <dbl> <date>        #> 1 ak        2021-12-31 0.245 2021-06-01    #> 2 ca        2021-12-31 0.312 2021-06-01    #> 3 ny        2021-12-31 0.295 2021-06-01"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/weighted_interval_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted interval score ‚Äî weighted_interval_score","title":"Compute weighted interval score ‚Äî weighted_interval_score","text":"Weighted interval score (WIS), well-known quantile-based approximation commonly-used continuous ranked probability score (CRPS). WIS proper score, can thought distributional generalization absolute error. example, see Bracher et al. (2020) discussion context COVID-19 forecasting.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/weighted_interval_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted interval score ‚Äî weighted_interval_score","text":"","code":"weighted_interval_score(   x,   actual,   quantile_levels = NULL,   na_handling = c(\"impute\", \"drop\", \"propagate\", \"fail\"),   ... )"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/weighted_interval_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted interval score ‚Äî weighted_interval_score","text":"x vector class quantile_pred. actual double. Actual value(s) quantile_levels probabilities. specified, score computed set levels. Otherwise, present x used. na_handling character. Determines missing values handled. \"impute\", missing values calculated possible using available quantiles. \"drop\", explicitly missing values ignored calculation score, implicitly missing values imputed possible. \"propogate\", resulting score NA missing values exist. Finally, quantile_levels specified, \"fail\" result score NA required quantile levels (implicit explicit) corresponding values. ... used","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/weighted_interval_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weighted interval score ‚Äî weighted_interval_score","text":"vector nonnegative scores.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/weighted_interval_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute weighted interval score ‚Äî weighted_interval_score","text":"","code":"quantile_levels <- c(.2, .4, .6, .8) predq1 <- 1:4 # predq2 <- 8:11 dstn <- quantile_pred(rbind(predq1, predq2), quantile_levels) actual <- c(3.3, 7.1) weighted_interval_score(dstn, actual) #> [1] 0.65 1.90 weighted_interval_score(dstn, actual, c(.25, .5, .75)) #> [1] 0.6833333 1.9833333  # Missing value behaviours dstn <- quantile_pred(matrix(c(1, 2, NA, 4), nrow = 1), 1:4 / 5) weighted_interval_score(dstn, 2.5) #> [1] 0.5 weighted_interval_score(dstn, 2.5, 1:9 / 10) #> [1] 0.455656 weighted_interval_score(dstn, 2.5, 1:9 / 10, na_handling = \"drop\") #> [1] 0.462613 weighted_interval_score(dstn, 2.5, na_handling = \"propagate\") #> [1] NA weighted_interval_score(   quantile_pred(matrix(1:4, nrow = 1), 1:4 / 5),   actual = 2.5,   quantile_levels = 1:9 / 10,   na_handling = \"fail\" ) #> [1] NA   # Using some actual forecasts -------- library(dplyr) training <- covid_case_death_rates %>%   filter(time_value >= \"2021-10-01\", time_value <= \"2021-12-01\") preds <- flatline_forecaster(   training, \"death_rate\",   flatline_args_list(quantile_levels = c(.01, .025, 1:19 / 20, .975, .99)) )$predictions actuals <- covid_case_death_rates %>%   filter(time_value == as.Date(\"2021-12-01\") + 7) %>%   select(geo_value, time_value, actual = death_rate) preds <- left_join(preds, actuals,   by = c(\"target_date\" = \"time_value\", \"geo_value\") ) %>%   mutate(wis = weighted_interval_score(.pred_distn, actual)) preds #> # A tibble: 56 √ó 7 #>    geo_value .pred .pred_distn forecast_date target_date actual    wis #>    <chr>     <dbl>  <qtls(23)> <date>        <date>       <dbl>  <dbl> #>  1 ak        0.217     [0.217] 2021-12-01    2021-12-08  0.0988 0.0673 #>  2 al        0.119     [0.119] 2021-12-01    2021-12-08  0.174  0.0364 #>  3 ar        0.207     [0.207] 2021-12-01    2021-12-08  0.514  0.196  #>  4 as        0             [0] 2021-12-01    2021-12-08  0      0.0145 #>  5 az        0.485     [0.485] 2021-12-01    2021-12-08  0.826  0.223  #>  6 ca        0.169     [0.169] 2021-12-01    2021-12-08  0.185  0.0278 #>  7 co        0.509     [0.509] 2021-12-01    2021-12-08  0.534  0.0313 #>  8 ct        0.177     [0.177] 2021-12-01    2021-12-08  0.149  0.0301 #>  9 dc        0             [0] 2021-12-01    2021-12-08  0.0200 0.0166 #> 10 de        0.217     [0.217] 2021-12-01    2021-12-08  0.391  0.101  #> # ‚Ñπ 46 more rows"},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/yday_leap.html","id":null,"dir":"Reference","previous_headings":"","what":"a function that assigns Feb 29th to 999, and aligns all other dates the same number in the year, regardless of whether it's a leap year ‚Äî yday_leap","title":"a function that assigns Feb 29th to 999, and aligns all other dates the same number in the year, regardless of whether it's a leap year ‚Äî yday_leap","text":"function assigns Feb 29th 999, aligns dates number year, regardless whether leap year","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/reference/yday_leap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function that assigns Feb 29th to 999, and aligns all other dates the same number in the year, regardless of whether it's a leap year ‚Äî yday_leap","text":"","code":"yday_leap(time_value)"},{"path":[]},{"path":"https://cmu-delphi.github.io/epipredict/dev/news/index.html","id":"breaking-changes-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"epipredict 0.2","text":"Moved example datasets hosted package loaded epidatasets package. datasets can longer loaded data(<dataset name>), can accessed data(<dataset name>, package = \"epidatasets\"), epidatasets::<dataset name> , loading package, name dataset alone (#382). step_adjust_latency() longer allows empty column selection. Addresses upstream breaking changes cmu-delphi/epiprocess#595 (growth_rate()). step_growth_rate() lost additional_gr_args_list argument now na_rm argument. Moves epiprocess depends (#440). internals changed, downstream users may need add library(epiprocess) existing code. Removes dependence distributional package, replacing quantiles hardhat::quantile_pred(). associated functions deprecated lifecycle messages.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/news/index.html","id":"improvements-0-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"epipredict 0.2","text":"Add step_adjust_latency, give several methods adjust forecast forecast_date last day data. Fix layer_population_scaling default other_keys. Make key column inference consistent within package current epiprocess. Fix quantile_reg() producing error asked output just median-level predictions. (temporary) ahead negative allowed step_epi_ahead step_epi_shift Add reference_date argument epi_recipe() Add step_climate() create ‚Äúclimate‚Äù predictor forecast workflows Add climatological_forecaster() automatically create climate baselines Replace dist_quantiles() hardhat::quantile_pred() Allow quantile() threshold interval desired (#434)","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/news/index.html","id":"bug-fixes-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"epipredict 0.2","text":"Shifting columns results error either step_epi_ahead step_epi_lag Quantiles produced grf sometimes order. dist_quantiles can NA values without causing unrelated errors adjust default quantiles throughout match. force layer_residual_quantiles() always include 0.5. Rename recipes:::check_training_set() recipes:::validate_training_data(), changed recipes 1.1.0. new column name duplicating existing column name results error instead random name.","code":""},{"path":"https://cmu-delphi.github.io/epipredict/dev/news/index.html","id":"epipredict-01","dir":"Changelog","previous_headings":"","what":"epipredict 0.1","title":"epipredict 0.1","text":"simplify layer_residual_quantiles() avoid timesuck utils::methods() rename dist_quantiles() descriptive, breaking change removes previous pivot_quantiles() (now *_wider(), breaking change) add pivot_quantiles_wider() easier plotting add complement pivot_quantiles_longer() add cdc_baseline_forecaster() flusight_hub_formatter() add smooth_quantile_reg() improved printing various methods / internals canned forecasters get class fixed quantile bug flatline_forecaster() add functionality output unfit workflow canned forecasters add quantile_reg() clean documentation bugs add smooth_quantile_reg() add classifier training window step debugged min_train_window argument removed canned forecasters add forecasters implement postprocessing vignettes avaliable arx_forecaster pkgdown Publish public easy navigation Two simple forecasters test beds Working vignette use checkmate input validation refactor quantile extrapolation (possibly creates different results) force target_date + forecast_date handling match time_type epi_df. allows annual weekly data add check_enough_train_data() error training data small added check_enough_train_data() arx_forecaster() layer_residual_quantiles() now error residual quantiles NA *_args_list() functions now warn forecast_date + ahead != target_date predictor argument arx_forecaster() now defaults value outcome argument arx_fcast_epi_workflow() arx_class_epi_workflow() now default trainer = parsnip::logistic_reg() match canned versions. add forecast() method simplify generating forecasts refactor bake.epi_recipe() remove epi_juice(). Revise compat-purrr use r-lang standalone-* version (via usethis) Replaced old version-faithful example sliding AR & ARX forecasters vignette epi_recipe() now warn given non-epi_df data layer_predict() predict.epi_workflow() now appropriately forward ... args intended predict.model_fit() bake.epi_recipe() now re-infer geo time type case baking steps changed appropriate values produce length 0 dist_quantiles() add functionality calculate weighted interval scores dist_quantiles() Add step_epi_slide produce generic sliding computations epi_df Add quantile random forests (via grf) parsnip engine Replace epi_keys() epiprocess::key_colnames(), #352 descriptive error messages arg_is_*(), #287 Fix bug fit() drops epi_workflow class (also error non-epi_df data given epi_recipe()), #363 Try retain epi_df class baking extent possible, #376","code":""}]
